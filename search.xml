<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSP-J 2021赛后总结</title>
    <url>/2021/11/13/CSP-J-2021%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="solution">Solution</h1>
<h2 id="t1">T1</h2>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;

using namespace std;

#define INF 0x3f3f3f3f
#define int long long

int l, r, n;

inline int brute(int n ,int l, int r) {
    //bf: 暴力枚举k \in [l, r], 90 pts
    int ans = -INF;
    for(int i = l; i &lt;= r; i ++) {
        ans = max(ans, i % n);
    }
    return ans;
}

inline int ac(int n, int l, int r) {
    //先要明白余数是循环出现的
    //L mod n = l, R mod n = r
    //则余数是{l, l + 1, l + 2, ..., l + n - 1, ..., 0, 1, 2, ..., n - 1, ..., r}
    int ans;
    if(l / n == r / n) ans = r % n;     //[l, r]区间比n小 --&gt; 数越大 余数越大 因为没有到n - 1的
    else ans = n - 1;                   //l / n == r / n --&gt; [l, r]区间比n大 --&gt; 肯定有能取到n - 1的数, 即最大k.

    return ans;
}

signed main() {
    ios_base::sync_with_stdio(false); cin.tie(0);

    cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;
    //cout &lt;&lt; brute(n, l, r) &lt;&lt; endl;
    cout &lt;&lt; ac(n, l, r) &lt;&lt; endl;

    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h2 id="t2">T2</h2>
<h2 id="t3">T3</h2>
<h2 id="t4">T4</h2>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>赛后总结</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>FREE-Figurines</title>
    <url>/2021/12/04/FREE-Figurines/</url>
    <content><![CDATA[<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;

const int N = 1e6;

using namespace std;

/*
两种操作: 接在后面 / 删除最前面.
最差情况: "重组", 即全部删了再拼起来. 需要2n次操作.
优化: 尾巴上的节点不需要操作. 可以统计有多少个这种节点, 减去节点数 * 2即可.
*/

int src[N], dest[N], len[N], n, ans;
bool vis[N];

inline void debug() {
    printf("ans = %d\n", ans);
}

int main() {
    cin &gt;&gt; n;
    /*预处理, 统计最坏情况ans*/
    for(int i = 1; i &lt;= n; i++) {
        cin &gt;&gt; src[i];
        vis[src[i]] = true;
        if(src[i]) ans++;
    }
    for(int i = 1; i &lt;= n; i++) {
        cin &gt;&gt; dest[i];
        vis[dest[i]] = true;
        if(dest[i]) ans++;
    }

    for(int i = 1; i &lt;= n; i++) {
        if(!vis[i]) {
            int tmpi = i;
            while(src[tmpi] * dest[tmpi] &amp;&amp; src[tmpi] == dest[tmpi]) {   //不为自由的 &amp;&amp; 相等就是不用断开的链
                ans -= 2;
                tmpi = src[tmpi];
            }
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>OI比赛中的那些玄学优化</title>
    <url>/2021/10/22/OI%E6%AF%94%E8%B5%9B%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%8E%84%E5%AD%A6%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>这是我暑假零基础入门C++的时候整理的小技巧. 现在到了CSP-2021赛前, 我在看笔记的时候发现了这个, 就把它发在我的网站上, 希望能帮到即将参加OI的你, <del>也希望能借此给自己增加Rp</del>.</p>
<p>这也是我第一次OI比赛, 希望能考好点.</p>
<h1 id="读入优化">读入优化</h1>
<p><strong>fread快读/快写代码来自oi-wiki</strong></p>
<h2 id="关闭同步推荐">关闭同步(推荐)</h2>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ios_base::sync_with_stdio(false);
cin.tie(0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div>
<p>关闭iostream与stdio中输入输出流的同步. 使<code>std::cin</code>与<code>std::cout</code>接近于<code>scanf()</code>与<code>printf()</code>的速度.</p>
<h3 id="注意事项">注意事项</h3>
<p>这个小优化是用得最多的, cin和cout慢的要命, 在IO特别多的题中要用cin/cout一定要加.</p>
<p><strong>注意: 加了第一行之后将无法使用<code>printf()</code>, <code>scanf()</code>等<code>stdio.h</code>中的函数, 如果作死用了会导致IO流混乱! </strong></p>
<p><strong>注意2: cin/cout写入文件不是即时的, 所以一定要<code>endl</code>刷新缓冲区(或者<code>\n</code>之类的)</strong></p>
<h2 id="printf和scanf推荐"><code>printf()</code>和<code>scanf()</code>(推荐)</h2>
<p>同上, 速度嗖嗖的. 但是不能在关闭同步后使用.</p>
<p>还能格式化字符串, 不香吗?(比如让你保留8位小数, 只需<code>printf("%.8lf", my_variable)</code>即可, cout还需借助<code>iomanip</code>)</p>
<h2 id="快读快写">快读/快写</h2>
<p>很好用, <code>getchar()</code>和<code>putchar()</code>快如闪电.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int read() {
  int x = 0, w = 1;	//x是数字, w是符号位
  char ch = 0;
  while (ch &lt; '0' || ch &gt; '9') {  //!isdigit(ch)
    if (ch == '-') w = -1;        
    ch = getchar();               
  }
  while (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {  //isdigit(ch)
    x = x * 10 + (ch - '0'); 
    ch = getchar();
  }
  return x * w;
}

//Example:
//int n = read();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline void write(int x) {
  static int sta[35];
  int top = 0;
  do {
    sta[top++] = x % 10, x /= 10;
  } while (x);
  while (top) putchar(sta[--top] + 48); //(int)'0'
}

//Example:
//int a = 5;
//write(a);	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h2 id="fread较为玄学">fread(较为玄学)</h2>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace IO {
const int MAXSIZE = 1 &lt;&lt; 20;
char buf[MAXSIZE], *p1, *p2;
#define gc()                                                               \
  (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, stdin), p1 == p2) \
       ? EOF                                                               \
       : *p1++)
inline int rd() {
  int x = 0, f = 1;
  char c = gc();
  while (!isdigit(c)) {
    if (c == '-') f = -1;
    c = gc();
  }
  while (isdigit(c)) x = x * 10 + (c ^ 48), c = gc();
  return x * f;
}
char pbuf[1 &lt;&lt; 20], *pp = pbuf;
inline void push(const char &amp;c) {
  if (pp - pbuf == 1 &lt;&lt; 20) fwrite(pbuf, 1, 1 &lt;&lt; 20, stdout), pp = pbuf;
  *pp++ = c;
}
inline void write(int x) {
  static int sta[35];
  int top = 0;
  do {
    sta[top++] = x % 10, x /= 10;
  } while (x);
  while (top) push(sta[--top] + '0');
}
}  // namespace IO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>如上是基于<code>fread</code>实现的快读快写, 本质是利用文件的缓冲区.</p>
<p>实现时需要将<code>getchar()</code>稍微改改, (代码中<code>\</code>表示显示不下, 写的时候从这一行接着写就行, 无需换行)</p>
<h3 id="注意事项-1">注意事项</h3>
<p>敲这个板子太费时间了, 还是用上面那个基于<code>putchar()</code>和<code>getchar()</code>的那个性价比最高.</p>
<p><strong>好像这个东西很玄学, 一些情况下会使整个程序变慢(?)</strong></p>
<h1 id="执行优化">执行优化</h1>
<h2 id="i较为推荐"><code>++i</code>(较为推荐)</h2>
<p>有研究表明<code>++i</code>比<code>i++</code>快, 说是<code>i++</code>用了一个临时变量.</p>
<p><strong>注: 很多人在网上科普两者的关系, 但是只是看反编译代码, 看到<code>++i</code>比<code>i++</code>用的汇编指令少一两个, 就说<code>++i</code>更快(甚至每一句指令的意思都说一下, 即到底慢在哪了)??? 就算真的是这样这种不懂装懂的态度也不是很好</strong></p>
<p><code>++i</code>执行完后的值跟i是一样的, 可以拿来给其它变量赋值.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int k = ++i;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>
<h2 id="register已经死了"><code>register</code>(已经死了)</h2>
<p><code>register</code>, 即直接操作寄存器. 在C++14逐渐被弃用.</p>
<p>在之前的C++版本中都可以放在循环里面提升性能.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(register int i = 0; i &lt; n; ++i)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>
<h2 id="inline内联函数推荐"><code>inline</code>内联函数(推荐)</h2>
<p><code>inline</code>可以在调用处就地展开函数.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using namespace std;

inline int lowbit(int x) {
	return x &amp; (-x);
}

int main() {
	int x = 114514;
	int y = lowbit(x);
	//相当于直接运行函数, 没有调用关系
	//inline int lowbit(int x) {
	//		return x &amp; (-x);
	//}
    cout &lt;&lt; y &lt;&lt; endl;
	return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>对于一些需要调用多次的函数, 可以使用<code>inline</code>声明他是内联的.</p>
<p>对于inline函数, 调用时不像普通函数那样, 将地址, 参数等关键信息压入栈(一种内存布局)中, 再执行<code>call</code>指令. 返回时再操作栈, 最后<code>ret</code>. 这样不仅费时间, 还浪费栈空间.</p>
<p>inline函数会在预处理阶段像宏(如<code>#define</code>)在调用处原地展开.</p>
<h3 id="注意事项-2">注意事项</h3>
<ul>
<li>对递归函数没用(有人说递归程序用inline会爆re, 本人亲测不会, 应该是编译器优化掉了)</li>
<li>节省了栈空间和调用开销, 但是增加了程序编译后的体积. 在比赛中没啥事, 但在实际开发中慎用.</li>
</ul>
<h3 id="小实验-探究inline函数的性质诚意满满-真的不看看吗">小实验: 探究inline函数的性质(诚意满满, 真的不看看吗?)</h3>
<p>反编译工具: <code>IDA Pro 7.5 (32-bit)</code></p>
<p>测试环境: <code>Windows 10 x64</code></p>
<p>我们写出如下测试代码:</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//test.cpp
#include &lt;iostream&gt;

inline int my_inline_func(int x) {
    //lowbit :)
    return x &amp; (-x);
}

int main() {
    int n = 0;
    scanf("%d", &amp;n);
    printf("%d\n", my_inline_func(n));
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>使用<code>g++ test.cpp -O -o test.exe</code>命令(<code>-O</code>表示开启优化, 即使用内联函数)生成可执行文件.</p>
<p>反编译之后:</p>
<div class="code-wrapper"><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; main()
.text:00401421 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00401421                 public _main
.text:00401421 _main           proc near               ; CODE XREF: sub_4011A0+8E↑p
.text:00401421
.text:00401421 argc            = dword ptr  8
.text:00401421 argv            = dword ptr  0Ch
.text:00401421 envp            = dword ptr  10h
.text:00401421
.text:00401421 ; __unwind {
.text:00401421                 push    ebp
.text:00401422                 mov     ebp, esp
.text:00401424                 and     esp, 0FFFFFFF0h
.text:00401427                 sub     esp, 20h
.text:0040142A                 call    ___main
.text:0040142F                 mov     dword ptr [esp+1Ch], 0
.text:00401437                 lea     eax, [esp+1Ch]
.text:0040143B                 mov     [esp+4], eax
.text:0040143F                 mov     dword ptr [esp], offset Format ; "%d"
.text:00401446                 call    _scanf
							;这里应该就是inline函数展开后的样子了, 可以看到并没有调用的过程
.text:0040144B                 mov     edx, [esp+1Ch]
.text:0040144F                 mov     eax, edx
.text:00401451                 neg     eax
.text:00401453                 and     eax, edx
.text:00401455                 mov     [esp+4], eax
.text:00401459                 mov     dword ptr [esp], offset aD_0 ; "%d\n"
.text:00401460                 call    _printf
.text:00401465                 mov     eax, 0
.text:0040146A                 leave
.text:0040146B                 retn
.text:0040146B ; } // starts at 401421
.text:0040146B _main           endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>可以知道, inline函数只是就地展开, 并没有调用, 这个"调用的"过程在地址上是连续的, 没有涉及到地址和参数的push/pop操作.</p>
<p>看得还不够清楚? 让我们点一下F5</p>
<p>借助IDA Pro强大的Hex-rays插件, 可以清楚地看到main函数编译后变成了这个样子.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int __cdecl main(int argc, const char **argv, const char **envp)
{
  int v4; // [esp+1Ch] [ebp-4h] BYREF

  __main();	//这个是预处理, 即程序的入口点, 不用管.
  v4 = 0;
  scanf("%d", &amp;v4);
  printf("%d\n", v4 &amp; -v4);	//这就是inline函数的魅力 :)
  return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>现在, inline函数的作用我们的理解已经很透彻了.</p>
<h1 id="算法优化">算法优化</h1>
<h2 id="相关stl">相关STL</h2>
<p>据说set, map常数比较大.</p>
<p>但是我不会手写.</p>
<p>所以用着吧...</p>
<p>但是<code>std::sort()</code>据说很高级, 快排, 堆排, 插入排序三管齐下, 性能很不错.</p>
<p>基本上只要自己写写归并, 剩下交给sort就好.</p>
<h1 id="不要作死">不要作死</h1>
<p><strong>这是在赛前加的, 意在提醒广大选手不要为了优化而作死, 想一个更好的算法或者打暴力拿个部分分不香吗?</strong></p>
<p>以下内容在NOI系列竞赛中<strong>不能用</strong>!!! 不包括全部, 只包括选手们可能会作死用到的(我猜的).</p>
<p>还是以官方说明为准, 这里只是提醒一下.</p>
<h2 id="pragma如私自开o2-或者开栈">pragma(如私自开<code>O2</code>, 或者开栈)</h2>
<p>官方明令禁止</p>
<p>开栈的话需要在本机修改, (方法自行百度). CSP不限制栈空间.</p>
<h2 id="内联汇编">内联汇编</h2>
<p>官方明令禁止.</p>
<p>内联汇编分两种, 一种是<code>__asm__</code>, 一种是开一个数组把机器码放进去, 再<code>memcpy</code>到可执行的内存区域上</p>
<p><strong>都不要用!!!</strong></p>
<p>尤其是第二种, 你在自己的电脑上玩玩算了, 很可能在这台电脑上能运行, 另一台电脑上就出错. 而且这类程序需要高权限, 可执行的内存区域都不太好往里写数据.</p>
<p>最重要的, <strong>比赛用了会爆零!!!</strong></p>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>常数优化</tag>
        <tag>笔记</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>POI2010 - TESIntelligence Test</title>
    <url>/2021/11/21/POI2010-TESIntelligence-Test/</url>
    <content><![CDATA[<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

const int N = 1e6;
#define YES puts("TAK")
#define NO puts("NIE");

int len, tc;
vector&lt;int&gt; nxt[N];

//思路 开二维vector存一堆指针 nxt[x][y]就是数字x出现的第y次的位置.
//vector动态开内存 不会爆空间.
//二分去找"数字k出现第x次的位置", 实现"快速跳转".

int bsearch(int num, int expected_pos) {
    int l = 0, r = nxt[num].size() - 1, res = len + 1;
    while(l &lt;= r) {
        int mid = (l + r) &gt;&gt; 1;
        if(nxt[num][mid] &gt; expected_pos) {
            r = mid - 1;
            res = mid;
        } else l = mid + 1;
    }
    //return nxt[num][res];
    return (res == len + 1 ? res : nxt[num][res]);
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);
    cin &gt;&gt; len;
    for(int i = 1; i &lt;= len; i++) {
        int tmp;
        cin &gt;&gt; tmp;
        nxt[tmp].push_back(i);
    }

    cin &gt;&gt; tc;
    while(tc--) {
        int l, a[N];
        cin &gt;&gt; l;
        bool flag = true; int pos = 0;
        for(int i = 1; i &lt;= l; i++) cin &gt;&gt; a[i];
        for(int i = 1; i &lt;= l; i++) {
            pos = bsearch(a[i], pos);
            //fprintf(stderr, "a[%d] = %d,\tpos = %d\n", i, a[i], pos);
            if(pos &gt; len) { flag = 0; break; }
        }
        
        flag ? YES : NO;
    }
    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Splay</title>
    <url>/2022/03/12/Splay/</url>
    <content><![CDATA[<h1 id="splay">Splay</h1>
<h2 id="定义">定义</h2>
<p>Splay是一种BST, 将访问过的结点不断旋转到根结点, 在满足BST性质的同时保证其"平衡", <strong>基于时间、空间局部性原理优化查找性能(这样操作使得高频访问的结点在经常根结点附近)</strong>.</p>
<p><strong>本文的BST每一个结点只维护单个值(而非键值对), 下面说法中v、val、key都指这个值, BST性质的维护它们的大小关系做依据.</strong></p>
<h3 id="bst性质">BST性质</h3>
<p>左子树任意结点的key<span class="math inline">\(\lt\)</span>根结点key<span class="math inline">\(\lt\)</span>右子树任意结点key, 即<strong>中序遍历单调递增</strong>.</p>
<p>常见的BST有Treap、Splay、AVL等.</p>
<h2 id="结点结构">结点结构</h2>
<p>开结构体数组记录两个子结点及父结点的数组下标, 类似于一个<strong>链表</strong>(实际上很多树状数据结构都是数组模拟链表). 结点同时存储维护的信息.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int SIZE = 1e5;

struct Node {
    //两个子结点及父结点数组下标, val
    int s[2], p, v;
    //延迟标记及子树大小
    int dat, size;
    //初始化当前结点
    void init(int _v, int _p) {
        v = _v, p = _p;
        size = 1;
    }
};

//Allocate
Node tr[SIZE];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>其中规定<code>s[0]</code>为左子结点, <code>s[1]</code>为右子结点, 即: (后续代码均未使用如下define, 只是为了方便理解)</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define ls s[0]
#define rs s[1]
#define son s[k]
#define son_bro s[k ^ 1]		//son's brother<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div>
<h2 id="单旋操作rotate">单旋操作(rotate)</h2>
<p>旋转需要保证BST性质; 根结点变量, 即<code>root</code>需要更新; 结点维护的信息(如延迟标记)需要更新.</p>
<p>旋转改变了是树的形态, 本质是<strong>改变父子关系</strong>.</p>
<figure>
<img src="https://s2.loli.net/2022/02/27/51Z6t4FNpChvJbi.jpg" alt="Splay单旋"><figcaption aria-hidden="true">Splay单旋</figcaption>
</figure>
<h4 id="右旋-即operatornamezigx操作">右旋, 即<span class="math inline">\(\operatorname{Zig}(x)\)</span>操作</h4>
<p>顾名思义就是将<span class="math inline">\(x\)</span>的左子树绕着<span class="math inline">\(x\)</span>的父结点<span class="math inline">\(y\)</span>向右旋转.</p>
<p>需要注意的是<span class="math inline">\(x \lt x_r \lt y\)</span>, 故<span class="math inline">\(x_r\)</span>应该转到<span class="math inline">\(y_r\)</span>左子树的位置.</p>
<p>这样的操作通过改变<span class="math inline">\(y\)</span>与<span class="math inline">\(x_r\)</span>、<span class="math inline">\(\operatorname{fa}(y)\)</span>与<span class="math inline">\(x\)</span>、<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span>的父子关系达到.</p>
<h4 id="左旋-即operatornamezagx操作">左旋, 即<span class="math inline">\(\operatorname{Zag}(x)\)</span>操作</h4>
<p>同理, <span class="math inline">\(x\)</span>的右子树绕着<span class="math inline">\(y\)</span>向左旋转, <span class="math inline">\(x_l\)</span>接在<span class="math inline">\(y\)</span>右子树位置.</p>
<p>即需要改变<span class="math inline">\(y\)</span>与<span class="math inline">\(x_l\)</span>、<span class="math inline">\(\operatorname{fa}(y)\)</span>与<span class="math inline">\(x\)</span>、<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span>的父子关系.</p>
<h4 id="旋转结点-即operatornamerotatex操作">旋转结点, 即<span class="math inline">\(\operatorname{rotate}(x)\)</span>操作</h4>
<p>上述操作可以使用一个操作<span class="math inline">\(\operatorname{rotate}(x)\)</span>来完成, 即实现<strong>"自动判定左右"的单旋操作</strong>. <span class="math inline">\(x\)</span>是<span class="math inline">\(y\)</span>的左子树就右旋, 右子树反之.</p>
<p>该操作的精髓就是判定<span class="math inline">\(x\)</span>是<span class="math inline">\(y\)</span>的左结点还是右结点.</p>
<p>前面说过, "旋转"的本质是"改变父子关系". 每个结点维护了她的左右子树和父结点, 所以该过程需要"互认"父子关系, 即需要修改两个结点的信息; 同时因为树的形态被改变, 需要重新统计延迟标记维持的信息(如子树大小).</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Rotate(int x) {
	int y = tr[x].p, z = tr[y].p;
    int k = (tr[y].s[1] == x);
    tr[z].s[tr[z].s[1] == y] = x, tr[x].p = z;
    tr[y].s[k] = tr[x].s[k ^ 1], tr[tr[x].s[k ^ 1]].p = y;
    tr[x].s[k ^ 1] = y, tr[y].p = x;			//tr[x].s[k]的含义是取处于yx直线上的x的儿子, k ^ 1是取她的兄弟
    Pushup(y), Pushup(x);
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>说人话就是:</p>
<p><span class="math inline">\(k\)</span>的获取:</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline int k(int x, int y) {
    /*
     *@description 返回x是y的哪个儿子, 左0右1.
     */
	return (tr[y].s[1] == x);
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>rotate伪代码:</p>
<div class="code-wrapper"><pre class="line-numbers language-pseudocode" data-language="pseudocode"><code class="language-pseudocode">/* y是x的爸爸, z是x的爷爷; */
/* 以下每一步都需要修改两个结点的值, 即互认关系 */
用z取到y, 将x转到y的位置上, 并与z互认; /* 以下两部均需操作结点与其父结点"互认"过程, 不再赘述 */
x(此时在y的位置上)的兄弟转到原先x(即tr[y].s[k])的位置上;
让y转到原先x的兄弟的位置;
分别更新y, x子树维护的信息;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h2 id="双旋操作splay">双旋操作(splay)</h2>
<p>通过一或两次rotate, 可以调整BST的形态, 使其更平衡.</p>
<p>通过过程<span class="math inline">\(\operatorname{splay}(x, goal)\)</span>将结点<span class="math inline">\(x\)</span>转到<span class="math inline">\(goal\)</span>的子结点.</p>
<p>规定<span class="math inline">\(y\)</span>是<span class="math inline">\(x\)</span>父结点, <span class="math inline">\(z\)</span>是<span class="math inline">\(y\)</span>父结点, splay分六种(3 * 2)情况讨论.</p>
<ol type="1">
<li>当<span class="math inline">\(\operatorname{fa}(x) = \operatorname{Root}\)</span>时, 旋转一次<span class="math inline">\(x\)</span>(右或左), 即Zig或Zag;</li>
<li>当<span class="math inline">\(\operatorname{fa}(x) \ne \operatorname{Root}\)</span>且<span class="math inline">\(z, y, x\)</span>在一条直线上, 旋转一次<span class="math inline">\(y\)</span>, 再同方向旋转一次<span class="math inline">\(x\)</span>, 即Zig-Zig或Zag-Zag;</li>
<li>当<span class="math inline">\(\operatorname{fa}(x) \ne \operatorname{Root}\)</span>且<span class="math inline">\(z, y, x\)</span>形状是在一条直线的中间折了一下, 分别对<span class="math inline">\(x\)</span>执行两次不同方向的旋转, 即Zig-Zag或Zag-Zig.</li>
</ol>
<p>画图理解即可.</p>
<p>使用rotate就是:</p>
<ul>
<li>折线2x</li>
<li>直线yx</li>
</ul>
<p><strong>需要注意的是该操作是将<span class="math inline">\(x\)</span>转到<span class="math inline">\(goal\)</span>下面, 故当<span class="math inline">\(x\)</span>与<span class="math inline">\(goal\)</span>为具有父子关系的两个结点时 (即第1、2种情况)不需要操作(即不需要交换它们).</strong></p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Splay(int x, int goal) {
    //把x转到goal下面
    while(tr[x].p != goal) {
        int y = tr[x].p, z = tr[y].p;
        if(z != goal) {
            if((tr[z].s[1] == y) ^ (tr[y].s[1] == x)) Rotate(x);    //折线先转x再转x
            else Rotate(y);                                         //直线先转y
        }
        Rotate(x);                                                  //统一转x
    }
    if(goal == 0) Root = x;                                         //更新根结点(0为根结点下标)
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<hr>
<h2 id="插入操作insert">插入操作(insert)</h2>
<p>过程<span class="math inline">\(\operatorname{insert}(val)\)</span>将<span class="math inline">\(val\)</span>插入BST的相应位置<span class="math inline">\(x\)</span>, 将插入的数转到根结点, 即执行<span class="math inline">\(\operatorname{splay}(x, 0)\)</span>.</p>
<p>插入时需要维护BST性质, 将插入的这个数与当前节点比较, <strong>"小插左, 大插右"</strong>.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Insert(int v) {
    /*
     * @param v 要插入值的val.
     */
    int u = Root, p = 0;		//从根结点开始, u为当前节点数组下标, p为她的爸爸下标
    while(u) {
        p = u, u = tr[u].s[v &gt; tr[u].v];	//小左大右地插下去, 方括号里的是判定左右
    }
    u = ++idx;			//结点又多了一个, idx += 1;
    if(p) tr[p].s[v &gt; tr[p].v] = u;		//将p的儿子u插入适当位置
    tr[u].init(v, p);	//给这个点初始化爸爸下标和自身value, 并将大小设为1
    splay(u, 0);		//转到根结点
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h2 id="查询指定数的排名getrank">查询指定数的排名(getRank)</h2>
<p>不会<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p>
<h2 id="查询第k小的数getvalbyrank">查询第<span class="math inline">\(k\)</span>小的数(getValByRank)</h2>
<p><span class="math inline">\(\operatorname{getValByRank}(rank)\)</span>操作分三种情况讨论: <span class="math display">\[
结点位于:\,
\begin{cases}
1. 所求结点位于左子树, 左子树结点个数\ge rank;\\
2. 所求结点为中序遍历第k个数(即左子树的父结点), 左子树结点个数 = rank - 1;\\
3. 所求结点位于右子树(rank需要减去左子树大小加一的和), 左子树结点个数 \lt rank - 1
\end{cases}
\]</span></p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int getValByRank(int rk) {
    int u = Root;
    while(true) {
        Pushdown(u);
        if(tr[tr[u].s[0]] &gt;= rk) u = tr[u].s[0];
        else if(tr[tr[u].s[0]] + 1 == rk) return u;
        else rk -= (tr[tr[u].s[0]] + 1), u = tr[u].s[1];
    }
    return -1;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h2 id="删除操作delete">删除操作(delete)</h2>
<p>操作<span class="math inline">\(\operatorname{delete}(x)\)</span>从Splay中删除value为<span class="math inline">\(x\)</span>的结点.</p>
<p>该操作首先将<span class="math inline">\(x\)</span>转到根结点, 再合并<span class="math inline">\(x\)</span>的左右子树.</p>
<h2 id="查询前驱后继getprefixgetsuffix">查询前驱/后继(getPrefix/getSuffix)</h2>
<p><span class="math inline">\(x\)</span>的前驱: 小于<span class="math inline">\(x\)</span>的最大数;</p>
<p><span class="math inline">\(x\)</span>的后继: 大于<span class="math inline">\(x\)</span>的最小数.</p>
<p><span class="math inline">\(\operatorname{getPrefix}(x)\)</span>操作查询<span class="math inline">\(x\)</span>的前驱, 可以通过插入<span class="math inline">\(x\)</span>(插入后位于根结点), 此时<span class="math inline">\(x\)</span>左子树中最右边的结点即为所求, 最后删除结点<span class="math inline">\(x\)</span>;</p>
<p><span class="math inline">\(\operatorname{getSuffix}(x)\)</span>操作反之.</p>
<hr>
<h2 id="例题">例题</h2>
<h3 id="文艺平衡树luogu-p3391">文艺平衡树(<a href="https://www.luogu.com.cn/problem/P3391">Luogu P3391</a>)</h3>
<blockquote>
<p>翻转一个区间，例如原有序序列是<span class="math inline">\(\{5, 4, 3, 2, 1\}\)</span>，翻转区间是<span class="math inline">\([2, 4]\)</span>的话，结果是<span class="math inline">\(\{5, 2, 3, 4, 1\}\)</span>.</p>
</blockquote>
<p>在结点上维护延迟标记<span class="math inline">\(flag\)</span>来判定翻转状态, 避免多次翻转造成性能上的浪费.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;

const int N = 1e5;

using namespace std;

struct Node {
    int s[2], p, v, siz;
    int flag;                  //flag == 1则需要翻转
    void init(int _v, int _p) {
        v = _v, p = _p;
        siz = 1;
    }
};

Node tr[N];
int idx, Root;
int cas, n;

void Pushup(int x) {
    tr[x].siz = tr[tr[x].s[0]].siz + tr[tr[x].s[1]].siz + 1;
}

void Pushdown(int x) {
    if(tr[x].flag) {
        swap(tr[x].s[0], tr[x].s[1]);
        tr[tr[x].s[0]].flag ^= 1;
        tr[tr[x].s[1]].flag ^= 1;
        tr[x].flag = 0;
    }
}

void Rotate(int x) {
    int y = tr[x].p, z = tr[y].p;
    int k = (tr[y].s[1] == x);
    tr[z].s[tr[z].s[1] == y] = x, tr[x].p = z;
    tr[y].s[k] = tr[x].s[k ^ 1], tr[tr[x].s[k ^ 1]].p = y;
    tr[x].s[k ^ 1] = y, tr[y].p = x;
    Pushup(y), Pushup(x);
}

void Splay(int x, int goal) {
    while(tr[x].p != goal) {
        int y = tr[x].p, z = tr[y].p;
        if(z != goal) {
            if((tr[z].s[1] == y) ^ (tr[y].s[1] == x)) Rotate(x);
            else Rotate(y);
        }
        Rotate(x);
    }
    if(goal == 0) Root = x;
}

void Insert(int v) {
    int u = Root, p = 0;
    while(u) {
        p = u, u = tr[u].s[v &gt; tr[u].v];
    }
    u = ++idx;
    if(p) {
        tr[p].s[v &gt; tr[p].v] = u;
    }
    tr[u].init(v, p);
    Splay(u, 0);
}

int getValByRank(int rk) {
    int u = Root;
    while(true) {
        Pushdown(u);
        if(tr[tr[u].s[0]].siz &gt;= rk) u = tr[u].s[0];
        else if(tr[tr[u].s[0]].siz == rk - 1) return u;
        else rk -= (tr[tr[u].s[0]].siz + 1), u = tr[u].s[1];
    }
    return -1;
}

void Output(int u) {
    //这一步是翻转
    Pushdown(u);
    //从u开始中序遍历
    //左
    if(tr[u].s[0]) Output(tr[u].s[0]);
    //判定哨兵, 输出当前结点
    if(tr[u].v &gt;= 1 &amp;&amp; tr[u].v &lt;= n) cout &lt;&lt; tr[u].v &lt;&lt; ' ';
    //右
    if(tr[u].s[1]) Output(tr[u].s[1]);
}

int main() {
    cin &gt;&gt; n &gt;&gt; cas;
    for(int i = 0; i &lt;= n + 1; ++i) {
        //插入哨兵防止越界
        Insert(i);
    }
    while(cas--) {
        int l, r;
        cin &gt;&gt; l &gt;&gt; r;
        l = getValByRank(l), r = getValByRank(r + 2);
        Splay(l, 0), Splay(r, l);
        tr[tr[r].s[0]].flag ^= 1;
    }
    Output(Root);
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//对零基础即为友好
#include &lt;iostream&gt;

const int N = 1e6;

using namespace std;

struct Node {
	int v, p, s[2], siz;
	bool flag;
	void init(int _v, int _p) {
		v = _v, p = _p;
		siz = 0;
	}
};

Node tr[N];
int n, cas, Root, idx;

/*
 * 一些宏定义, 用法简单明了, 跟一大堆杂乱无章的中括号说再见!!!
 * ex. 	node(x).init(v, p)		//初始化结点x的属性v, p
 * 		siz(left(x))			//获取结点x的左子节点size
 *		siz(node(x).ls)			//另一种写法
 */

#define ls s[0]
#define rs s[1]
#define isRoot(x) (x == 0)
#define BST_getPos(fa, val) tr[fa].s[(val) &gt; tr[(fa)].v]	//在fa结点下面根据BST性质插入一个值为val的结点, 判定结点位置(即: 要插在哪里)
#define node(x) tr[(x)]										//可以理解为x号结点的对象, 方便使用ls, rs
#define left(x) tr[(x)].s[0]
#define right(x) tr[(x)].s[1]
#define val(x) tr[(x)].v
#define siz(x) tr[(x)].siz
#define flag(x) tr[(x)].flag
#define pa(x) tr[(x)].p
#define son(fa, x) tr[(fa)].s[(x)]							//获取结点fa的儿子, 参数x为左右, 左0右1
#define LoR(fa, x) (tr[(fa)].s[1] == (x))					//L or R, x是fa的哪个儿子


void Pushup(int x) {
	siz(x) = siz(left(x)) + siz(right(x)) + 1;
}

void Pushdown(int x) {
	if(flag(x)) {
		swap(left(x), right(x));
		flag(left(x)) ^= 1;
		flag(right(x)) ^= 1;
		flag(x) = 0;
	}
}

void Rotate(int x) {
	int y = pa(x), z = pa(y);
	int k = LoR(y, x);
	son(z, LoR(z, y)) = x, pa(x) = z;
	son(y, k) = son(x, k ^ 1), pa(son(x, k ^ 1)) = y;
	son(x, k ^ 1) = y, pa(y) = x;
	Pushup(y), Pushup(x);
}

void Splay(int x, int goal) {
	while(pa(x) != goal) {
		int y = pa(x), z = pa(y);
			if(z != goal) {
			if(LoR(z, y) ^ LoR(y, x)) {
				Rotate(x);
			} else {
				Rotate(y);
			}
		}
		Rotate(x);
	}
	if(isRoot(goal)) Root = x;
}

void Insert(int v) {
	int u = Root, p = 0;
	while(u) {
		p = u, u = BST_getPos(u, v);
	}
	u = ++idx;
	if(!isRoot(p)) {
		BST_getPos(p, v) = u;
	}
	node(u).init(v, p);
	Splay(u, 0);
}

int getValByRank(int rk) {
	int u = Root;
	while(true) {
		Pushdown(u);
		if(siz(left(u)) &gt;= rk) u = left(u);
		else if(siz(left(u)) == rk - 1) return u;
		else rk -= siz(left(u)) + 1, u = right(u);
	}
	return -1;
}

void Output(int x) {
	Pushdown(x);
	if(left(x)) Output(left(x));
	if(val(x) &gt;= 1 &amp;&amp; val(x) &lt;= n) cout &lt;&lt; val(x) &lt;&lt; ' ';
	if(right(x)) Output(right(x)); 
}

int main() {
	cin &gt;&gt; n &gt;&gt; cas;
	for(int i = 0; i &lt;= n + 1; ++i) {
		Insert(i);
	}
	while(cas--) {
		int l, r;
		cin &gt;&gt; l &gt;&gt; r;
		l = getValByRank(l), r = getValByRank(r + 2);
		Splay(l, 0), Splay(r, l);
		flag(left(r)) ^= 1;
	}
	Output(Root);
	puts("");
	return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h3 id="普通平衡树luogu-p3369">普通平衡树(<a href="https://www.luogu.com.cn/problem/P3369">Luogu P3369</a>)</h3>
<blockquote>
<p>实现增, 删, 查询排名与反查, 查询前驱与后继功能.</p>
</blockquote>
<h4 id="solution1-stdvector">Solution1: <code>std::vector</code></h4>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

vector&lt;int&gt; v;
int cas;

int main() {
	cin &gt;&gt; cas;
	while(cas--) {
		int op, x;
		cin &gt;&gt; op &gt;&gt; x;
		switch(op) {
			case 1:		//insert(x)
				v.insert(lower_bound(v.begin(), v.end(), x), x);
				break;
			case 2:		//delete(x)
				v.erase(lower_bound(v.begin(), v.end(), x));
				break;
			case 3:		//getRank(x)
				cout &lt;&lt; lower_bound(v.begin(), v.end(), x) - v.begin() + 1 &lt;&lt; endl;
				break;
			case 4:		//getValueByRank(x)
				cout &lt;&lt; v[x - 1] &lt;&lt; endl;
				break;
			case 5:		//getPre(x)
				cout &lt;&lt; *--lower_bound(v.begin(), v.end(), x) &lt;&lt; endl;
				break;
			case 6:		//getNxt(x)
				cout &lt;&lt; *lower_bound(v.begin(), v.end(), x + 1) &lt;&lt; endl;
				break;
		}
	}
	return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/06/hello-world/</url>
    <content><![CDATA[<p>如题, 这是我的第一篇文章.</p>
]]></content>
  </entry>
  <entry>
    <title>二分</title>
    <url>/2022/02/20/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h1 id="二分">二分</h1>
<h2 id="二分查找">二分查找</h2>
<p>给定一个序列<span class="math inline">\(\{a\}\)</span>, 查找指定元素<span class="math inline">\(x\)</span>位置.</p>
<h3 id="代码实现">代码实现</h3>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int bsearch(int* a, int x, int l, int r) {
    while(l &lt; r) {
        int mid = l + (r - l &gt;&gt; 1);
        if(a[mid] &gt;= x) r = mid;
        else l = mid + 1;
    }
    return a[l] == x ? l : -1;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h2 id="二分答案">二分答案</h2>
<p>单调区间内高效地查找最优答案, <strong>可以看作"枚举"的优化</strong>. 常用来解决"最大值最小化"问题.</p>
<h2 id="luogu-p1873-砍树"><a href="https://www.luogu.com.cn/problem/P1873">Luogu P1873 砍树</a></h2>
<p>如果枚举<span class="math inline">\([1, 1\times 10^9]\)</span>会超时, 使用二分答案.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;

typedef long long LL;

const int N = 1e6;

using namespace std;

int n;
LL a[N], m;

bool isValid(LL height) {
    LL got = 0;
    for(int i = 0; i &lt; n; ++i) {
        got += max(a[i] - height, 0ll);
    }
    return got &gt;= m;
}

int main() {
    cin &gt;&gt; n &gt;&gt; m;
    for(int i = 0; i &lt; n; ++i) {
        cin &gt;&gt; a[i];
    }
    int l = 1, r = 1e9 + 1;		//闭合的区间, 1e9需要加一
    while(l + 1 &lt; r) {			//l, r不能相邻
        int mid = l + (r - l &gt;&gt; 1);
        if(isValid(mid)) {
            l = mid;
        } else {
            r = mid;
        }
    }
    cout &lt;&lt; l &lt;&lt; endl;
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>启发式合并</title>
    <url>/2021/11/13/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h1 id="梦幻布丁hnoi-2009">梦幻布丁(HNOI-2009)</h1>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*启发式合并，
时间复杂度分析：
考虑用贡献法来分析，每次合并后，队列长度一定大于等于原来短的长度的两倍，这样相当于每次合并都会让短的长度扩大一倍以上，最多扩大 logN 次，
所以总复杂度O(NlogN)，每次O(logN)。
对于这道题目，我们先求出原序列的答案，对于每一种颜色都用类似链表的数据结构串起来，并记录下尾节点。每次修改，都根据启发式合并的方法来暴力合并，
然后处理一下此次合并对答案的影响（显然答案是不增的）。
但是如果我们把 1 染成 2 并且 hsh[1]&gt;hsh[2]，那么我们应该把 2 接到 1 的后面。这样会有一个问题：本次修改后这个链的颜色是 1（颜色为 2 的链被删除了），
如果接下来修改颜色 2（显然这是合法的），会使得找不到颜色 2 而只能找到颜色 1 了。所以我们需要使用一个 f 数组，表示当我们要寻找颜色 x 时，实际上需
要寻找颜色为 color[x] 的链。如果遇到上面这种情况就要交换交换 color[x] 和 color[y]*/ 
#include&lt;bits/stdc++.h&gt;
using namespace std;
const int maxn=100005,maxm=1000005;
int n,m,c[maxn],hsh[maxm],sta[maxm],color[maxm],pos[maxm],nxt[maxn],ans;
int read(){
	int ret=0,f=1;char ch=getchar();
	while (!isdigit(ch)){if (ch=='-')f=-f;ch=getchar();}
	while (isdigit(ch)) ret=(ret&lt;&lt;3)+(ret&lt;&lt;1)+ch-'0',ch=getchar();
	return ret*f;
}
void merge(int x,int y) {
    for (int i=pos[x];i;i=nxt[i]) ans-=(c[i-1]==y)+(c[i+1]==y);//合并时需要注意细节 y x y 
    for (int i=pos[x];i;i=nxt[i]) c[i]=y;//把原有的x统统变成y 
    nxt[sta[x]]=pos[y],pos[y]=pos[x],hsh[y]+=hsh[x];//实质就是再不重新建立关系的同时，依旧利用已有的关联关系。换一个解释就是下次处理颜色y时 
    pos[x]=sta[x]=hsh[x]=0;                         //先把原有的x处理掉(刚刚改变成的y的x)，然后再来解决原有的y，等价于把x接到y的屁股后面
	                                                //最后把x原有的不需要的关联关系干掉 
}
int main(){
    n=read(),m=read();
    for (int i=1;i&lt;=n;i++){
        c[i]=read(),color[c[i]]=c[i];
        ans+=c[i]!=c[i-1];	//统计段数 
        if (!pos[c[i]]) sta[c[i]]=i;
        hsh[c[i]]++,nxt[i]=pos[c[i]],pos[c[i]]=i;
    }
    while (m--){
        int opt=read();
        if (opt==2) printf("%d\n",ans);else{
            int x=read(),y=read();
            if (x==y) continue;
            if (hsh[color[x]]&gt;hsh[color[y]]) swap(color[x],color[y]);
            if (!hsh[color[x]]) continue;
            merge(color[x],color[y]);
        }
    }
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;

const int N = 1e6;

using namespace std;

int nxt[N], pos[N], raw[N], a[N], last[N], color[N], cnt[N];
int n, m, ans;
//int marge(int, int);

//看std看不懂, 总结出一个小技巧
//嵌套的数组一个个模拟太难, 可以用一下OOP的思想方便理解
//就比如桶排的时候把cnt[a[i]]理解为a[i].cnt就舒服很多
//阅读这个代码时需要经常这样思考. 例如color[raw[i]]可以理解为raw[i].color, 把包在中括号里边的东西看成object就好

inline int read() {
  int x = 0, w = 1;	//x是数字, w是符号位
  char ch = 0;
  while (ch &lt; '0' || ch &gt; '9') {  //!isdigit(ch)
    if (ch == '-') w = -1;        
    ch = getchar();               
  }
  while (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {  //isdigit(ch)
    x = x * 10 + (ch - '0'); 
    ch = getchar();
  }
  return x * w;
}

//Example:
//int n = read();

inline int marge(int x, int y) {
    //把所有x变成y, 小优化见main函数调用的marge地方
    //下面这几行, 链表的遍历, 比较难懂.
    //注意到答案应该是只减不增的, 因为修改的本质是"合并", "段数"越合并越少. 这也是这题最难想的地方, 不是一个个修改再统计段数, 是用链表存储后再模拟"合并"更新答案.
    //这个加法用得很好, 因为跟前面的一样意味着少了一段 跟后面的不一样意味着有少了一段
    for(int i = pos[x]; i; i = nxt[i]) ans -= (raw[i - 1] == y) + (raw[i + 1] == y);    //更新答案
    //模拟"合并"的操作
    for(int i = pos[x]; i; i = nxt[i]) raw[i] = y;    //修改x ---&gt; y
    nxt[last[x]] = pos[y];  //更新尾节点, 即每段最后一个
    pos[y] = pos[x];    //更新位置
    cnt[y] += cnt[x];   //加上个数
    pos[x] = last[x] = cnt[x] = 0;    //合并完之后x没了
}

int main() {
    //ios_base::sync_with_stdio(false); cin.tie(0);

    //cin &gt;&gt; n &gt;&gt; m;
    n = read(); m = read();
    for(int i = 1; i &lt;= n; i ++) {
        //cin &gt;&gt; raw[i];
        raw[i] = read();
        color[raw[i]] = raw[i]; //color[x]统计第x个颜色
        ans += (raw[i] != raw[i - 1]);  //预处理一下"段数", 这个方法很巧妙, 读入的时候只要跟前面的不一样就表示又有一段
        cnt[raw[i]] ++; //cnt就是桶, 即计数数组
        if(!pos[i]) last[i] = raw[i];     //每种布丁最后一个的位置
        nxt[i] = pos[raw[i]]; pos[raw[i]] = i;
    }

    while(m --) {
        int op1, op2, op3;
        //cin &gt;&gt; op1;
        op1 = read();
        if(op1 == 1) {
            //cin &gt;&gt; op2 &gt;&gt; op3;
            op2 = read(); op3 = read();
            if(cnt[color[op1]] &gt; cnt[color[op2]]) swap(color[op1], color[op2]);     //小优化, 把x变成y和把y变成x, 之后的答案是不受影响的, 所以改操作次数少的.
            if(op2 == op3 || !cnt[color[op2]]) continue;    //std考虑得很周全, 舍去修改没有的元素和"修改个寂寞", 防止被卡.
            marge(op2, op3);
        } else {
            cout &lt;&lt; ans &lt;&lt; endl;
        }
    }
    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>国庆模拟赛后总结</title>
    <url>/2021/10/17/%E5%9B%BD%E5%BA%86%E6%A8%A1%E6%8B%9F%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="赛后总结">赛后总结</h1>
<p><strong>注: 没写完, 因为有的题还没过.</strong></p>
<h2 id="前言">前言</h2>
<p>这个文档不一定在写精妙的算法, 有的部分甚至不是在分析满分解法, 更多的是怎么得<strong>该得的</strong>分以及怎么减少不必要的失分.</p>
<p>即: 目标是在j组复赛中分数最大化.</p>
<h2 id="section">2021/10/01</h2>
<h3 id="t1">T1</h3>
<p>在调错上浪费太多时间了, 最后才发现算法没有问题, 是<strong>switch语句</strong>的问题!!!</p>
<p>教训: 在写代码之前推思路的时候一定要明确它的<strong>正确性</strong>! 发现运行的结果不一样时<strong>不要轻易改代码, 更不要轻易改算法!</strong></p>
<p>调试小技巧: 输出一些东西 or 注释掉大段代码, 这些方法主要是快速定位出错的地方的, 实在不行可以下断点调试(用gdb可以的, 注意加debug symbol). 在怀疑算法出问题的时候在纸上推, <strong>不要动代码</strong>!!!</p>
<p>这题的正解是模运算, 可以快速定位到循环运行多次后的指令, 不必一次次模拟了.</p>
<p>(考场上写的是直接模拟, 拿指针一个一个走的那种, 拿了60分已经很不错了)</p>
<p>正解:</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, -1, 0, 1};
const char cmd[4] = {'E', 'S', 'W', 'N'};

string ops;
int t, currx, curry, cnt[4];

inline void go(int op) {
    currx += dx[op]; curry += dy[op];
}

int main() {
    cin &gt;&gt; ops &gt;&gt; t;
    //先运行一遍命令串
    int oplen = ops.length();
    for(int i = 0; i &lt; oplen; i ++) {
        char ch = ops[i];
        //不知道为什么switch会出问题, 比赛就是在这里卡了半小时
        if(ch == 'E') go(0);
        if(ch == 'S') go(1);
        if(ch == 'W') go(2);
        if(ch == 'N') go(3);
    }

    int cishu = t / oplen;  //每个操作执行cishu遍, 但还可能有多余
    int pos = t % oplen;    //最后一个操作的位置

    //判断条件
    if(cishu == 0) goto OUTPUT; //指令数 &gt;= t --&gt; 已经走完了, 直接输出就行

    //第二种情况, 即len &lt; t, 要循环多次
    currx *= cishu; curry *= cishu;  //走一次走到了当前的(x, y), 走cishu次就意味着每个点都走了cishu次, 对结果的影响求积即可
    //好现在还剩几步, 走完它
    for(int i = 0; i &lt; pos; i ++) {
        char ch = ops[i];
        if(ch == 'E') go(0);
        if(ch == 'S') go(1);
        if(ch == 'W') go(2);
        if(ch == 'N') go(3);
    }

OUTPUT: cout &lt;&lt; currx &lt;&lt; ' ' &lt;&lt; curry &lt;&lt; endl;
    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h3 id="t2">T2</h3>
<p>在推模拟分解质因数时浪费太多时间了, 这种考"板子"的数学题要在平时多做. 考场上要减少<strong>推板子</strong>的时间.</p>
<p>另外还好这题没打表, "只要是数学题就打表"终究是一种"骗分"的心态. 还是要多推式子.</p>
<p>附: 计算一个数素因数个数的代码</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int fac(int x) {
    int res = 0;
    for(int i = 2; i &lt;= x; i ++) {
        if(x % i == 0) {
            res ++;
            x /= i;
            i --;	//这行是尝试再拿这个数除一遍, 因为一个数可能有多个相同的质因子.
        }
    }
    return res;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>还有就是第十个点<strong>具体的</strong>数据给我们了, 是一个很大的数据, 这个O(N*sqrt(N))的算法显然要算很久(在我电脑上算了<strong>一个半小时</strong>), 所以只能用特判. 考试的时候可以优先用暴力或正解算着这种数据, 得到特判就行.</p>
<p>注: 这道是我两天模拟赛中唯一觉得做得还不错, 没啥太大遗憾的题.</p>
<p>注2: 我的电脑算了<strong>一个半小时</strong>, 终于算出最后一个点的特判是<code>564714</code>!!! 但是为什么第八个点还没过??? 最后是90分.</p>
<h3 id="t3">T3</h3>
<p>模拟题, 字太多考试的时候懒得看了. 之后这种题要多想想! 至少把样例算算, 知道模拟的过程.</p>
<p><del>现在赛后订正的时候也懒得看</del></p>
<h3 id="t4">T4</h3>
<p>四联通问题, 把上下左右当成相邻的节点用bfs访问</p>
<h2 id="section-1">2021/10/03</h2>
<h3 id="t1-1">T1</h3>
<p>一定要注意看清<strong>数据范围</strong>! 就比如这道题说了 <span class="math display">\[
N &lt; 1,000,000
\]</span> 就一定要开1e6, <strong>宁肯开大一点也不要开小</strong>!!! 一位数组不会因为开得跟题中一样大而MLE!!!</p>
<p>教训: <strong>1e5的代码52分, 1e6就ac了.</strong></p>
<p>真的是很可惜的, 明明满分算法想出来了, 思路就是正确的, 甚至代码写得都没问题. 就是因为数组没开大, 失分惨重.</p>
<p>思路再说一下吧, 前缀和. 这种<strong>区间询问或操作一位数组问题的算法</strong>在我目前的知识范围内大多只会是<strong>前缀和, 差分, 树状数组, 线段树</strong>了, 更高级的感觉j组考不到, 现在也不是学这种东西的时候.</p>
<blockquote>
<p>虽然1000万个数似乎很多, 但是, 如果这些数是8字节的整数, 那么将占用大致<strong>80MB</strong>.</p>
<p><em>Introduction to Algorithms(3rd edition)</em></p>
</blockquote>
<h3 id="t2-1">T2</h3>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int N = 1e6;
int array[N];	//大约占用4MB空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div>
<p>这道题因为开了1e8的数组, 用了memset导致<strong>全部的点MLE</strong>.</p>
<p><strong>数组不要开太大!!! (1e8个int约等于380MB)</strong></p>
<p>本来可以得60分暴力分, 结果这题因为这个爆零了.</p>
<p>本题的正解是<strong>离线询问</strong>, 并记录操作, 类似于<strong>化简</strong>到最后一个操作, 就不必模拟了.</p>
<p>赛后还以为是用了几个玄学优化导致的问题.</p>
<p>说到玄学优化, 在这里记录几个好用的玄学优化:(好像扯得有点远了)</p>
<h4 id="cin优化">cin优化</h4>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ios_base::sync_with_stdio(false);
cin.tie(0);	//cin.tie(nullptr)在C++11及以上可用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div>
<p>(这两行的意思是关闭与stdio的同步, 以提升cin, cout的速度. 在IO比较多的时候很好用. <strong>注意:用了这个优化就不能用stdio内的函数如<code>printf()</code>和<code>scanf()</code></strong>. 当然printf和scanf的速度是更快的, 如果会写快读快写那更快, <code>putchar()</code>和<code>getchar()</code>的速度不是吹的. )</p>
<h4 id="寄存器操作">寄存器操作</h4>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(register int i = 0; i &lt; n; i ++)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>
<p>直接操作寄存器, 这样更快.</p>
<p>p.s. csp用不了内联汇编, 所以不要作死, 这个用用就行了</p>
<h4 id="行内函数inline">行内函数(inline)</h4>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline int add(int x, int y) {
    return x + y;
}

int main() {
    add(1, 1);	//直接就地展开函数, 没有调用关系
    /*
    相当于
    inline int add(int x, int y) {
    	return x + y;
	}
    */
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>适用于代码少, 调用频繁的函数.</p>
<p>函数调用时会将参数, 基址这些东西压栈. 最后call. 运行结束后会压入返回地址等信息(这些东西快忘了, 不对请指正). 这样调用一次无疑浪费了很多时间精力.(有空的话贴一下反汇编代码看得更清楚)</p>
<p>用<code>inline</code>定义会在调用处就地展开, 个人觉得比较像<code>#define</code>(?)</p>
<p>但是这么用会让代码编译后变得更大, 实际开发中要慎用. (算法比赛中没关系)</p>
<h3 id="t3-1">T3</h3>
<p>这里发现了两轮游戏中的单调性质, 但是竟然在纠结<strong>用哪个数据结构实现</strong>!!!</p>
<p>最后时间<strong>全浪费了</strong>, 暴力都没写完.</p>
<p>以后算法较为简单的题, 一定要先写暴力或者基本思路, <strong>不要先默板子或纠结该默哪个板子!!!</strong></p>
<h3 id="t4-1">T4</h3>
<p>这一题要采用类似图论存图的方法存能开哪里的灯, 然后<strong>bfs</strong>.</p>
<p>题干的意思其实是要找到房间之间的 <strong>"连接"</strong> 关系. 想到这里就能知道要用类似邻接表的方式存图了.</p>
<p>考场上我主要的问题在于只想着打暴力就用dfs, 就能拿分. 但是这个dfs在本机都肉眼可见地慢, 就放弃治疗, 也不想剪枝了.</p>
<p>想到bfs而不是用其它方法个人理解是因为本题要先开相邻的灯, 如果dfs需要走完一个方向才能走另一个方向, 不剪枝极其浪费.</p>
<h2 id="section-2">2021/10/05</h2>
<h3 id="t1-2">T1</h3>
<p>模拟赛中第一次ac.</p>
<p>老师给的题解: 数组模拟 (可以理解为手写双端队列)</p>
<p>自己的解法: <strong>stl大法好</strong>(使用<code>std::deque</code>, 即双端队列, 可以理解为可操作两端的<code>std::queue</code>)</p>
<p>可能会出现的问题: 一些stl内的函数可能性能不如手写的, 例如<code>std::string</code>里面的<code>S.find(P)</code>就是暴力匹配的, 性能不如手写KMP.</p>
<p>这是个重大的时刻, 贴个代码纪念一下, 顺便复习一下deque的用法.</p>
<p>(另外做这题的时候好像<strong>cin忘加了</strong>, 导致浪费了亿点时间调错)</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;

deque&lt;int&gt; q;   //需要从前后操作, 双端队列
int n, id;

inline void clearq() {
	while(q.size()) {
		q.pop_front();
	}
}

inline void add(char op, int x) {
    //op == 'L'   左边入队
    //op == 'R'   右边入队
    //cout &lt;&lt; "add()" &lt;&lt; op &lt;&lt; ' ' &lt;&lt; x;
    if(op == 'L') {
        q.push_front(x);
    }
    if(op == 'R') {
        q.push_back(x);
    }

}

inline void kill_people(char op, int x) {
    if(op == 'L') {
        for(int i = 0; i &lt; x; i ++) q.pop_front();
    }
    if(op == 'R') {
        for(int i = 0; i &lt; x; i ++) q.pop_back();
    }
}

inline int popq() {
    int res;
    res = q.front();
    q.pop_front();
    return res;
}

int main() {
	//clearq();
	ios_base::sync_with_stdio(false); cin.tie(0);
    cin &gt;&gt; n;
    for(int i = 1; i &lt;= n; i ++) {
    	//puts("LOOP");
        char op, op1;
        int k;
        cin &gt;&gt; op &gt;&gt; op1;
        //cout &lt;&lt; op &lt;&lt; ' ' &lt;&lt; op1;
        if(op == 'A') {
            add(op1, ++ id); 	//只有入队才会有新的编号, 单独记录
            //puts("added!!!")
        } else {
            cin &gt;&gt; k;
            kill_people(op1, k);
        }
    }

    while(q.size()) {
    	cout &lt;&lt; q.front() &lt;&lt; endl;	//从队首开始pop
    	q.pop_front();
    }

    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h3 id="t2-2">T2</h3>
<h3 id="t3-2">T3</h3>
<p>暴力解法是每个数跟它的左边和上面比较, 统计出符合条件的, 计算最大的面积.</p>
<p>正解是dp.</p>
<p>预处理<code>column[i][j</code>]和<code>can[i][j][k]</code>(用<code>can[i][j][k]</code>表示从第 i 行到第 j 行中的第 k 列能否接道第 i 行到第 j 行的 k-1 列中): <span class="math display">\[
column[i][j]={column[i-1][j]+1(a[i][j]&gt;=a[i-
1][j]),column[i][j]=1}
\]</span> 其中 <span class="math display">\[
can[i][j][k]=(can[i][j-1][k])\and(column[j][k]&gt;=j-i+1)\and(a[j][k]&gt;=a[j][k-
1])\and(coulumn[j][k-1]&gt;=j-i+1
\]</span></p>
<p>贴一个70分解法(用的不是dp, 也不是我写的)</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
//DP?!不过我不想用正常的方法 那就写点玄学的吧。
int n,m,ma[205][205],row[205][205],col[205][205];
int main(){
	cin&gt;&gt;n&gt;&gt;m;
	for(int i=1;i&lt;=n;++i)
		for(int j=1;j&lt;=m;++j)cin&gt;&gt;ma[i][j];
	for(int i=1;i&lt;=n;++i)
		for(int j=1;j&lt;=m;++j){
			row[i][j]=1;
			for(int k=j+1;k&lt;=m;++k){
				if(ma[i][k-1]&lt;=ma[i][k])row[i][j]++;
				else break;
			}
		}
	for(int i=1;i&lt;=m;++i)
		for(int j=1;j&lt;=n;++j){
			col[j][i]=1;
			for(int k=j+1;k&lt;=n;++k){
				if(ma[k-1][i]&lt;=ma[k][i])col[j][i]++;
				else break;
			}
		}
	//完了完了 玄学方法开始了 
	int temp=0,ans=0;
	for(int i=1;i&lt;=n;++i)
		for(int j=1;j&lt;=m;++j)
			for(int k=1;k&lt;=row[i][j];++k){//k就是一种长度 
				int len=*min_element(col[i]+j,col[i]+j+k);
				temp=k*len;
				ans=max(temp,ans);
			}
	cout&lt;&lt;ans&lt;&lt;endl;
	return 0;
} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<h3 id="t4-2">T4</h3>
<p>这题不知道为什么写的算法没问题, 比赛的时候交了是零分(赛后交了一遍完全一样的代码ac了). 就当这次ac了吧, 但是一定要明白为什么会出这种问题, 比赛的时候要是还出就叫天天不灵, 叫地地不应了.</p>
<p>这题想了蛮久的, 主要是证明算法的正确性.</p>
<p>要注意的就是如果这种贪心题最后推出了一个比较简单的式子不要怀疑, 只要每一步都确定是对的式子就没错, 不要在这里过于纠结, 浪费时间.</p>
<p>思路再说一下: 要让ci * t最大, 就要让ci越大的获得更大时间差(这不是废话吗), 即把ci进行从大到小排序, 依次把最大的两个一样的放到最前面和最后面. 难点是模拟这个放在最前和最后的过程.</p>
<p>贴一下考场上的代码, 前面是排序.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//安排位置
    int n1 = 1, n2 = n;
    //[1, n]
    //n1:   开始时间偏移量
    //n2:   结束时间偏移量

    for(int i = 1; i &lt;= k, n1 &lt;= n2; i ++, n1 ++, n2 --) {    //两两一对地插入
        //if(c[i] == c[i + 1])
            //cout &lt;&lt; (c[i] == c[i + 1]) &lt;&lt; ' ' &lt;&lt; c[i] &lt;&lt; ' ' &lt;&lt; n1 &lt;&lt; ' ' &lt;&lt; c[i - 1] &lt;&lt; ' ' &lt;&lt; n2 &lt;&lt; endl;
            //把大(c[i])的放在最后 小的(c[i + 1])放在最前 时间差最大
            //第一次不得分 求时间差乘以最大的(即c[i])即可
            //ans += ((n2 - n1) * c[i]  + 0);
            ans += (n2 - n1) * c[i];
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>赛后总结</tag>
        <tag>题解</tag>
        <tag>模拟赛</tag>
      </tags>
  </entry>
</search>
