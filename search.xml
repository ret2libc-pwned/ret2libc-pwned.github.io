<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>dp心得</title>
    <url>/2022/05/03/dp%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Splay</title>
    <url>/2022/03/12/Splay/</url>
    <content><![CDATA[<h1 id="splay">Splay</h1>
<h2 id="定义">定义</h2>
<p>Splay是一种平衡树, 将访问过的结点不断旋转到根结点, 在满足BST性质的同时保证其"平衡", <strong>基于时间、空间局部性原理优化查找性能(这样操作使得高频访问的结点在经常根结点附近)</strong>.</p>
<p><strong>本文的BST每一个结点只维护单个值(而非键值对), 下面说法中v、val、key都指这个值, BST性质的维护它们的大小关系做依据.</strong></p>
<h3 id="bst性质">BST性质</h3>
<p>左子树任意结点的key<span class="math inline">\(\lt\)</span>根结点key<span class="math inline">\(\lt\)</span>右子树任意结点key, 即<strong>中序遍历单调递增</strong>.</p>
<p>常见的BST有Treap、Splay、AVL等.</p>
<h2 id="结点结构">结点结构</h2>
<p>开结构体数组记录两个子结点及父结点的数组下标, 类似于一个<strong>链表</strong>(实际上很多树状数据结构都是数组模拟链表). 结点同时存储维护的信息.</p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>    <span class="hljs-comment">//两个子结点及父结点数组下标, val</span><br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">2</span>], p, v;<br>    <span class="hljs-comment">//延迟标记及子树大小</span><br>    <span class="hljs-keyword">int</span> dat, size;<br>    <span class="hljs-comment">//初始化当前结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>        v = _v, p = _p;<br>        size = <span class="hljs-number">1</span>;<br>    }<br>};<br><br><span class="hljs-comment">//Allocate</span><br>Node tr[SIZE];<br>```  <br><br>其中规定`s[<span class="hljs-number">0</span>]`为左子结点, `s[<span class="hljs-number">1</span>]`为右子结点, 即: (后续代码均未使用如下define, 只是为了方便理解)<br><br>``` cpp<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son s[k]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son_bro s[k ^ 1]		<span class="hljs-comment">//son's brother</span></span><br></code></pre></div></td></tr></tbody></table></figure>
<h2 id="单旋操作rotate">单旋操作(rotate)</h2>
<p>旋转需要保证BST性质; 根结点变量, 即<code>root</code>需要更新; 结点维护的信息(如延迟标记)需要更新.</p>
<p>旋转改变了是树的形态, 本质是<strong>改变父子关系</strong>.</p>
<figure>
<img src="https://s2.loli.net/2022/02/27/51Z6t4FNpChvJbi.jpg" alt="Splay单旋"><figcaption aria-hidden="true">Splay单旋</figcaption>
</figure>
<h4 id="右旋-即operatornamezigx操作">右旋, 即<span class="math inline">\(\operatorname{Zig}(x)\)</span>操作</h4>
<p>顾名思义就是将<span class="math inline">\(x\)</span>的左子树绕着<span class="math inline">\(x\)</span>的父结点<span class="math inline">\(y\)</span>向右旋转.</p>
<p>需要注意的是<span class="math inline">\(x \lt x_r \lt y\)</span>, 故<span class="math inline">\(x_r\)</span>应该转到<span class="math inline">\(y_r\)</span>左子树的位置.</p>
<p>这样的操作通过改变<span class="math inline">\(y\)</span>与<span class="math inline">\(x_r\)</span>、<span class="math inline">\(\operatorname{fa}(y)\)</span>与<span class="math inline">\(x\)</span>、<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span>的父子关系达到.</p>
<h4 id="左旋-即operatornamezagx操作">左旋, 即<span class="math inline">\(\operatorname{Zag}(x)\)</span>操作</h4>
<p>同理, <span class="math inline">\(x\)</span>的右子树绕着<span class="math inline">\(y\)</span>向左旋转, <span class="math inline">\(x_l\)</span>接在<span class="math inline">\(y\)</span>右子树位置.</p>
<p>即需要改变<span class="math inline">\(y\)</span>与<span class="math inline">\(x_l\)</span>、<span class="math inline">\(\operatorname{fa}(y)\)</span>与<span class="math inline">\(x\)</span>、<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span>的父子关系.</p>
<h4 id="旋转结点-即operatornamerotatex操作">旋转结点, 即<span class="math inline">\(\operatorname{rotate}(x)\)</span>操作</h4>
<p>上述操作可以使用一个操作<span class="math inline">\(\operatorname{rotate}(x)\)</span>来完成, 即实现<strong>"自动判定左右"的单旋操作</strong>. <span class="math inline">\(x\)</span>是<span class="math inline">\(y\)</span>的左子树就右旋, 右子树反之.</p>
<p>该操作的精髓就是判定<span class="math inline">\(x\)</span>是<span class="math inline">\(y\)</span>的左结点还是右结点.</p>
<p>前面说过, "旋转"的本质是"改变父子关系". 每个结点维护了她的左右子树和父结点, 所以该过程需要"互认"父子关系, 即需要修改两个结点的信息; 同时因为树的形态被改变, 需要重新统计延迟标记维持的信息(如子树大小).</p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>    <span class="hljs-keyword">int</span> k = (tr[y].s[<span class="hljs-number">1</span>] == x);<br>    tr[z].s[tr[z].s[<span class="hljs-number">1</span>] == y] = x, tr[x].p = z;<br>    tr[y].s[k] = tr[x].s[k ^ <span class="hljs-number">1</span>], tr[tr[x].s[k ^ <span class="hljs-number">1</span>]].p = y;<br>    tr[x].s[k ^ <span class="hljs-number">1</span>] = y, tr[y].p = x;			<span class="hljs-comment">//tr[x].s[k]的含义是取处于yx直线上的x的儿子, k ^ 1是取她的兄弟</span><br>    <span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in">Pushup</span>(x);<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<p>说人话就是:</p>
<p><span class="math inline">\(k\)</span>的获取:</p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">k</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *@description 返回x是y的哪个儿子, 左0右1.</span><br><span class="hljs-comment">     */</span><br>	<span class="hljs-keyword">return</span> (tr[y].s[<span class="hljs-number">1</span>] == x);<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<p>rotate伪代码:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pseudocode">/* y是x的爸爸, z是x的爷爷; */<br>/* 以下每一步都需要修改两个结点的值, 即互认关系 */<br>用z取到y, 将x转到y的位置上, 并与z互认; /* 以下两部均需操作结点与其父结点"互认"过程, 不再赘述 */<br>x(此时在y的位置上)的兄弟转到原先x(即tr[y].s[k])的位置上;<br>让y转到原先x的兄弟的位置;<br>分别更新y, x子树维护的信息;<br></code></pre></div></td></tr></tbody></table></figure>
<h2 id="双旋操作splay">双旋操作(splay)</h2>
<p>通过一或两次rotate, 可以调整BST的形态, 使其更平衡.</p>
<p>通过过程<span class="math inline">\(\operatorname{splay}(x, goal)\)</span>将结点<span class="math inline">\(x\)</span>转到<span class="math inline">\(goal\)</span>的子结点.</p>
<p>规定<span class="math inline">\(y\)</span>是<span class="math inline">\(x\)</span>父结点, <span class="math inline">\(z\)</span>是<span class="math inline">\(y\)</span>父结点, splay分六种(3 * 2)情况讨论.</p>
<ol type="1">
<li>当<span class="math inline">\(\operatorname{fa}(x) = \operatorname{Root}\)</span>时, 旋转一次<span class="math inline">\(x\)</span>(右或左), 即Zig或Zag;</li>
<li>当<span class="math inline">\(\operatorname{fa}(x) \ne \operatorname{Root}\)</span>且<span class="math inline">\(z, y, x\)</span>在一条直线上, 旋转一次<span class="math inline">\(y\)</span>, 再同方向旋转一次<span class="math inline">\(x\)</span>, 即Zig-Zig或Zag-Zag;</li>
<li>当<span class="math inline">\(\operatorname{fa}(x) \ne \operatorname{Root}\)</span>且<span class="math inline">\(z, y, x\)</span>形状是在一条直线的中间折了一下, 分别对<span class="math inline">\(x\)</span>执行两次不同方向的旋转, 即Zig-Zag或Zag-Zig.</li>
</ol>
<p>画图理解即可.</p>
<p>使用rotate就是:</p>
<ul>
<li>折线2x</li>
<li>直线yx</li>
</ul>
<p><strong>需要注意的是该操作是将<span class="math inline">\(x\)</span>转到<span class="math inline">\(goal\)</span>下面, 故当<span class="math inline">\(x\)</span>与<span class="math inline">\(goal\)</span>为具有父子关系的两个结点时 (即第1、2种情况)不需要操作(即不需要交换它们).</strong></p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>    <span class="hljs-comment">//把x转到goal下面</span><br>    <span class="hljs-keyword">while</span>(tr[x].p != goal) {<br>        <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>        <span class="hljs-keyword">if</span>(z != goal) {<br>            <span class="hljs-keyword">if</span>((tr[z].s[<span class="hljs-number">1</span>] == y) ^ (tr[y].s[<span class="hljs-number">1</span>] == x)) <span class="hljs-built_in">Rotate</span>(x);    <span class="hljs-comment">//折线先转x再转x</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">Rotate</span>(y);                                         <span class="hljs-comment">//直线先转y</span><br>        }<br>        <span class="hljs-built_in">Rotate</span>(x);                                                  <span class="hljs-comment">//统一转x</span><br>    }<br>    <span class="hljs-keyword">if</span>(goal == <span class="hljs-number">0</span>) Root = x;                                         <span class="hljs-comment">//更新根结点(0为根结点下标)</span><br>}<br></code></pre></div></td></tr></tbody></table></figure>
<hr>
<h2 id="插入操作insert">插入操作(insert)</h2>
<p>过程<span class="math inline">\(\operatorname{insert}(val)\)</span>将<span class="math inline">\(val\)</span>插入BST的相应位置<span class="math inline">\(x\)</span>, 将插入的数转到根结点, 即执行<span class="math inline">\(\operatorname{splay}(x, 0)\)</span>.</p>
<p>插入时需要维护BST性质, 将插入的这个数与当前节点比较, <strong>"小插左, 大插右"</strong>.</p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * @param v 要插入值的val.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;		<span class="hljs-comment">//从根结点开始, u为当前节点数组下标, p为她的爸爸下标</span><br>    <span class="hljs-keyword">while</span>(u) {<br>        p = u, u = tr[u].s[v &gt; tr[u].v];	<span class="hljs-comment">//小左大右地插下去, 方括号里的是判定左右</span><br>    }<br>    u = ++idx;			<span class="hljs-comment">//结点又多了一个, idx += 1;</span><br>    <span class="hljs-keyword">if</span>(p) tr[p].s[v &gt; tr[p].v] = u;		<span class="hljs-comment">//将p的儿子u插入适当位置</span><br>    tr[u].<span class="hljs-built_in">init</span>(v, p);	<span class="hljs-comment">//给这个点初始化爸爸下标和自身value, 并将大小设为1</span><br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);		<span class="hljs-comment">//转到根结点</span><br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h2 id="查询指定数的排名getrank">查询指定数的排名(getRank)</h2>
<p>不会<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p>
<h2 id="查询第k小的数getvalbyrank">查询第<span class="math inline">\(k\)</span>小的数(getValByRank)</h2>
<p><span class="math inline">\(\operatorname{getValByRank}(rank)\)</span>操作分三种情况讨论: <span class="math display">\[
结点位于:\,
\begin{cases}
1. 所求结点位于左子树, 左子树结点个数\ge rank;\\
2. 所求结点为中序遍历第k个数(即左子树的父结点), 左子树结点个数 = rank - 1;\\
3. 所求结点位于右子树(rank需要减去左子树大小加一的和), 左子树结点个数 \lt rank - 1
\end{cases}
\]</span></p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>        <span class="hljs-built_in">Pushdown</span>(u);<br>        <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]] &gt;= rk) u = tr[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span> == rk) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">else</span> rk -= (tr[tr[u].s[<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>), u = tr[u].s[<span class="hljs-number">1</span>];<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h2 id="删除操作delete">删除操作(delete)</h2>
<p>操作<span class="math inline">\(\operatorname{delete}(x)\)</span>从Splay中删除value为<span class="math inline">\(x\)</span>的结点.</p>
<p>该操作首先将<span class="math inline">\(x\)</span>转到根结点, 再合并<span class="math inline">\(x\)</span>的左右子树.</p>
<h2 id="查询前驱后继getprefixgetsuffix">查询前驱/后继(getPrefix/getSuffix)</h2>
<p><span class="math inline">\(x\)</span>的前驱: 小于<span class="math inline">\(x\)</span>的最大数;</p>
<p><span class="math inline">\(x\)</span>的后继: 大于<span class="math inline">\(x\)</span>的最小数.</p>
<p><span class="math inline">\(\operatorname{getPrefix}(x)\)</span>操作查询<span class="math inline">\(x\)</span>的前驱, 可以通过插入<span class="math inline">\(x\)</span>(插入后位于根结点), 此时<span class="math inline">\(x\)</span>左子树中最右边的结点即为所求, 最后删除结点<span class="math inline">\(x\)</span>;</p>
<p><span class="math inline">\(\operatorname{getSuffix}(x)\)</span>操作反之.</p>
<hr>
<h2 id="例题">例题</h2>
<h3 id="文艺平衡树luogu-p3391">文艺平衡树(<a href="https://www.luogu.com.cn/problem/P3391">Luogu P3391</a>)</h3>
<blockquote>
<p>翻转一个区间，例如原有序序列是<span class="math inline">\(\{5, 4, 3, 2, 1\}\)</span>，翻转区间是<span class="math inline">\([2, 4]\)</span>的话，结果是<span class="math inline">\(\{5, 2, 3, 4, 1\}\)</span>.</p>
</blockquote>
<p>在结点上维护延迟标记<span class="math inline">\(flag\)</span>来判定翻转状态, 避免多次翻转造成性能上的浪费.</p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">2</span>], p, v, siz;<br>    <span class="hljs-keyword">int</span> flag;                  <span class="hljs-comment">//flag == 1则需要翻转</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>        v = _v, p = _p;<br>        siz = <span class="hljs-number">1</span>;<br>    }<br>};<br><br>Node tr[N];<br><span class="hljs-keyword">int</span> idx, Root;<br><span class="hljs-keyword">int</span> cas, n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    tr[x].siz = tr[tr[x].s[<span class="hljs-number">0</span>]].siz + tr[tr[x].s[<span class="hljs-number">1</span>]].siz + <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">if</span>(tr[x].flag) {<br>        <span class="hljs-built_in">swap</span>(tr[x].s[<span class="hljs-number">0</span>], tr[x].s[<span class="hljs-number">1</span>]);<br>        tr[tr[x].s[<span class="hljs-number">0</span>]].flag ^= <span class="hljs-number">1</span>;<br>        tr[tr[x].s[<span class="hljs-number">1</span>]].flag ^= <span class="hljs-number">1</span>;<br>        tr[x].flag = <span class="hljs-number">0</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>    <span class="hljs-keyword">int</span> k = (tr[y].s[<span class="hljs-number">1</span>] == x);<br>    tr[z].s[tr[z].s[<span class="hljs-number">1</span>] == y] = x, tr[x].p = z;<br>    tr[y].s[k] = tr[x].s[k ^ <span class="hljs-number">1</span>], tr[tr[x].s[k ^ <span class="hljs-number">1</span>]].p = y;<br>    tr[x].s[k ^ <span class="hljs-number">1</span>] = y, tr[y].p = x;<br>    <span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in">Pushup</span>(x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>    <span class="hljs-keyword">while</span>(tr[x].p != goal) {<br>        <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>        <span class="hljs-keyword">if</span>(z != goal) {<br>            <span class="hljs-keyword">if</span>((tr[z].s[<span class="hljs-number">1</span>] == y) ^ (tr[y].s[<span class="hljs-number">1</span>] == x)) <span class="hljs-built_in">Rotate</span>(x);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">Rotate</span>(y);<br>        }<br>        <span class="hljs-built_in">Rotate</span>(x);<br>    }<br>    <span class="hljs-keyword">if</span>(goal == <span class="hljs-number">0</span>) Root = x;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(u) {<br>        p = u, u = tr[u].s[v &gt; tr[u].v];<br>    }<br>    u = ++idx;<br>    <span class="hljs-keyword">if</span>(p) {<br>        tr[p].s[v &gt; tr[p].v] = u;<br>    }<br>    tr[u].<span class="hljs-built_in">init</span>(v, p);<br>    <span class="hljs-built_in">Splay</span>(u, <span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>        <span class="hljs-built_in">Pushdown</span>(u);<br>        <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]].siz &gt;= rk) u = tr[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]].siz == rk - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">else</span> rk -= (tr[tr[u].s[<span class="hljs-number">0</span>]].siz + <span class="hljs-number">1</span>), u = tr[u].s[<span class="hljs-number">1</span>];<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>{<br>    <span class="hljs-comment">//这一步是翻转</span><br>    <span class="hljs-built_in">Pushdown</span>(u);<br>    <span class="hljs-comment">//从u开始中序遍历</span><br>    <span class="hljs-comment">//左</span><br>    <span class="hljs-keyword">if</span>(tr[u].s[<span class="hljs-number">0</span>]) <span class="hljs-built_in">Output</span>(tr[u].s[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">//判定哨兵, 输出当前结点</span><br>    <span class="hljs-keyword">if</span>(tr[u].v &gt;= <span class="hljs-number">1</span> &amp;&amp; tr[u].v &lt;= n) cout &lt;&lt; tr[u].v &lt;&lt; <span class="hljs-string">' '</span>;<br>    <span class="hljs-comment">//右</span><br>    <span class="hljs-keyword">if</span>(tr[u].s[<span class="hljs-number">1</span>]) <span class="hljs-built_in">Output</span>(tr[u].s[<span class="hljs-number">1</span>]);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n &gt;&gt; cas;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i) {<br>        <span class="hljs-comment">//插入哨兵防止越界</span><br>        <span class="hljs-built_in">Insert</span>(i);<br>    }<br>    <span class="hljs-keyword">while</span>(cas--) {<br>        <span class="hljs-keyword">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        l = <span class="hljs-built_in">getValByRank</span>(l), r = <span class="hljs-built_in">getValByRank</span>(r + <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">Splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">Splay</span>(r, l);<br>        tr[tr[r].s[<span class="hljs-number">0</span>]].flag ^= <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-built_in">Output</span>(Root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//对零基础即为友好</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>	<span class="hljs-keyword">int</span> v, p, s[<span class="hljs-number">2</span>], siz;<br>	<span class="hljs-keyword">bool</span> flag;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>		v = _v, p = _p;<br>		siz = <span class="hljs-number">0</span>;<br>	}<br>};<br><br>Node tr[N];<br><span class="hljs-keyword">int</span> n, cas, Root, idx;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 一些宏定义, 用法简单明了, 跟一大堆杂乱无章的中括号说再见!!!</span><br><span class="hljs-comment"> * ex. 	node(x).init(v, p)		//初始化结点x的属性v, p</span><br><span class="hljs-comment"> * 		siz(left(x))			//获取结点x的左子节点size</span><br><span class="hljs-comment"> *		siz(node(x).ls)			//另一种写法</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> isRoot(x) (x == 0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BST_getPos(fa, val) tr[fa].s[(val) &gt; tr[(fa)].v]	<span class="hljs-comment">//在fa结点下面根据BST性质插入一个值为val的结点, 判定结点位置(即: 要插在哪里)</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> node(x) tr[(x)]										<span class="hljs-comment">//可以理解为x号结点的对象, 方便使用ls, rs</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> left(x) tr[(x)].s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> right(x) tr[(x)].s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> val(x) tr[(x)].v</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> siz(x) tr[(x)].siz</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> flag(x) tr[(x)].flag</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pa(x) tr[(x)].p</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son(fa, x) tr[(fa)].s[(x)]							<span class="hljs-comment">//获取结点fa的儿子, 参数x为左右, 左0右1</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LoR(fa, x) (tr[(fa)].s[1] == (x))					<span class="hljs-comment">//L or R, x是fa的哪个儿子</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-built_in">siz</span>(x) = <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(x)) + <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">right</span>(x)) + <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">flag</span>(x)) {<br>		<span class="hljs-built_in">swap</span>(<span class="hljs-built_in">left</span>(x), <span class="hljs-built_in">right</span>(x));<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">left</span>(x)) ^= <span class="hljs-number">1</span>;<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">right</span>(x)) ^= <span class="hljs-number">1</span>;<br>		<span class="hljs-built_in">flag</span>(x) = <span class="hljs-number">0</span>;<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">int</span> y = <span class="hljs-built_in">pa</span>(x), z = <span class="hljs-built_in">pa</span>(y);<br>	<span class="hljs-keyword">int</span> k = <span class="hljs-built_in">LoR</span>(y, x);<br>	<span class="hljs-built_in">son</span>(z, <span class="hljs-built_in">LoR</span>(z, y)) = x, <span class="hljs-built_in">pa</span>(x) = z;<br>	<span class="hljs-built_in">son</span>(y, k) = <span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>), <span class="hljs-built_in">pa</span>(<span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>)) = y;<br>	<span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>) = y, <span class="hljs-built_in">pa</span>(y) = x;<br>	<span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in">Pushup</span>(x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">pa</span>(x) != goal) {<br>		<span class="hljs-keyword">int</span> y = <span class="hljs-built_in">pa</span>(x), z = <span class="hljs-built_in">pa</span>(y);<br>			<span class="hljs-keyword">if</span>(z != goal) {<br>			<span class="hljs-keyword">if</span>(<span class="hljs-built_in">LoR</span>(z, y) ^ <span class="hljs-built_in">LoR</span>(y, x)) {<br>				<span class="hljs-built_in">Rotate</span>(x);<br>			} <span class="hljs-keyword">else</span> {<br>				<span class="hljs-built_in">Rotate</span>(y);<br>			}<br>		}<br>		<span class="hljs-built_in">Rotate</span>(x);<br>	}<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">isRoot</span>(goal)) Root = x;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>	<span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span>(u) {<br>		p = u, u = <span class="hljs-built_in">BST_getPos</span>(u, v);<br>	}<br>	u = ++idx;<br>	<span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isRoot</span>(p)) {<br>		<span class="hljs-built_in">BST_getPos</span>(p, v) = u;<br>	}<br>	<span class="hljs-built_in">node</span>(u).<span class="hljs-built_in">init</span>(v, p);<br>	<span class="hljs-built_in">Splay</span>(u, <span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>	<span class="hljs-keyword">int</span> u = Root;<br>	<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>		<span class="hljs-built_in">Pushdown</span>(u);<br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) &gt;= rk) u = <span class="hljs-built_in">left</span>(u);<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) == rk - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> u;<br>		<span class="hljs-keyword">else</span> rk -= <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) + <span class="hljs-number">1</span>, u = <span class="hljs-built_in">right</span>(u);<br>	}<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-built_in">Pushdown</span>(x);<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>(x)) <span class="hljs-built_in">Output</span>(<span class="hljs-built_in">left</span>(x));<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">val</span>(x) &gt;= <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">val</span>(x) &lt;= n) cout &lt;&lt; <span class="hljs-built_in">val</span>(x) &lt;&lt; <span class="hljs-string">' '</span>;<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">right</span>(x)) <span class="hljs-built_in">Output</span>(<span class="hljs-built_in">right</span>(x)); <br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; n &gt;&gt; cas;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i) {<br>		<span class="hljs-built_in">Insert</span>(i);<br>	}<br>	<span class="hljs-keyword">while</span>(cas--) {<br>		<span class="hljs-keyword">int</span> l, r;<br>		cin &gt;&gt; l &gt;&gt; r;<br>		l = <span class="hljs-built_in">getValByRank</span>(l), r = <span class="hljs-built_in">getValByRank</span>(r + <span class="hljs-number">2</span>);<br>		<span class="hljs-built_in">Splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">Splay</span>(r, l);<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">left</span>(r)) ^= <span class="hljs-number">1</span>;<br>	}<br>	<span class="hljs-built_in">Output</span>(Root);<br>	<span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="普通平衡树luogu-p3369">普通平衡树(<a href="https://www.luogu.com.cn/problem/P3369">Luogu P3369</a>)</h3>
<blockquote>
<p>实现增, 删, 查询排名与反查, 查询前驱与后继功能.</p>
</blockquote>
<h4 id="solution1-stdvector">Solution1: <code>std::vector</code></h4>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">int</span> cas;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; cas;<br>	<span class="hljs-keyword">while</span>(cas--) {<br>		<span class="hljs-keyword">int</span> op, x;<br>		cin &gt;&gt; op &gt;&gt; x;<br>		<span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(op) {<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:		<span class="hljs-comment">//insert(x)</span><br>				v.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x), x);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:		<span class="hljs-comment">//delete(x)</span><br>				v.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x));<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:		<span class="hljs-comment">//getRank(x)</span><br>				cout &lt;&lt; <span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x) - v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span> &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:		<span class="hljs-comment">//getValueByRank(x)</span><br>				cout &lt;&lt; v[x - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:		<span class="hljs-comment">//getPre(x)</span><br>				cout &lt;&lt; *--<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x) &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:		<span class="hljs-comment">//getNxt(x)</span><br>				cout &lt;&lt; *<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x + <span class="hljs-number">1</span>) &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>		}<br>	}<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>OI笔记</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>FREE-Figurines</title>
    <url>/2021/12/04/FREE-Figurines/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">两种操作: 接在后面 / 删除最前面.</span><br><span class="hljs-comment">最差情况: "重组", 即全部删了再拼起来. 需要2n次操作.</span><br><span class="hljs-comment">优化: 尾巴上的节点不需要操作. 可以统计有多少个这种节点, 减去节点数 * 2即可.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">int</span> src[N], dest[N], len[N], n, ans;<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ans = %d\n"</span>, ans);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n;<br>    <span class="hljs-comment">/*预处理, 统计最坏情况ans*/</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        cin &gt;&gt; src[i];<br>        vis[src[i]] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(src[i]) ans++;<br>    }<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        cin &gt;&gt; dest[i];<br>        vis[dest[i]] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(dest[i]) ans++;<br>    }<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        <span class="hljs-keyword">if</span>(!vis[i]) {<br>            <span class="hljs-keyword">int</span> tmpi = i;<br>            <span class="hljs-keyword">while</span>(src[tmpi] * dest[tmpi] &amp;&amp; src[tmpi] == dest[tmpi]) {   <span class="hljs-comment">//不为自由的 &amp;&amp; 相等就是不用断开的链</span><br>                ans -= <span class="hljs-number">2</span>;<br>                tmpi = src[tmpi];<br>            }<br>        }<br>    }<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>POI2010 - TESIntelligence Test</title>
    <url>/2021/11/21/POI2010-TESIntelligence-Test/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> YES puts(<span class="hljs-meta-string">"TAK"</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NO puts(<span class="hljs-meta-string">"NIE"</span>);</span><br><br><span class="hljs-keyword">int</span> len, tc;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; nxt[N];<br><br><span class="hljs-comment">//思路 开二维vector存一堆指针 nxt[x][y]就是数字x出现的第y次的位置.</span><br><span class="hljs-comment">//vector动态开内存 不会爆空间.</span><br><span class="hljs-comment">//二分去找"数字k出现第x次的位置", 实现"快速跳转".</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span> expected_pos)</span> </span>{<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nxt[num].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, res = len + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r) {<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(nxt[num][mid] &gt; expected_pos) {<br>            r = mid - <span class="hljs-number">1</span>;<br>            res = mid;<br>        } <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-comment">//return nxt[num][res];</span><br>    <span class="hljs-keyword">return</span> (res == len + <span class="hljs-number">1</span> ? res : nxt[num][res]);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++) {<br>        <span class="hljs-keyword">int</span> tmp;<br>        cin &gt;&gt; tmp;<br>        nxt[tmp].<span class="hljs-built_in">push_back</span>(i);<br>    }<br><br>    cin &gt;&gt; tc;<br>    <span class="hljs-keyword">while</span>(tc--) {<br>        <span class="hljs-keyword">int</span> l, a[N];<br>        cin &gt;&gt; l;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>; <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; i++) cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; i++) {<br>            pos = <span class="hljs-built_in">bsearch</span>(a[i], pos);<br>            <span class="hljs-comment">//fprintf(stderr, "a[%d] = %d,\tpos = %d\n", i, a[i], pos);</span><br>            <span class="hljs-keyword">if</span>(pos &gt; len) { flag = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>; }<br>        }<br>        <br>        flag ? YES : NO;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>二分</title>
    <url>/2022/02/20/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h1 id="二分">二分</h1>
<h2 id="二分查找">二分查找</h2>
<p>给定一个序列<span class="math inline">\(\{a\}\)</span>, 查找指定元素<span class="math inline">\(x\)</span>位置.</p>
<h3 id="代码实现">代码实现</h3>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>{<br>    <span class="hljs-keyword">while</span>(l &lt; r) {<br>        <span class="hljs-keyword">int</span> mid = l + (r - l &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-keyword">return</span> a[l] == x ? l : <span class="hljs-number">-1</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h2 id="二分答案">二分答案</h2>
<p>单调区间内高效地查找最优答案, <strong>可以看作"枚举"的优化</strong>. 常用来解决"最大值最小化"问题.</p>
<h2 id="luogu-p1873-砍树"><a href="https://www.luogu.com.cn/problem/P1873">Luogu P1873 砍树</a></h2>
<p>如果枚举<span class="math inline">\([1, 1\times 10^9]\)</span>会超时, 使用二分答案.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n;<br>LL a[N], m;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(LL height)</span> </span>{<br>    LL got = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {<br>        got += <span class="hljs-built_in">max</span>(a[i] - height, <span class="hljs-number">0ll</span>);<br>    }<br>    <span class="hljs-keyword">return</span> got &gt;= m;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {<br>        cin &gt;&gt; a[i];<br>    }<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1e9</span> + <span class="hljs-number">1</span>;		<span class="hljs-comment">//闭合的区间, 1e9需要加一</span><br>    <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> &lt; r) {			<span class="hljs-comment">//l, r不能相邻</span><br>        <span class="hljs-keyword">int</span> mid = l + (r - l &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isValid</span>(mid)) {<br>            l = mid;<br>        } <span class="hljs-keyword">else</span> {<br>            r = mid;<br>        }<br>    }<br>    cout &lt;&lt; l &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>OI笔记</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/06/hello-world/</url>
    <content><![CDATA[<p>如题, 这是我的第一篇文章.</p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
  </entry>
  <entry>
    <title>字典树</title>
    <url>/2022/04/18/trie/</url>
    <content><![CDATA[<h1 id="字典树">字典树</h1>
<h2 id="定义">定义</h2>
<h2 id="应用">应用</h2>
<h3 id="像查字典一样检索字符串">像查字典一样"检索"字符串</h3>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie</span> {</span><br>	<span class="hljs-keyword">int</span> nxt[N][<span class="hljs-number">26</span>], tot = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">bool</span> ed[N];<br><br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string s)</span> </span>{<br>		<span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> ch: s) {<br>			<span class="hljs-keyword">int</span> key = ch - <span class="hljs-string">'a'</span>;<br>			<span class="hljs-keyword">if</span>(nxt[p][key] == <span class="hljs-number">0</span>) {<br>				nxt[p][key] = ++tot;<br>			}<br>			p = nxt[p][key];<br>		}<br>		ed[p] = <span class="hljs-literal">true</span>;<br>	}<br><br>	<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isExist</span><span class="hljs-params">(string s)</span> </span>{<br>		<span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> ch: s) {<br>			<span class="hljs-keyword">int</span> key = ch - <span class="hljs-string">'a'</span>;<br>			<span class="hljs-keyword">if</span>(nxt[p][key] == <span class="hljs-number">0</span>) {<br>				<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>			}<br>			p = nxt[p][key];<br>		}<br>		<span class="hljs-keyword">return</span> ed[p];<br>	}<br><br>};<br><br>Trie tr;	<span class="hljs-comment">//Allocate</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-keyword">int</span> cas;<br>	cin &gt;&gt; cas;<br>	<span class="hljs-keyword">while</span>(cas--) {<br>	    string s;<br>	    cin &gt;&gt; s;<br>	    tr.<span class="hljs-built_in">insert</span>(s);<br>	}<br>	<span class="hljs-built_in">puts</span>(<span class="hljs-string">"Inserted!!!!!!\n\nAsk Me!!!!!!!"</span>);<br>	cin &gt;&gt; cas;<br>	<span class="hljs-keyword">while</span>(cas--) {<br>		string s;<br>		cin &gt;&gt; s;<br>		<span class="hljs-built_in">puts</span>(tr.<span class="hljs-built_in">isExist</span>(s) ? <span class="hljs-string">"Exist."</span> : <span class="hljs-string">"Not Exist."</span>);<br>	}<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="异或极值问题">异或极值问题</h3>
]]></content>
      <categories>
        <category>OI笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>单调队列优化dp</title>
    <url>/2022/05/01/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96dp/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>不会.</p>
<h2 id="例题">例题</h2>
<h3 id="fance">Fance</h3>
<blockquote>
<p>有<span class="math inline">\(n\)</span>块木板从左到右排成一行，有<span class="math inline">\(m\)</span>个工匠对这些木板进行粉刷，每块木板至多被粉刷一次。</p>
<p>第<span class="math inline">\(i\)</span>个木匠要么不粉刷，要么粉刷包含木板<span class="math inline">\(S_i\)</span>的，长度不超过<span class="math inline">\(L_i\)</span>的连续的一段木板，每粉刷一块可以得到<span class="math inline">\(P_i\)</span>的报酬。</p>
<p>不同工匠的<span class="math inline">\(S_i\)</span>不同。</p>
<p>请问如何安排能使工匠们获得的总报酬最多。</p>
</blockquote>
<p>先按照<span class="math inline">\(S\)</span>排序, 去除后效性. dp, 设<span class="math inline">\(F_{i, j}\)</span>为前<span class="math inline">\(i\)</span>人刷前<span class="math inline">\(j\)</span>块板获得的最大报酬.</p>
<p>则有:</p>
<ol type="1">
<li>第<span class="math inline">\(i\)</span>人不干了;</li>
<li>第<span class="math inline">\(j\)</span>块板空着不刷;</li>
<li>第<span class="math inline">\(i\)</span>人刷了<span class="math inline">\([k + 1, j]\)</span>的连续一段.</li>
</ol>
<p><span class="math display">\[
\begin{array}{c}
F_{i, j} = F_{i - 1, j}\\
F_{i, j} = F_{i, j - 1}\\
F_{i, j} = \max_{k\in [j - L_i, S_i)} \{F_{i - 1, j} + P_i \cdot (j - k)\}
\end{array}
\]</span></p>
<p>注意观察三式, 如果枚举<span class="math inline">\(i, j, k\)</span>肯定超时. 该怎么优化呢?</p>
<p>观察等号左侧, 这是一个关于<span class="math inline">\(i, j\)</span>的式子, 所以肯定要嵌套循环枚举它们. 此时可以通过防止不优的<span class="math inline">\(k\)</span>做dp来优化.</p>
<p>先看看式子, 尝试先把不含<span class="math inline">\(k\)</span>项提出来(下式加号左边): <span class="math display">\[
F_{i, j} = P_i \cdot j + \max _{k \in [j - L_i, S_i)} \{F_{i - 1, k} - P_i \cdot k\}
\]</span> 注意观察加号右边: 当<span class="math inline">\(j\)</span>从小到大地枚举时, 下界增大, 上界不变. 设<span class="math inline">\(k_1 \lt k_2 \le S_i\)</span>. 不难发现随着<span class="math inline">\(j\)</span>增加, <span class="math inline">\(k_1\)</span>先离开这个区间. 此时如果<span class="math inline">\(k_1\)</span>带来的价值不比<span class="math inline">\(k_2\)</span>多(<span class="math inline">\(\le\)</span>), 最后的答案就必然不是最优! 此时可以果断踢掉<span class="math inline">\(k_1\)</span>.</p>
<p>可以使用单调队列优化<span class="math inline">\(k\)</span>, 具体操作为:</p>
<p>for循环枚举<span class="math inline">\(k\)</span>:</p>
<ol type="1">
<li>踢掉小于下界的队头;</li>
<li>此时队头为最优, 可以拿来做dp;</li>
<li>将当前枚举的<span class="math inline">\(k\)</span>与队尾作比较, 如果队尾获得的价值不大于<span class="math inline">\(k\)</span>获得的价值, 就踢队尾, <span class="math inline">\(k\)</span>入队.</li>
</ol>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span> {</span><br>	<span class="hljs-keyword">int</span> l, p, s;<br><br>	<span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Person &amp;p2) {<br>		<span class="hljs-keyword">return</span> s &lt; p2.s;<br>	}<br>};<br><br>Person a[N];<br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> q[N], f[<span class="hljs-number">200</span>][<span class="hljs-number">20000</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; n &gt;&gt; m;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) {<br>		<span class="hljs-keyword">int</span> l, p, s;<br>		cin &gt;&gt; l &gt;&gt; p &gt;&gt; s;<br>		a[i] = (Person){l, p, s};<br>	}<br><br>	<span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + m);<br><br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) {<br>		<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> money(_i, _k) (f[(_i) - 1][(_k)] - a[(_i)].p * (_k))</span><br>        <br>		<span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, a[i].s - a[i].l); k &lt; a[i].s; ++k) {<br>			<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; <span class="hljs-built_in">money</span>(i, q[tail]) &lt;= <span class="hljs-built_in">money</span>(i, k)) --tail;<br>			q[++tail] = k;<br>		}<br><br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) {<br>			<span class="hljs-comment">//1, 2</span><br>			f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>]);<br><br>			<span class="hljs-comment">//3</span><br>			<span class="hljs-keyword">if</span>(j &lt; a[i].s) <span class="hljs-keyword">continue</span>;<br>			<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; q[head] &lt; j - a[i].l) ++head;<br>			<span class="hljs-keyword">if</span>(head &lt;= tail) f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], j * a[i].p + <span class="hljs-built_in">money</span>(i, q[head]));<br>		}<br>	}<br><br>	cout &lt;&lt; f[m][n] &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="cf372c-watching-fireworks-is-fun">CF372C Watching Fireworks is Fun</h3>
<blockquote>
<p>一个城镇有<span class="math inline">\(n\)</span>个区域,从左到右从1编号为<span class="math inline">\(n\)</span>,每个区域之间距离1个单位距离。 节日中有<span class="math inline">\(m\)</span>个烟火要放，给定放的地点<span class="math inline">\(a_i\)</span>,时间<span class="math inline">\(t_i\)</span>,如果你当时在区域<span class="math inline">\(x\)</span>,那么你可以获得<span class="math inline">\(b_i - \vert a_i - x\vert\)</span>的开心值。 你每个单位时间可以移动不超过<span class="math inline">\(d\)</span>个单位距离。 你的初始位置是任意的(初始时刻为1),求你通过移动能获取到的最大的开心值。</p>
<p><span class="math inline">\(1 \le n \le 150000, 1 \le m \le 300, 1 \le d \le n\)</span>.</p>
</blockquote>
<p>单调队列优化dp, 滚动数组优化空间.</p>
<p>设<span class="math inline">\(F_{i, j}\)</span>为在第<span class="math inline">\(i\)</span>个单位时间, 位于<span class="math inline">\(j\)</span>的最大开心值; 设<span class="math inline">\(\Delta s = (t_i - t_{i - 1}) \cdot d\)</span>, 则有</p>
<p>则有: <span class="math display">\[
\begin{array}{d}
F_{i, j} = \max _{j - \Delta s \le k\le j + \Delta s}\{F_{i - 1, k} + b_i - |a_i - j|\}\\
\Rightarrow F_{i, j} =b_i - |a_i - j| + \max _{j - \Delta s \le k\le j + \Delta s}\{F_{i - 1, k}\}
\end{array}
\]</span> 观察数据范围, 开不下这么大的数组; 观察右式, 发现<span class="math inline">\(F_{i, j}\)</span>只跟<span class="math inline">\(F_{i - 1, j}\)</span>有关. 考虑使用滚动数组优化掉第一维.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1.5e6</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">310</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> {</span><br>	LL a, b, t;<br>};<br><br>P a[M];<br>LL f[<span class="hljs-number">2</span>][N], q[N];<br><span class="hljs-keyword">int</span> n, m, d;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> LL <span class="hljs-title">delta_s</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>{<br>	<span class="hljs-keyword">return</span> d * (a[i].t - a[i - <span class="hljs-number">1</span>].t); <br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <br>	cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) {<br>		<span class="hljs-keyword">int</span> aa, bb, tt;<br>		cin &gt;&gt; aa &gt;&gt; bb &gt;&gt; tt;<br>		a[i] = (P){aa, bb, tt};<br>	}<br><br><br>    <span class="hljs-comment">//dp</span><br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-number">1</span>;<br><br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) {<br>		<span class="hljs-keyword">int</span> head = <span class="hljs-number">1</span>, tail = <span class="hljs-number">0</span>, k = <span class="hljs-number">1</span>;				<span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> k在for循环里定义第7个点会TLE???</span><br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) {<br>			<span class="hljs-keyword">for</span>(; k &lt;= <span class="hljs-built_in">min</span>(<span class="hljs-number">1ll</span> * n, j + <span class="hljs-built_in">delta_s</span>(i)); ++k) {<br>				<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; f[flag ^ <span class="hljs-number">1</span>][q[tail]] &lt;= f[flag ^ <span class="hljs-number">1</span>][k]) --tail;<br>				q[++tail] = k;<br>			}<br><br>			<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; q[head] &lt; <span class="hljs-built_in">max</span>(<span class="hljs-number">1ll</span>, j - <span class="hljs-built_in">delta_s</span>(i))) ++head;<br>			f[flag][j] = f[flag ^ <span class="hljs-number">1</span>][q[head]] - <span class="hljs-built_in">abs</span>(a[i].a - j) + a[i].b;<br>		}<br>		flag ^= <span class="hljs-number">1</span>;<br>	}<br><br>	LL ans = -INF;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) {<br>		ans = <span class="hljs-built_in">max</span>(ans, f[flag ^ <span class="hljs-number">1</span>][j]);<br>	}<br>	cout &lt;&lt; ans &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="pta-little-bird">PTA-Little Bird</h3>
<blockquote>
<p>有<span class="math inline">\(n\)</span>棵树，第<span class="math inline">\(i\)</span>棵树的高度是<span class="math inline">\(d_i\)</span>。 要去第<span class="math inline">\(n\)</span>棵树。 第<span class="math inline">\(i\)</span>棵树可以跳到第<span class="math inline">\(i+1,i+2,\cdots,i+k\)</span>棵树。 如果跳到一棵不矮于当前树的树，那么劳累值会<span class="math inline">\(+1\)</span>；否则不会。 求到达第<span class="math inline">\(n\)</span>棵树的最小劳累值。</p>
</blockquote>
]]></content>
      <categories>
        <category>OI笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>动态规划</tag>
        <tag>dp优化</tag>
      </tags>
  </entry>
  <entry>
    <title>单调队列</title>
    <url>/2022/04/30/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="定义">定义</h2>
<p>维护一种序列, 可以从头和尾增加或删除元素(即双端队列), 且元素具有单调性.</p>
<h2 id="实现">实现</h2>
<p>本质是维护具有单调性的<strong>最优决策集合</strong>, 该如何维护最优与单调的性质呢?</p>
<h3 id="维护序列">维护序列</h3>
<p>该操作的本质是<strong>对原序列<span class="math inline">\(A\)</span>扫描, 将当前的元素<span class="math inline">\(A_i\)</span>与单调队列队尾比较, 如果<span class="math inline">\(A_i\)</span>更优则将队尾换成<span class="math inline">\(A_i\)</span></strong>.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pseudocode">//pseudo code<br>Queue q, Array a[];<br>int head = 0, tail = 0;<br>for each a[i] in a {<br>	while(队列过大) ++head;									//pop front<br>	//此时q[head]为当前最优<br>    while(head &lt;= tail &amp;&amp; q[tail]没有a[i]优) --tail;		//pop back<br>    q[++tail] = 当前值;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="实现双端队列">实现双端队列</h3>
<h4 id="stddeque"><code>std::deque</code></h4>
<p>可以使用deque对序列进行操作.</p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>deque&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-comment">//入队</span><br>q.<span class="hljs-built_in">push_front</span>(x);<br>q.<span class="hljs-built_in">push_back</span>(x);<br><br><span class="hljs-comment">//出队</span><br>q.<span class="hljs-built_in">pop_front</span>();<br>q.<span class="hljs-built_in">pop_back</span>();<br><br><span class="hljs-comment">//取头尾</span><br>q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">back</span>();<br><br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x: q) {<br>    cout &lt;&lt; x &lt;&lt; <span class="hljs-string">" "</span>;<br>}<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br></code></pre></div></td></tr></tbody></table></figure>
<h4 id="数组模拟">数组模拟</h4>
<p>可以使用两个指针<span class="math inline">\(head\)</span>, <span class="math inline">\(tail\)</span>模拟.</p>
<p><strong>需要注意的是数组中下标小的元素在队列前面, 同时指针<span class="math inline">\(head \le tail\)</span>.</strong></p>
<h2 id="例题">例题</h2>
<h3 id="滑动窗口">滑动窗口</h3>
<blockquote>
<p>给定一个长度为<span class="math inline">\(n\)</span>的序列, 求其每个长度为<span class="math inline">\(k\)</span>的连续子序列中的最大与最小值.</p>
</blockquote>
<p>本题只需维护两个单调队列(一个递减, 队头为min; 另一个反之)即可.</p>
<p>需要注意的是要让窗口大小不超过<span class="math inline">\(k\)</span>, 这里采用在队列中存储数组下标的方法统计, 即保证<span class="math inline">\(head\)</span>中存储的下标与当前扫描元素的下标之差小于<span class="math inline">\(k\)</span>.</p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">int</span> q[N], a[N];<br><span class="hljs-keyword">int</span> n, k;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getMin</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-comment">//维护递减序列, 队头即为答案</span><br>	<span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; k; ++i) {<br>		<span class="hljs-comment">//Step 1: [1, k), push</span><br>		<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; a[q[tail]] &gt;= a[i]) --tail;<br>		q[++tail] = i;<br>	}<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = k; i &lt;= n; ++i) {<br>		<span class="hljs-comment">//Step 2: [k, n]</span><br>		<span class="hljs-comment">//这个区间窗口可能超过k, 需要特判维护窗口大小</span><br>		<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; a[q[tail]] &gt;= a[i]) --tail;<br>		q[++tail] = i;<br>		<span class="hljs-keyword">while</span>(q[head] &lt;= i - k) ++head;<br>		cout &lt;&lt; a[q[head]] &lt;&lt; <span class="hljs-string">' '</span>;<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getMax</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-built_in">memset</span>(q, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> q);<br>	<span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; k; ++i) {<br>		<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; a[q[tail]] &lt;= a[i]) --tail;<br>		q[++tail] = i;<br>	}<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = k; i &lt;= n; ++i) {<br>		<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; a[q[tail]] &lt;= a[i]) --tail;<br>		q[++tail] = i;<br>		<span class="hljs-keyword">if</span>(q[head] &lt;= i - k) ++head;<br>		cout &lt;&lt; a[q[head]] &lt;&lt; <span class="hljs-string">' '</span>;<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; n &gt;&gt; k;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {<br>		cin &gt;&gt; a[i];<br>	}<br>	<span class="hljs-built_in">getMin</span>();<br>	<span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>	<span class="hljs-built_in">getMax</span>();<br>	<span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="最大子序和">最大子序和</h3>
<blockquote>
<p>给定一个长度为<span class="math inline">\(n\)</span>的序列, 求出一段长度不超过<span class="math inline">\(m\)</span>的连续子序列, 输出子序和.</p>
</blockquote>
<p>不难想到前缀和操作, 在前缀和数组<span class="math inline">\(S\)</span>中, 对于右端点<span class="math inline">\(r\)</span>, 需要找到左端点<span class="math inline">\(l\)</span>满足如下条件: <span class="math display">\[
\begin {cases}
l \in [1, r - 1]&amp;&amp;&amp;(1)\\
\min(S_l)&amp;&amp;&amp;(2)\\
r - m \le l&amp;&amp;&amp;(3)
\end {cases}
\]</span> 其中, 3式的意思是让子序列的大小不超过<span class="math inline">\(m\)</span>.</p>
<figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> m, n;<br><span class="hljs-keyword">int</span> a[N], s[N];<br><br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; n &gt;&gt; m;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {<br>		cin &gt;&gt; a[i];<br>		s[i] = s[i - <span class="hljs-number">1</span>] + a[i];<br>	}<br><br>	<span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>, ans = <span class="hljs-number">-0x3f</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {<br>	    <span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; i - m &gt; q[head]) ++head;<br>	    ans = <span class="hljs-built_in">max</span>(ans, s[i] - s[q[head]]);<br>		<span class="hljs-keyword">while</span>(head &lt;= tail &amp;&amp; s[q[tail]] &gt;= s[i]) --tail;<br>		q[++tail] = i;<br>	}<br>    <br>	cout &lt;&lt; ans &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>OI笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>树形dp</title>
    <url>/2022/03/25/%E6%A0%91%E5%BD%A2dp/</url>
    <content><![CDATA[<h1 id="树形dp">树形dp</h1>
<h2 id="例题">例题</h2>
<h3 id="没有上司的舞会"><a href="https://www.luogu.com.cn/problem/P1352">没有上司的舞会</a></h3>
<p>使用<span class="math inline">\(dp(u, 0/1)\)</span>表示以<span class="math inline">\(u\)</span>来或不来时<span class="math inline">\(u\)</span>为根结点子树的快乐指数总和.</p>
<p>则: <span class="math display">\[
dp(u, 0) = \sum \max_{v \in u.\mathrm{son}} \{dp(v, 0), dp(v, 1)\}\\
dp(u, 1) = dp(v, 0)
\]</span></p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> head[N], to[N], nxt[N], tot, n, r[N], Root = <span class="hljs-number">1</span>, dp[N][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">bool</span> haveFa[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initGraph</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>	tot = <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>{<br>	nxt[++tot] = head[u], head[u] = tot, to[tot] = v;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>{<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = nxt[i]) {<br>		<span class="hljs-keyword">int</span> v = to[i];<br>		<span class="hljs-built_in">calc</span>(v);<br>		dp[u][<span class="hljs-number">0</span>] += <span class="hljs-built_in">max</span>(dp[v][<span class="hljs-number">0</span>], dp[v][<span class="hljs-number">1</span>]);<br>		dp[u][<span class="hljs-number">1</span>] += dp[v][<span class="hljs-number">0</span>];<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-built_in">initGraph</span>();<br><br>	cin &gt;&gt; n;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {<br>		cin &gt;&gt; dp[i][<span class="hljs-number">1</span>];<br>	}<br><br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) {<br>		<span class="hljs-keyword">int</span> u, v;<br>		cin &gt;&gt; u &gt;&gt; v;<br>		<span class="hljs-built_in">addEdge</span>(v, u);<br>		haveFa[u] = <span class="hljs-literal">true</span>;<br>	}<br><br>	<span class="hljs-keyword">while</span>(haveFa[Root]) {<br>		Root++;<br>	}<br><br>	<span class="hljs-built_in">calc</span>(Root);<br><br>	cout &lt;&lt; <span class="hljs-built_in">max</span>(dp[Root][<span class="hljs-number">0</span>], dp[Root][<span class="hljs-number">1</span>]) &lt;&lt; endl;<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="战略游戏"><a href="https://www.luogu.com.cn/problem/P2016">战略游戏</a></h3>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> head[N], to[N], nxt[N], tot, dp[N][<span class="hljs-number">2</span>], n, Root;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initGraph</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>	tot = <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>{<br>	nxt[++tot] = head[u], head[u] = tot, to[tot] = v;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>{<br>	dp[u][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dp[u][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = nxt[i]) {<br>		<span class="hljs-keyword">int</span> v = to[i];<br>		<span class="hljs-built_in">calc</span>(v);<br>		dp[u][<span class="hljs-number">0</span>] += dp[v][<span class="hljs-number">1</span>];<br>		dp[u][<span class="hljs-number">1</span>] += <span class="hljs-built_in">min</span>(dp[v][<span class="hljs-number">0</span>], dp[v][<span class="hljs-number">1</span>]);<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-built_in">initGraph</span>();<br><br>	cin &gt;&gt; n;<br>	<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {<br>		<span class="hljs-keyword">int</span> u, k;<br>		cin &gt;&gt; u &gt;&gt; k;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= k; ++j) {<br>			<span class="hljs-keyword">int</span> v;<br>			cin &gt;&gt; v;<br>			<span class="hljs-built_in">addEdge</span>(u, v);<br>		}<br>	}<br><br>	<span class="hljs-built_in">calc</span>(<span class="hljs-number">0</span>);<br><br>	cout &lt;&lt; <span class="hljs-built_in">min</span>(dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]) &lt;&lt; endl;<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="dp求树的直径"><a href="https://www.luogu.com.cn/problem/SP1437">DP求树的直径</a></h3>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> head[N], to[N], nxt[N], tot, Root, d1[N], d2[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initGraph</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>	tot = <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>{<br>	nxt[++tot] = head[u], head[u] = tot, to[tot] = v;<br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDiam</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>{<br>	<span class="hljs-keyword">int</span> ret = -INF;<br>	d1[u] = d2[u] = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = nxt[i]) {<br>		<span class="hljs-keyword">int</span> v = to[i];<br>		<span class="hljs-built_in">getDiam</span>(v);<br>		<span class="hljs-keyword">int</span> t = d1[v] + <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">if</span>(t &gt; d1[u]) {<br>			d2[u] = d1[u], d1[u] = t;<br>		} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t &gt; d2[u]) {<br>			d2[u] = t;<br>		}<br>	}<br>	ret = <span class="hljs-built_in">max</span>(ret, d1[u] + d2[u]);<br>	<span class="hljs-keyword">return</span> ret;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-built_in">initGraph</span>();<br><br>	cin &gt;&gt; n;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) {<br>		<span class="hljs-keyword">int</span> u, v;<br>		cin &gt;&gt; u &gt;&gt; v;<br>		<span class="hljs-built_in">addEdge</span>(u, v);<br>	}<br><br>	<span class="hljs-keyword">int</span> ans = <span class="hljs-built_in">getDiam</span>(<span class="hljs-number">1</span>);<br><br>	cout &lt;&lt; ans	&lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>
<h3 id="消防局的设立"><a href="https://www.luogu.com.cn/problem/P2279">消防局的设立</a></h3>
]]></content>
      <categories>
        <category>OI笔记</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>图论</tag>
      </tags>
  </entry>
</search>
