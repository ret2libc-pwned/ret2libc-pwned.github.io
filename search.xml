<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FREE-Figurines</title>
    <url>/2021/12/04/FREE-Figurines/</url>
    <content><![CDATA[<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;

const int N = 1e6;

using namespace std;

/*
两种操作: 接在后面 / 删除最前面.
最差情况: "重组", 即全部删了再拼起来. 需要2n次操作.
优化: 尾巴上的节点不需要操作. 可以统计有多少个这种节点, 减去节点数 * 2即可.
*/

int src[N], dest[N], len[N], n, ans;
bool vis[N];

inline void debug() {
    printf("ans = %d\n", ans);
}

int main() {
    cin &gt;&gt; n;
    /*预处理, 统计最坏情况ans*/
    for(int i = 1; i &lt;= n; i++) {
        cin &gt;&gt; src[i];
        vis[src[i]] = true;
        if(src[i]) ans++;
    }
    for(int i = 1; i &lt;= n; i++) {
        cin &gt;&gt; dest[i];
        vis[dest[i]] = true;
        if(dest[i]) ans++;
    }

    for(int i = 1; i &lt;= n; i++) {
        if(!vis[i]) {
            int tmpi = i;
            while(src[tmpi] * dest[tmpi] &amp;&amp; src[tmpi] == dest[tmpi]) {   //不为自由的 &amp;&amp; 相等就是不用断开的链
                ans -= 2;
                tmpi = src[tmpi];
            }
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}</code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>POI2010 - TESIntelligence Test</title>
    <url>/2021/11/21/POI2010-TESIntelligence-Test/</url>
    <content><![CDATA[<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

const int N = 1e6;
#define YES puts("TAK")
#define NO puts("NIE");

int len, tc;
vector&lt;int&gt; nxt[N];

//思路 开二维vector存一堆指针 nxt[x][y]就是数字x出现的第y次的位置.
//vector动态开内存 不会爆空间.
//二分去找"数字k出现第x次的位置", 实现"快速跳转".

int bsearch(int num, int expected_pos) {
    int l = 0, r = nxt[num].size() - 1, res = len + 1;
    while(l &lt;= r) {
        int mid = (l + r) &gt;&gt; 1;
        if(nxt[num][mid] &gt; expected_pos) {
            r = mid - 1;
            res = mid;
        } else l = mid + 1;
    }
    //return nxt[num][res];
    return (res == len + 1 ? res : nxt[num][res]);
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);
    cin &gt;&gt; len;
    for(int i = 1; i &lt;= len; i++) {
        int tmp;
        cin &gt;&gt; tmp;
        nxt[tmp].push_back(i);
    }

    cin &gt;&gt; tc;
    while(tc--) {
        int l, a[N];
        cin &gt;&gt; l;
        bool flag = true; int pos = 0;
        for(int i = 1; i &lt;= l; i++) cin &gt;&gt; a[i];
        for(int i = 1; i &lt;= l; i++) {
            pos = bsearch(a[i], pos);
            //fprintf(stderr, "a[%d] = %d,\tpos = %d\n", i, a[i], pos);
            if(pos &gt; len) { flag = 0; break; }
        }
        
        flag ? YES : NO;
    }
    return 0;
}
</code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/06/hello-world/</url>
    <content><![CDATA[<p>如题, 这是我的第一篇文章.</p>
]]></content>
  </entry>
  <entry>
    <title>Splay</title>
    <url>/2022/03/12/Splay/</url>
    <content><![CDATA[<h1 id="splay">Splay</h1>
<h2 id="定义">定义</h2>
<p>Splay是一种BST, 将访问过的结点不断旋转到根结点, 在满足BST性质的同时保证其"平衡", <strong>基于时间、空间局部性原理优化查找性能(这样操作使得高频访问的结点在经常根结点附近)</strong>.</p>
<p><strong>本文的BST每一个结点只维护单个值(而非键值对), 下面说法中v、val、key都指这个值, BST性质的维护它们的大小关系做依据.</strong></p>
<h3 id="bst性质">BST性质</h3>
<p>左子树任意结点的key<span class="math inline">\(\lt\)</span>根结点key<span class="math inline">\(\lt\)</span>右子树任意结点key, 即<strong>中序遍历单调递增</strong>.</p>
<p>常见的BST有Treap、Splay、AVL等.</p>
<h2 id="结点结构">结点结构</h2>
<p>开结构体数组记录两个子结点及父结点的数组下标, 类似于一个<strong>链表</strong>(实际上很多树状数据结构都是数组模拟链表). 结点同时存储维护的信息.</p>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const int SIZE = 1e5;

struct Node {
    //两个子结点及父结点数组下标, val
    int s[2], p, v;
    //延迟标记及子树大小
    int dat, size;
    //初始化当前结点
    void init(int _v, int _p) {
        v = _v, p = _p;
        size = 1;
    }
};

//Allocate
Node tr[SIZE];
```  

其中规定`s[0]`为左子结点, `s[1]`为右子结点, 即: (后续代码均未使用如下define, 只是为了方便理解)

``` cpp
#define ls s[0]
#define rs s[1]
#define son s[k]
#define son_bro s[k ^ 1]		//son's brother</code></pre></div>
<h2 id="单旋操作rotate">单旋操作(rotate)</h2>
<p>旋转需要保证BST性质; 根结点变量, 即<code>root</code>需要更新; 结点维护的信息(如延迟标记)需要更新.</p>
<p>旋转改变了是树的形态, 本质是<strong>改变父子关系</strong>.</p>
<figure>
<img src="https://s2.loli.net/2022/02/27/51Z6t4FNpChvJbi.jpg" alt="Splay单旋"><figcaption aria-hidden="true">Splay单旋</figcaption>
</figure>
<h4 id="右旋-即operatornamezigx操作">右旋, 即<span class="math inline">\(\operatorname{Zig}(x)\)</span>操作</h4>
<p>顾名思义就是将<span class="math inline">\(x\)</span>的左子树绕着<span class="math inline">\(x\)</span>的父结点<span class="math inline">\(y\)</span>向右旋转.</p>
<p>需要注意的是<span class="math inline">\(x \lt x_r \lt y\)</span>, 故<span class="math inline">\(x_r\)</span>应该转到<span class="math inline">\(y_r\)</span>左子树的位置.</p>
<p>这样的操作通过改变<span class="math inline">\(y\)</span>与<span class="math inline">\(x_r\)</span>、<span class="math inline">\(\operatorname{fa}(y)\)</span>与<span class="math inline">\(x\)</span>、<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span>的父子关系达到.</p>
<h4 id="左旋-即operatornamezagx操作">左旋, 即<span class="math inline">\(\operatorname{Zag}(x)\)</span>操作</h4>
<p>同理, <span class="math inline">\(x\)</span>的右子树绕着<span class="math inline">\(y\)</span>向左旋转, <span class="math inline">\(x_l\)</span>接在<span class="math inline">\(y\)</span>右子树位置.</p>
<p>即需要改变<span class="math inline">\(y\)</span>与<span class="math inline">\(x_l\)</span>、<span class="math inline">\(\operatorname{fa}(y)\)</span>与<span class="math inline">\(x\)</span>、<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span>的父子关系.</p>
<h4 id="旋转结点-即operatornamerotatex操作">旋转结点, 即<span class="math inline">\(\operatorname{rotate}(x)\)</span>操作</h4>
<p>上述操作可以使用一个操作<span class="math inline">\(\operatorname{rotate}(x)\)</span>来完成, 即实现<strong>"自动判定左右"的单旋操作</strong>. <span class="math inline">\(x\)</span>是<span class="math inline">\(y\)</span>的左子树就右旋, 右子树反之.</p>
<p>该操作的精髓就是判定<span class="math inline">\(x\)</span>是<span class="math inline">\(y\)</span>的左结点还是右结点.</p>
<p>前面说过, "旋转"的本质是"改变父子关系". 每个结点维护了她的左右子树和父结点, 所以该过程需要"互认"父子关系, 即需要修改两个结点的信息; 同时因为树的形态被改变, 需要重新统计延迟标记维持的信息(如子树大小).</p>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void Rotate(int x) {
	int y = tr[x].p, z = tr[y].p;
    int k = (tr[y].s[1] == x);
    tr[z].s[tr[z].s[1] == y] = x, tr[x].p = z;
    tr[y].s[k] = tr[x].s[k ^ 1], tr[tr[x].s[k ^ 1]].p = y;
    tr[x].s[k ^ 1] = y, tr[y].p = x;			//tr[x].s[k]的含义是取处于yx直线上的x的儿子, k ^ 1是取她的兄弟
    Pushup(y), Pushup(x);
}</code></pre></div>
<p>说人话就是:</p>
<p><span class="math inline">\(k\)</span>的获取:</p>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">inline int k(int x, int y) {
    /*
     *@description 返回x是y的哪个儿子, 左0右1.
     */
	return (tr[y].s[1] == x);
}</code></pre></div>
<p>rotate伪代码:</p>
<div class="code-wrapper"><pre class="line-numbers language-pseudocode" data-language="pseudocode"><code class="language-pseudocode">/* y是x的爸爸, z是x的爷爷; */
/* 以下每一步都需要修改两个结点的值, 即互认关系 */
用z取到y, 将x转到y的位置上, 并与z互认; /* 以下两部均需操作结点与其父结点"互认"过程, 不再赘述 */
x(此时在y的位置上)的兄弟转到原先x(即tr[y].s[k])的位置上;
让y转到原先x的兄弟的位置;
分别更新y, x子树维护的信息;</code></pre></div>
<h2 id="双旋操作splay">双旋操作(splay)</h2>
<p>通过一或两次rotate, 可以调整BST的形态, 使其更平衡.</p>
<p>通过过程<span class="math inline">\(\operatorname{splay}(x, goal)\)</span>将结点<span class="math inline">\(x\)</span>转到<span class="math inline">\(goal\)</span>的子结点.</p>
<p>规定<span class="math inline">\(y\)</span>是<span class="math inline">\(x\)</span>父结点, <span class="math inline">\(z\)</span>是<span class="math inline">\(y\)</span>父结点, splay分六种(3 * 2)情况讨论.</p>
<ol type="1">
<li>当<span class="math inline">\(\operatorname{fa}(x) = \operatorname{Root}\)</span>时, 旋转一次<span class="math inline">\(x\)</span>(右或左), 即Zig或Zag;</li>
<li>当<span class="math inline">\(\operatorname{fa}(x) \ne \operatorname{Root}\)</span>且<span class="math inline">\(z, y, x\)</span>在一条直线上, 旋转一次<span class="math inline">\(y\)</span>, 再同方向旋转一次<span class="math inline">\(x\)</span>, 即Zig-Zig或Zag-Zag;</li>
<li>当<span class="math inline">\(\operatorname{fa}(x) \ne \operatorname{Root}\)</span>且<span class="math inline">\(z, y, x\)</span>形状是在一条直线的中间折了一下, 分别对<span class="math inline">\(x\)</span>执行两次不同方向的旋转, 即Zig-Zag或Zag-Zig.</li>
</ol>
<p>画图理解即可.</p>
<p>使用rotate就是:</p>
<ul>
<li>折线2x</li>
<li>直线yx</li>
</ul>
<p><strong>需要注意的是该操作是将<span class="math inline">\(x\)</span>转到<span class="math inline">\(goal\)</span>下面, 故当<span class="math inline">\(x\)</span>与<span class="math inline">\(goal\)</span>为具有父子关系的两个结点时 (即第1、2种情况)不需要操作(即不需要交换它们).</strong></p>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void Splay(int x, int goal) {
    //把x转到goal下面
    while(tr[x].p != goal) {
        int y = tr[x].p, z = tr[y].p;
        if(z != goal) {
            if((tr[z].s[1] == y) ^ (tr[y].s[1] == x)) Rotate(x);    //折线先转x再转x
            else Rotate(y);                                         //直线先转y
        }
        Rotate(x);                                                  //统一转x
    }
    if(goal == 0) Root = x;                                         //更新根结点(0为根结点下标)
}</code></pre></div>
<hr>
<h2 id="插入操作insert">插入操作(insert)</h2>
<p>过程<span class="math inline">\(\operatorname{insert}(val)\)</span>将<span class="math inline">\(val\)</span>插入BST的相应位置<span class="math inline">\(x\)</span>, 将插入的数转到根结点, 即执行<span class="math inline">\(\operatorname{splay}(x, 0)\)</span>.</p>
<p>插入时需要维护BST性质, 将插入的这个数与当前节点比较, <strong>"小插左, 大插右"</strong>.</p>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void Insert(int v) {
    /*
     * @param v 要插入值的val.
     */
    int u = Root, p = 0;		//从根结点开始, u为当前节点数组下标, p为她的爸爸下标
    while(u) {
        p = u, u = tr[u].s[v &gt; tr[u].v];	//小左大右地插下去, 方括号里的是判定左右
    }
    u = ++idx;			//结点又多了一个, idx += 1;
    if(p) tr[p].s[v &gt; tr[p].v] = u;		//将p的儿子u插入适当位置
    tr[u].init(v, p);	//给这个点初始化爸爸下标和自身value, 并将大小设为1
    splay(u, 0);		//转到根结点
}</code></pre></div>
<h2 id="查询指定数的排名getrank">查询指定数的排名(getRank)</h2>
<p>不会<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p>
<h2 id="查询第k小的数getvalbyrank">查询第<span class="math inline">\(k\)</span>小的数(getValByRank)</h2>
<p><span class="math inline">\(\operatorname{getValByRank}(rank)\)</span>操作分三种情况讨论: <span class="math display">\[
结点位于:\,
\begin{cases}
1. 所求结点位于左子树, 左子树结点个数\ge rank;\\
2. 所求结点为中序遍历第k个数(即左子树的父结点), 左子树结点个数 = rank - 1;\\
3. 所求结点位于右子树(rank需要减去左子树大小加一的和), 左子树结点个数 \lt rank - 1
\end{cases}
\]</span></p>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int getValByRank(int rk) {
    int u = Root;
    while(true) {
        Pushdown(u);
        if(tr[tr[u].s[0]] &gt;= rk) u = tr[u].s[0];
        else if(tr[tr[u].s[0]] + 1 == rk) return u;
        else rk -= (tr[tr[u].s[0]] + 1), u = tr[u].s[1];
    }
    return -1;
}</code></pre></div>
<h2 id="删除操作delete">删除操作(delete)</h2>
<p>操作<span class="math inline">\(\operatorname{delete}(x)\)</span>从Splay中删除value为<span class="math inline">\(x\)</span>的结点.</p>
<p>该操作首先将<span class="math inline">\(x\)</span>转到根结点, 再合并<span class="math inline">\(x\)</span>的左右子树.</p>
<h2 id="查询前驱后继getprefixgetsuffix">查询前驱/后继(getPrefix/getSuffix)</h2>
<p><span class="math inline">\(x\)</span>的前驱: 小于<span class="math inline">\(x\)</span>的最大数;</p>
<p><span class="math inline">\(x\)</span>的后继: 大于<span class="math inline">\(x\)</span>的最小数.</p>
<p><span class="math inline">\(\operatorname{getPrefix}(x)\)</span>操作查询<span class="math inline">\(x\)</span>的前驱, 可以通过插入<span class="math inline">\(x\)</span>(插入后位于根结点), 此时<span class="math inline">\(x\)</span>左子树中最右边的结点即为所求, 最后删除结点<span class="math inline">\(x\)</span>;</p>
<p><span class="math inline">\(\operatorname{getSuffix}(x)\)</span>操作反之.</p>
<hr>
<h2 id="例题">例题</h2>
<h3 id="文艺平衡树luogu-p3391">文艺平衡树(<a href="https://www.luogu.com.cn/problem/P3391">Luogu P3391</a>)</h3>
<blockquote>
<p>翻转一个区间，例如原有序序列是<span class="math inline">\(\{5, 4, 3, 2, 1\}\)</span>，翻转区间是<span class="math inline">\([2, 4]\)</span>的话，结果是<span class="math inline">\(\{5, 2, 3, 4, 1\}\)</span>.</p>
</blockquote>
<p>在结点上维护延迟标记<span class="math inline">\(flag\)</span>来判定翻转状态, 避免多次翻转造成性能上的浪费.</p>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;

const int N = 1e5;

using namespace std;

struct Node {
    int s[2], p, v, siz;
    int flag;                  //flag == 1则需要翻转
    void init(int _v, int _p) {
        v = _v, p = _p;
        siz = 1;
    }
};

Node tr[N];
int idx, Root;
int cas, n;

void Pushup(int x) {
    tr[x].siz = tr[tr[x].s[0]].siz + tr[tr[x].s[1]].siz + 1;
}

void Pushdown(int x) {
    if(tr[x].flag) {
        swap(tr[x].s[0], tr[x].s[1]);
        tr[tr[x].s[0]].flag ^= 1;
        tr[tr[x].s[1]].flag ^= 1;
        tr[x].flag = 0;
    }
}

void Rotate(int x) {
    int y = tr[x].p, z = tr[y].p;
    int k = (tr[y].s[1] == x);
    tr[z].s[tr[z].s[1] == y] = x, tr[x].p = z;
    tr[y].s[k] = tr[x].s[k ^ 1], tr[tr[x].s[k ^ 1]].p = y;
    tr[x].s[k ^ 1] = y, tr[y].p = x;
    Pushup(y), Pushup(x);
}

void Splay(int x, int goal) {
    while(tr[x].p != goal) {
        int y = tr[x].p, z = tr[y].p;
        if(z != goal) {
            if((tr[z].s[1] == y) ^ (tr[y].s[1] == x)) Rotate(x);
            else Rotate(y);
        }
        Rotate(x);
    }
    if(goal == 0) Root = x;
}

void Insert(int v) {
    int u = Root, p = 0;
    while(u) {
        p = u, u = tr[u].s[v &gt; tr[u].v];
    }
    u = ++idx;
    if(p) {
        tr[p].s[v &gt; tr[p].v] = u;
    }
    tr[u].init(v, p);
    Splay(u, 0);
}

int getValByRank(int rk) {
    int u = Root;
    while(true) {
        Pushdown(u);
        if(tr[tr[u].s[0]].siz &gt;= rk) u = tr[u].s[0];
        else if(tr[tr[u].s[0]].siz == rk - 1) return u;
        else rk -= (tr[tr[u].s[0]].siz + 1), u = tr[u].s[1];
    }
    return -1;
}

void Output(int u) {
    //这一步是翻转
    Pushdown(u);
    //从u开始中序遍历
    //左
    if(tr[u].s[0]) Output(tr[u].s[0]);
    //判定哨兵, 输出当前结点
    if(tr[u].v &gt;= 1 &amp;&amp; tr[u].v &lt;= n) cout &lt;&lt; tr[u].v &lt;&lt; ' ';
    //右
    if(tr[u].s[1]) Output(tr[u].s[1]);
}

int main() {
    cin &gt;&gt; n &gt;&gt; cas;
    for(int i = 0; i &lt;= n + 1; ++i) {
        //插入哨兵防止越界
        Insert(i);
    }
    while(cas--) {
        int l, r;
        cin &gt;&gt; l &gt;&gt; r;
        l = getValByRank(l), r = getValByRank(r + 2);
        Splay(l, 0), Splay(r, l);
        tr[tr[r].s[0]].flag ^= 1;
    }
    Output(Root);
    return 0;
}</code></pre></div>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">//对零基础即为友好
#include &lt;iostream&gt;

const int N = 1e6;

using namespace std;

struct Node {
	int v, p, s[2], siz;
	bool flag;
	void init(int _v, int _p) {
		v = _v, p = _p;
		siz = 0;
	}
};

Node tr[N];
int n, cas, Root, idx;

/*
 * 一些宏定义, 用法简单明了, 跟一大堆杂乱无章的中括号说再见!!!
 * ex. 	node(x).init(v, p)		//初始化结点x的属性v, p
 * 		siz(left(x))			//获取结点x的左子节点size
 *		siz(node(x).ls)			//另一种写法
 */

#define ls s[0]
#define rs s[1]
#define isRoot(x) (x == 0)
#define BST_getPos(fa, val) tr[fa].s[(val) &gt; tr[(fa)].v]	//在fa结点下面根据BST性质插入一个值为val的结点, 判定结点位置(即: 要插在哪里)
#define node(x) tr[(x)]										//可以理解为x号结点的对象, 方便使用ls, rs
#define left(x) tr[(x)].s[0]
#define right(x) tr[(x)].s[1]
#define val(x) tr[(x)].v
#define siz(x) tr[(x)].siz
#define flag(x) tr[(x)].flag
#define pa(x) tr[(x)].p
#define son(fa, x) tr[(fa)].s[(x)]							//获取结点fa的儿子, 参数x为左右, 左0右1
#define LoR(fa, x) (tr[(fa)].s[1] == (x))					//L or R, x是fa的哪个儿子


void Pushup(int x) {
	siz(x) = siz(left(x)) + siz(right(x)) + 1;
}

void Pushdown(int x) {
	if(flag(x)) {
		swap(left(x), right(x));
		flag(left(x)) ^= 1;
		flag(right(x)) ^= 1;
		flag(x) = 0;
	}
}

void Rotate(int x) {
	int y = pa(x), z = pa(y);
	int k = LoR(y, x);
	son(z, LoR(z, y)) = x, pa(x) = z;
	son(y, k) = son(x, k ^ 1), pa(son(x, k ^ 1)) = y;
	son(x, k ^ 1) = y, pa(y) = x;
	Pushup(y), Pushup(x);
}

void Splay(int x, int goal) {
	while(pa(x) != goal) {
		int y = pa(x), z = pa(y);
			if(z != goal) {
			if(LoR(z, y) ^ LoR(y, x)) {
				Rotate(x);
			} else {
				Rotate(y);
			}
		}
		Rotate(x);
	}
	if(isRoot(goal)) Root = x;
}

void Insert(int v) {
	int u = Root, p = 0;
	while(u) {
		p = u, u = BST_getPos(u, v);
	}
	u = ++idx;
	if(!isRoot(p)) {
		BST_getPos(p, v) = u;
	}
	node(u).init(v, p);
	Splay(u, 0);
}

int getValByRank(int rk) {
	int u = Root;
	while(true) {
		Pushdown(u);
		if(siz(left(u)) &gt;= rk) u = left(u);
		else if(siz(left(u)) == rk - 1) return u;
		else rk -= siz(left(u)) + 1, u = right(u);
	}
	return -1;
}

void Output(int x) {
	Pushdown(x);
	if(left(x)) Output(left(x));
	if(val(x) &gt;= 1 &amp;&amp; val(x) &lt;= n) cout &lt;&lt; val(x) &lt;&lt; ' ';
	if(right(x)) Output(right(x)); 
}

int main() {
	cin &gt;&gt; n &gt;&gt; cas;
	for(int i = 0; i &lt;= n + 1; ++i) {
		Insert(i);
	}
	while(cas--) {
		int l, r;
		cin &gt;&gt; l &gt;&gt; r;
		l = getValByRank(l), r = getValByRank(r + 2);
		Splay(l, 0), Splay(r, l);
		flag(left(r)) ^= 1;
	}
	Output(Root);
	puts("");
	return 0;
}</code></pre></div>
<h3 id="普通平衡树luogu-p3369">普通平衡树(<a href="https://www.luogu.com.cn/problem/P3369">Luogu P3369</a>)</h3>
<blockquote>
<p>实现增, 删, 查询排名与反查, 查询前驱与后继功能.</p>
</blockquote>
<h4 id="solution1-stdvector">Solution1: <code>std::vector</code></h4>
<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

vector&lt;int&gt; v;
int cas;

int main() {
	cin &gt;&gt; cas;
	while(cas--) {
		int op, x;
		cin &gt;&gt; op &gt;&gt; x;
		switch(op) {
			case 1:		//insert(x)
				v.insert(lower_bound(v.begin(), v.end(), x), x);
				break;
			case 2:		//delete(x)
				v.erase(lower_bound(v.begin(), v.end(), x));
				break;
			case 3:		//getRank(x)
				cout &lt;&lt; lower_bound(v.begin(), v.end(), x) - v.begin() + 1 &lt;&lt; endl;
				break;
			case 4:		//getValueByRank(x)
				cout &lt;&lt; v[x - 1] &lt;&lt; endl;
				break;
			case 5:		//getPre(x)
				cout &lt;&lt; *--lower_bound(v.begin(), v.end(), x) &lt;&lt; endl;
				break;
			case 6:		//getNxt(x)
				cout &lt;&lt; *lower_bound(v.begin(), v.end(), x + 1) &lt;&lt; endl;
				break;
		}
	}
	return 0;
}</code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>字典树</title>
    <url>/2022/04/18/trie/</url>
    <content><![CDATA[<h1 id="字典树">字典树</h1>
<h2 id="定义">定义</h2>
<h2 id="应用">应用</h2>
<h3 id="像查字典一样检索字符串">像查字典一样"检索"字符串</h3>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;

const int N = 1e6;

using namespace std;

struct Trie {
	int nxt[N][26], tot = 0;
	bool ed[N];

	void insert(string s) {
		int p = 0;
		for(char ch: s) {
			int key = ch - 'a';
			if(nxt[p][key] == 0) {
				nxt[p][key] = ++tot;
			}
			p = nxt[p][key];
		}
		ed[p] = true;
	}

	bool isExist(string s) {
		int p = 0;
		for(char ch: s) {
			int key = ch - 'a';
			if(nxt[p][key] == 0) {
				return false;
			}
			p = nxt[p][key];
		}
		return ed[p];
	}

};

Trie tr;	//Allocate

int main() {
	int cas;
	cin &gt;&gt; cas;
	while(cas--) {
	    string s;
	    cin &gt;&gt; s;
	    tr.insert(s);
	}
	puts("Inserted!!!!!!\n\nAsk Me!!!!!!!");
	cin &gt;&gt; cas;
	while(cas--) {
		string s;
		cin &gt;&gt; s;
		puts(tr.isExist(s) ? "Exist." : "Not Exist.");
	}
	return 0;
}</code></pre></div>
<h3 id="异或极值问题">异或极值问题</h3>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>二分</title>
    <url>/2022/02/20/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h1 id="二分">二分</h1>
<h2 id="二分查找">二分查找</h2>
<p>给定一个序列<span class="math inline">\(\{a\}\)</span>, 查找指定元素<span class="math inline">\(x\)</span>位置.</p>
<h3 id="代码实现">代码实现</h3>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int bsearch(int* a, int x, int l, int r) {
    while(l &lt; r) {
        int mid = l + (r - l &gt;&gt; 1);
        if(a[mid] &gt;= x) r = mid;
        else l = mid + 1;
    }
    return a[l] == x ? l : -1;
}</code></pre></div>
<h2 id="二分答案">二分答案</h2>
<p>单调区间内高效地查找最优答案, <strong>可以看作"枚举"的优化</strong>. 常用来解决"最大值最小化"问题.</p>
<h2 id="luogu-p1873-砍树"><a href="https://www.luogu.com.cn/problem/P1873">Luogu P1873 砍树</a></h2>
<p>如果枚举<span class="math inline">\([1, 1\times 10^9]\)</span>会超时, 使用二分答案.</p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;

typedef long long LL;

const int N = 1e6;

using namespace std;

int n;
LL a[N], m;

bool isValid(LL height) {
    LL got = 0;
    for(int i = 0; i &lt; n; ++i) {
        got += max(a[i] - height, 0ll);
    }
    return got &gt;= m;
}

int main() {
    cin &gt;&gt; n &gt;&gt; m;
    for(int i = 0; i &lt; n; ++i) {
        cin &gt;&gt; a[i];
    }
    int l = 1, r = 1e9 + 1;		//闭合的区间, 1e9需要加一
    while(l + 1 &lt; r) {			//l, r不能相邻
        int mid = l + (r - l &gt;&gt; 1);
        if(isValid(mid)) {
            l = mid;
        } else {
            r = mid;
        }
    }
    cout &lt;&lt; l &lt;&lt; endl;
    return 0;
}</code></pre></div>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/03/25/%E6%A0%91%E5%BD%A2dp/</url>
    <content><![CDATA[<h1 id="树形dp">树形dp</h1>
<h2 id="例题">例题</h2>
<h3 id="没有上司的舞会"><a href="https://www.luogu.com.cn/problem/P1352">没有上司的舞会</a></h3>
<p>使用<span class="math inline">\(dp(u, 0/1)\)</span>表示以<span class="math inline">\(u\)</span>来或不来时<span class="math inline">\(u\)</span>为根结点子树的快乐指数总和.</p>
<p>则: <span class="math display">\[
dp(u, 0) = \sum \max_{v \in u.\mathrm{son}} \{dp(v, 0), dp(v, 1)\}\\
dp(u, 1) = dp(v, 0)
\]</span></p>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cstring&gt;

const int N = 1e6 + 10;

using namespace std;

int head[N], to[N], nxt[N], tot, n, r[N], Root = 1, dp[N][2];
bool haveFa[N];

inline void initGraph() {
	memset(head, -1, sizeof head);
	tot = -1;
}

void addEdge(int u, int v) {
	nxt[++tot] = head[u], head[u] = tot, to[tot] = v;
}

void calc(int u) {
	for(int i = head[u]; ~i; i = nxt[i]) {
		int v = to[i];
		calc(v);
		dp[u][0] += max(dp[v][0], dp[v][1]);
		dp[u][1] += dp[v][0];
	}
}

int main() {
	initGraph();

	cin &gt;&gt; n;
	for(int i = 1; i &lt;= n; ++i) {
		cin &gt;&gt; dp[i][1];
	}

	for(int i = 1; i &lt; n; ++i) {
		int u, v;
		cin &gt;&gt; u &gt;&gt; v;
		addEdge(v, u);
		haveFa[u] = true;
	}

	while(haveFa[Root]) {
		Root++;
	}

	calc(Root);

	cout &lt;&lt; max(dp[Root][0], dp[Root][1]) &lt;&lt; endl;

	return 0;
}</code></pre></div>
<h3 id="战略游戏"><a href="https://www.luogu.com.cn/problem/P2016">战略游戏</a></h3>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cstring&gt;

const int N = 1e6 + 10;

using namespace std;

int head[N], to[N], nxt[N], tot, dp[N][2], n, Root;

inline void initGraph() {
	memset(head, -1, sizeof head);
	tot = -1;
}

void addEdge(int u, int v) {
	nxt[++tot] = head[u], head[u] = tot, to[tot] = v;
}

void calc(int u) {
	dp[u][1] = 1, dp[u][0] = 0;
	for(int i = head[u]; ~i; i = nxt[i]) {
		int v = to[i];
		calc(v);
		dp[u][0] += dp[v][1];
		dp[u][1] += min(dp[v][0], dp[v][1]);
	}
}

int main() {
	initGraph();

	cin &gt;&gt; n;
	
	for(int i = 1; i &lt;= n; ++i) {
		int u, k;
		cin &gt;&gt; u &gt;&gt; k;
		for(int j = 1; j &lt;= k; ++j) {
			int v;
			cin &gt;&gt; v;
			addEdge(u, v);
		}
	}

	calc(0);

	cout &lt;&lt; min(dp[0][0], dp[0][1]) &lt;&lt; endl;

	return 0;
}</code></pre></div>
<h3 id="dp求树的直径"><a href="https://www.luogu.com.cn/problem/SP1437">DP求树的直径</a></h3>
<div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;queue&gt;

const int N = 1e6 + 10, INF = 0x3f3f3f3f;

using namespace std;

int n;
int head[N], to[N], nxt[N], tot, Root, d1[N], d2[N];
bool vis[N];

inline void initGraph() {
	memset(head, -1, sizeof head);
	tot = -1;
}

void addEdge(int u, int v) {
	nxt[++tot] = head[u], head[u] = tot, to[tot] = v;
}


int getDiam(int u) {
	int ret = -INF;
	d1[u] = d2[u] = 0;
	for(int i = head[u]; ~i; i = nxt[i]) {
		int v = to[i];
		getDiam(v);
		int t = d1[v] + 1;
		if(t &gt; d1[u]) {
			d2[u] = d1[u], d1[u] = t;
		} else if(t &gt; d2[u]) {
			d2[u] = t;
		}
	}
	ret = max(ret, d1[u] + d2[u]);
	return ret;
}

int main() {
	initGraph();

	cin &gt;&gt; n;
	for(int i = 0; i &lt; n - 1; ++i) {
		int u, v;
		cin &gt;&gt; u &gt;&gt; v;
		addEdge(u, v);
	}

	int ans = getDiam(1);

	cout &lt;&lt; ans	&lt;&lt; endl;
	return 0;
}</code></pre></div>
<h3 id="消防局的设立"><a href="https://www.luogu.com.cn/problem/P2279">消防局的设立</a></h3>
]]></content>
  </entry>
</search>
