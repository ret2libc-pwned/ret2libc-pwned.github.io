<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSP-J 2021赛后总结</title>
    <url>/2021/11/13/CSP-J-2021%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="solution">Solution</h1>
<h2 id="t1">T1</h2>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">int</span> l, r, n;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">brute</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n ,<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>{<br>    <span class="hljs-comment">//bf: 暴力枚举k \in [l, r], 90 pts</span><br>    <span class="hljs-keyword">int</span> ans = -INF;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l; i &lt;= r; i ++) {<br>        ans = <span class="hljs-built_in">max</span>(ans, i % n);<br>    }<br>    <span class="hljs-keyword">return</span> ans;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ac</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>{<br>    <span class="hljs-comment">//先要明白余数是循环出现的</span><br>    <span class="hljs-comment">//L mod n = l, R mod n = r</span><br>    <span class="hljs-comment">//则余数是{l, l + 1, l + 2, ..., l + n - 1, ..., 0, 1, 2, ..., n - 1, ..., r}</span><br>    <span class="hljs-keyword">int</span> ans;<br>    <span class="hljs-keyword">if</span>(l / n == r / n) ans = r % n;     <span class="hljs-comment">//[l, r]区间比n小 --&gt; 数越大 余数越大 因为没有到n - 1的</span><br>    <span class="hljs-keyword">else</span> ans = n - <span class="hljs-number">1</span>;                   <span class="hljs-comment">//l / n == r / n --&gt; [l, r]区间比n大 --&gt; 肯定有能取到n - 1的数, 即最大k.</span><br><br>    <span class="hljs-keyword">return</span> ans;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;<br>    <span class="hljs-comment">//cout &lt;&lt; brute(n, l, r) &lt;&lt; endl;</span><br>    cout &lt;&lt; <span class="hljs-built_in">ac</span>(n, l, r) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">int</span> l, r, n;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">brute</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n ,<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>{<br>    <span class="hljs-comment">//bf: 暴力枚举k \in [l, r], 90 pts</span><br>    <span class="hljs-keyword">int</span> ans = -INF;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l; i &lt;= r; i ++) {<br>        ans = <span class="hljs-built_in">max</span>(ans, i % n);<br>    }<br>    <span class="hljs-keyword">return</span> ans;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ac</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>{<br>    <span class="hljs-comment">//先要明白余数是循环出现的</span><br>    <span class="hljs-comment">//L mod n = l, R mod n = r</span><br>    <span class="hljs-comment">//则余数是{l, l + 1, l + 2, ..., l + n - 1, ..., 0, 1, 2, ..., n - 1, ..., r}</span><br>    <span class="hljs-keyword">int</span> ans;<br>    <span class="hljs-keyword">if</span>(l / n == r / n) ans = r % n;     <span class="hljs-comment">//[l, r]区间比n小 --&gt; 数越大 余数越大 因为没有到n - 1的</span><br>    <span class="hljs-keyword">else</span> ans = n - <span class="hljs-number">1</span>;                   <span class="hljs-comment">//l / n == r / n --&gt; [l, r]区间比n大 --&gt; 肯定有能取到n - 1的数, 即最大k.</span><br><br>    <span class="hljs-keyword">return</span> ans;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;<br>    <span class="hljs-comment">//cout &lt;&lt; brute(n, l, r) &lt;&lt; endl;</span><br>    cout &lt;&lt; <span class="hljs-built_in">ac</span>(n, l, r) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="t2">T2</h2>
<h2 id="t3">T3</h2>
<h2 id="t4">T4</h2>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>赛后总结</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>FREE-Figurines</title>
    <url>/2021/12/04/FREE-Figurines/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">两种操作: 接在后面 / 删除最前面.</span><br><span class="hljs-comment">最差情况: "重组", 即全部删了再拼起来. 需要2n次操作.</span><br><span class="hljs-comment">优化: 尾巴上的节点不需要操作. 可以统计有多少个这种节点, 减去节点数 * 2即可.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">int</span> src[N], dest[N], len[N], n, ans;<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ans = %d\n"</span>, ans);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n;<br>    <span class="hljs-comment">/*预处理, 统计最坏情况ans*/</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        cin &gt;&gt; src[i];<br>        vis[src[i]] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(src[i]) ans++;<br>    }<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        cin &gt;&gt; dest[i];<br>        vis[dest[i]] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(dest[i]) ans++;<br>    }<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        <span class="hljs-keyword">if</span>(!vis[i]) {<br>            <span class="hljs-keyword">int</span> tmpi = i;<br>            <span class="hljs-keyword">while</span>(src[tmpi] * dest[tmpi] &amp;&amp; src[tmpi] == dest[tmpi]) {   <span class="hljs-comment">//不为自由的 &amp;&amp; 相等就是不用断开的链</span><br>                ans -= <span class="hljs-number">2</span>;<br>                tmpi = src[tmpi];<br>            }<br>        }<br>    }<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">两种操作: 接在后面 / 删除最前面.</span><br><span class="hljs-comment">最差情况: "重组", 即全部删了再拼起来. 需要2n次操作.</span><br><span class="hljs-comment">优化: 尾巴上的节点不需要操作. 可以统计有多少个这种节点, 减去节点数 * 2即可.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">int</span> src[N], dest[N], len[N], n, ans;<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ans = %d\n"</span>, ans);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n;<br>    <span class="hljs-comment">/*预处理, 统计最坏情况ans*/</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        cin &gt;&gt; src[i];<br>        vis[src[i]] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(src[i]) ans++;<br>    }<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        cin &gt;&gt; dest[i];<br>        vis[dest[i]] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(dest[i]) ans++;<br>    }<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        <span class="hljs-keyword">if</span>(!vis[i]) {<br>            <span class="hljs-keyword">int</span> tmpi = i;<br>            <span class="hljs-keyword">while</span>(src[tmpi] * dest[tmpi] &amp;&amp; src[tmpi] == dest[tmpi]) {   <span class="hljs-comment">//不为自由的 &amp;&amp; 相等就是不用断开的链</span><br>                ans -= <span class="hljs-number">2</span>;<br>                tmpi = src[tmpi];<br>            }<br>        }<br>    }<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>OI比赛中的那些玄学优化</title>
    <url>/2021/10/22/OI%E6%AF%94%E8%B5%9B%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%8E%84%E5%AD%A6%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>这是我暑假零基础入门C++的时候整理的小技巧. 现在到了CSP-2021赛前, 我在看笔记的时候发现了这个, 就把它发在我的网站上, 希望能帮到即将参加OI的你, <del>也希望能借此给自己增加Rp</del>.</p>
<p>这也是我第一次OI比赛, 希望能考好点.</p>
<h1 id="读入优化">读入优化</h1>
<p><strong>fread快读/快写代码来自oi-wiki</strong></p>
<h2 id="关闭同步推荐">关闭同步(推荐)</h2>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++">ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number"><code class="language-hljs c++">ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>关闭iostream与stdio中输入输出流的同步. 使<code>std::cin</code>与<code>std::cout</code>接近于<code>scanf()</code>与<code>printf()</code>的速度.</p>
<h3 id="注意事项">注意事项</h3>
<p>这个小优化是用得最多的, cin和cout慢的要命, 在IO特别多的题中要用cin/cout一定要加.</p>
<p><strong>注意: 加了第一行之后将无法使用<code>printf()</code>, <code>scanf()</code>等<code>stdio.h</code>中的函数, 如果作死用了会导致IO流混乱! </strong></p>
<p><strong>注意2: cin/cout写入文件不是即时的, 所以一定要<code>endl</code>刷新缓冲区(或者<code>\n</code>之类的)</strong></p>
<h2 id="printf和scanf推荐"><code>printf()</code>和<code>scanf()</code>(推荐)</h2>
<p>同上, 速度嗖嗖的. 但是不能在关闭同步后使用.</p>
<p>还能格式化字符串, 不香吗?(比如让你保留8位小数, 只需<code>printf("%.8lf", my_variable)</code>即可, cout还需借助<code>iomanip</code>)</p>
<h2 id="快读快写">快读/快写</h2>
<p>很好用, <code>getchar()</code>和<code>putchar()</code>快如闪电.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>;	<span class="hljs-comment">//x是数字, w是符号位</span><br>  <span class="hljs-keyword">char</span> ch = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) {  <span class="hljs-comment">//!isdigit(ch)</span><br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) w = <span class="hljs-number">-1</span>;        <br>    ch = <span class="hljs-built_in">getchar</span>();               <br>  }<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) {  <span class="hljs-comment">//isdigit(ch)</span><br>    x = x * <span class="hljs-number">10</span> + (ch - <span class="hljs-string">'0'</span>); <br>    ch = <span class="hljs-built_in">getchar</span>();<br>  }<br>  <span class="hljs-keyword">return</span> x * w;<br>}<br><br><span class="hljs-comment">//Example:</span><br><span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>;	<span class="hljs-comment">//x是数字, w是符号位</span><br>  <span class="hljs-keyword">char</span> ch = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) {  <span class="hljs-comment">//!isdigit(ch)</span><br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) w = <span class="hljs-number">-1</span>;        <br>    ch = <span class="hljs-built_in">getchar</span>();               <br>  }<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) {  <span class="hljs-comment">//isdigit(ch)</span><br>    x = x * <span class="hljs-number">10</span> + (ch - <span class="hljs-string">'0'</span>); <br>    ch = <span class="hljs-built_in">getchar</span>();<br>  }<br>  <span class="hljs-keyword">return</span> x * w;<br>}<br><br><span class="hljs-comment">//Example:</span><br><span class="hljs-comment">//int n = read();</span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sta[<span class="hljs-number">35</span>];<br>  <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">do</span> {<br>    sta[top++] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  } <span class="hljs-keyword">while</span> (x);<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">putchar</span>(sta[--top] + <span class="hljs-number">48</span>); <span class="hljs-comment">//(int)'0'</span><br>}<br><br><span class="hljs-comment">//Example:</span><br><span class="hljs-comment">//int a = 5;</span><br><span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sta[<span class="hljs-number">35</span>];<br>  <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">do</span> {<br>    sta[top++] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  } <span class="hljs-keyword">while</span> (x);<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">putchar</span>(sta[--top] + <span class="hljs-number">48</span>); <span class="hljs-comment">//(int)'0'</span><br>}<br><br><span class="hljs-comment">//Example:</span><br><span class="hljs-comment">//int a = 5;</span><br><span class="hljs-comment">//write(a);	</span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="fread较为玄学">fread(较为玄学)</h2>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-keyword">namespace</span> IO {<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXSIZE = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>;<br><span class="hljs-keyword">char</span> buf[MAXSIZE], *p1, *p2;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc()                                                               \</span><br><span class="hljs-meta">  (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, stdin), p1 == p2) \</span><br><span class="hljs-meta">       ? EOF                                                               \</span><br><span class="hljs-meta">       : *p1++)</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">gc</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) {<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'-'</span>) f = <span class="hljs-number">-1</span>;<br>    c = <span class="hljs-built_in">gc</span>();<br>  }<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">gc</span>();<br>  <span class="hljs-keyword">return</span> x * f;<br>}<br><span class="hljs-keyword">char</span> pbuf[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>], *pp = pbuf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> &amp;c)</span> </span>{<br>  <span class="hljs-keyword">if</span> (pp - pbuf == <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>) <span class="hljs-built_in">fwrite</span>(pbuf, <span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>, stdout), pp = pbuf;<br>  *pp++ = c;<br>}<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sta[<span class="hljs-number">35</span>];<br>  <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">do</span> {<br>    sta[top++] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  } <span class="hljs-keyword">while</span> (x);<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">push</span>(sta[--top] + <span class="hljs-string">'0'</span>);<br>}<br>}  <span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-keyword">namespace</span> IO {<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXSIZE = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>;<br><span class="hljs-keyword">char</span> buf[MAXSIZE], *p1, *p2;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc()                                                               \</span><br><span class="hljs-meta">  (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, stdin), p1 == p2) \</span><br><span class="hljs-meta">       ? EOF                                                               \</span><br><span class="hljs-meta">       : *p1++)</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">char</span> c = <span class="hljs-built_in">gc</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) {<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'-'</span>) f = <span class="hljs-number">-1</span>;<br>    c = <span class="hljs-built_in">gc</span>();<br>  }<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">gc</span>();<br>  <span class="hljs-keyword">return</span> x * f;<br>}<br><span class="hljs-keyword">char</span> pbuf[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>], *pp = pbuf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> &amp;c)</span> </span>{<br>  <span class="hljs-keyword">if</span> (pp - pbuf == <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>) <span class="hljs-built_in">fwrite</span>(pbuf, <span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>, stdout), pp = pbuf;<br>  *pp++ = c;<br>}<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sta[<span class="hljs-number">35</span>];<br>  <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">do</span> {<br>    sta[top++] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  } <span class="hljs-keyword">while</span> (x);<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">push</span>(sta[--top] + <span class="hljs-string">'0'</span>);<br>}<br>}  <span class="hljs-comment">// namespace IO</span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>如上是基于<code>fread</code>实现的快读快写, 本质是利用文件的缓冲区.</p>
<p>实现时需要将<code>getchar()</code>稍微改改, (代码中<code>\</code>表示显示不下, 写的时候从这一行接着写就行, 无需换行)</p>
<h3 id="注意事项-1">注意事项</h3>
<p>敲这个板子太费时间了, 还是用上面那个基于<code>putchar()</code>和<code>getchar()</code>的那个性价比最高.</p>
<p><strong>好像这个东西很玄学, 一些情况下会使整个程序变慢(?)</strong></p>
<h1 id="执行优化">执行优化</h1>
<h2 id="i较为推荐"><code>++i</code>(较为推荐)</h2>
<p>有研究表明<code>++i</code>比<code>i++</code>快, 说是<code>i++</code>用了一个临时变量.</p>
<p><strong>注: 很多人在网上科普两者的关系, 但是只是看反编译代码, 看到<code>++i</code>比<code>i++</code>用的汇编指令少一两个, 就说<code>++i</code>更快(甚至每一句指令的意思都说一下, 即到底慢在哪了)??? 就算真的是这样这种不懂装懂的态度也不是很好</strong></p>
<p><code>++i</code>执行完后的值跟i是一样的, 可以拿来给其它变量赋值.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-keyword"><code class="language-hljs c++"><span class="hljs-keyword">int</span> k = ++i;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="register已经死了"><code>register</code>(已经死了)</h2>
<p><code>register</code>, 即直接操作寄存器. 在C++14逐渐被弃用.</p>
<p>在之前的C++版本中都可以放在循环里面提升性能.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < n; ++i)<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="inline内联函数推荐"><code>inline</code>内联函数(推荐)</h2>
<p><code>inline</code>可以在调用处就地展开函数.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">return</span> x &amp; (-x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-keyword">int</span> x = <span class="hljs-number">114514</span>;<br>	<span class="hljs-keyword">int</span> y = <span class="hljs-built_in">lowbit</span>(x);<br>	<span class="hljs-comment">//相当于直接运行函数, 没有调用关系</span><br>	<span class="hljs-comment">//inline int lowbit(int x) {</span><br>	<span class="hljs-comment">//		return x &amp; (-x);</span><br>	<span class="hljs-comment">//}</span><br>    cout &lt;&lt; y &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">return</span> x &amp; (-x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-keyword">int</span> x = <span class="hljs-number">114514</span>;<br>	<span class="hljs-keyword">int</span> y = <span class="hljs-built_in">lowbit</span>(x);<br>	<span class="hljs-comment">//相当于直接运行函数, 没有调用关系</span><br>	<span class="hljs-comment">//inline int lowbit(int x) {</span><br>	<span class="hljs-comment">//		return x &amp; (-x);</span><br>	<span class="hljs-comment">//}</span><br>    cout &lt;&lt; y &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>对于一些需要调用多次的函数, 可以使用<code>inline</code>声明他是内联的.</p>
<p>对于inline函数, 调用时不像普通函数那样, 将地址, 参数等关键信息压入栈(一种内存布局)中, 再执行<code>call</code>指令. 返回时再操作栈, 最后<code>ret</code>. 这样不仅费时间, 还浪费栈空间.</p>
<p>inline函数会在预处理阶段像宏(如<code>#define</code>)在调用处原地展开.</p>
<h3 id="注意事项-2">注意事项</h3>
<ul>
<li>对递归函数没用(有人说递归程序用inline会爆re, 本人亲测不会, 应该是编译器优化掉了)</li>
<li>节省了栈空间和调用开销, 但是增加了程序编译后的体积. 在比赛中没啥事, 但在实际开发中慎用.</li>
</ul>
<h3 id="小实验-探究inline函数的性质诚意满满-真的不看看吗">小实验: 探究inline函数的性质(诚意满满, 真的不看看吗?)</h3>
<p>反编译工具: <code>IDA Pro 7.5 (32-bit)</code></p>
<p>测试环境: <code>Windows 10 x64</code></p>
<p>我们写出如下测试代码:</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-comment">//test.cpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">my_inline_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-comment">//lowbit :)</span><br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, <span class="hljs-built_in">my_inline_func</span>(n));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-comment">//test.cpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">my_inline_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-comment">//lowbit :)</span><br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, <span class="hljs-built_in">my_inline_func</span>(n));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>使用<code>g++ test.cpp -O -o test.exe</code>命令(<code>-O</code>表示开启优化, 即使用内联函数)生成可执行文件.</p>
<p>反编译之后:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs asm"><code class="language-hljs asm">; main()<br>.text:00401421 ; int __cdecl main(int argc, const char **argv, const char **envp)<br>.text:00401421                 public _main<br>.text:00401421 _main           proc near               ; CODE XREF: sub_4011A0+8E↑p<br>.text:00401421<br>.text:00401421 argc            = dword ptr  8<br>.text:00401421 argv            = dword ptr  0Ch<br>.text:00401421 envp            = dword ptr  10h<br>.text:00401421<br>.text:00401421 ; __unwind {<br>.text:00401421                 push    ebp<br>.text:00401422                 mov     ebp, esp<br>.text:00401424                 and     esp, 0FFFFFFF0h<br>.text:00401427                 sub     esp, 20h<br>.text:0040142A                 call    ___main<br>.text:0040142F                 mov     dword ptr [esp+1Ch], 0<br>.text:00401437                 lea     eax, [esp+1Ch]<br>.text:0040143B                 mov     [esp+4], eax<br>.text:0040143F                 mov     dword ptr [esp], offset Format ; "%d"<br>.text:00401446                 call    _scanf<br>							;这里应该就是inline函数展开后的样子了, 可以看到并没有调用的过程<br>.text:0040144B                 mov     edx, [esp+1Ch]<br>.text:0040144F                 mov     eax, edx<br>.text:00401451                 neg     eax<br>.text:00401453                 and     eax, edx<br>.text:00401455                 mov     [esp+4], eax<br>.text:00401459                 mov     dword ptr [esp], offset aD_0 ; "%d\n"<br>.text:00401460                 call    _printf<br>.text:00401465                 mov     eax, 0<br>.text:0040146A                 leave<br>.text:0040146B                 retn<br>.text:0040146B ; } // starts at 401421<br>.text:0040146B _main           endp<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>可以知道, inline函数只是就地展开, 并没有调用, 这个"调用的"过程在地址上是连续的, 没有涉及到地址和参数的push/pop操作.</p>
<p>看得还不够清楚? 让我们点一下F5</p>
<p>借助IDA Pro强大的Hex-rays插件, 可以清楚地看到main函数编译后变成了这个样子.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [esp+1Ch] [ebp-4h] BYREF</span><br><br>  __main();	<span class="hljs-comment">//这个是预处理, 即程序的入口点, 不用管.</span><br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;v4);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, v4 &amp; -v4);	<span class="hljs-comment">//这就是inline函数的魅力 :)</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [esp+1Ch] [ebp-4h] BYREF</span><br><br>  __main();	<span class="hljs-comment">//这个是预处理, 即程序的入口点, 不用管.</span><br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;v4);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, v4 &amp; -v4);	<span class="hljs-comment">//这就是inline函数的魅力 :)</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>现在, inline函数的作用我们的理解已经很透彻了.</p>
<h1 id="算法优化">算法优化</h1>
<h2 id="相关stl">相关STL</h2>
<p>据说set, map常数比较大.</p>
<p>但是我不会手写.</p>
<p>所以用着吧...</p>
<p>但是<code>std::sort()</code>据说很高级, 快排, 堆排, 插入排序三管齐下, 性能很不错.</p>
<p>基本上只要自己写写归并, 剩下交给sort就好.</p>
<h1 id="不要作死">不要作死</h1>
<p><strong>这是在赛前加的, 意在提醒广大选手不要为了优化而作死, 想一个更好的算法或者打暴力拿个部分分不香吗?</strong></p>
<p>以下内容在NOI系列竞赛中<strong>不能用</strong>!!! 不包括全部, 只包括选手们可能会作死用到的(我猜的).</p>
<p>还是以官方说明为准, 这里只是提醒一下.</p>
<h2 id="pragma如私自开o2-或者开栈">pragma(如私自开<code>O2</code>, 或者开栈)</h2>
<p>官方明令禁止</p>
<p>开栈的话需要在本机修改, (方法自行百度). CSP不限制栈空间.</p>
<h2 id="内联汇编">内联汇编</h2>
<p>官方明令禁止.</p>
<p>内联汇编分两种, 一种是<code>__asm__</code>, 一种是开一个数组把机器码放进去, 再<code>memcpy</code>到可执行的内存区域上</p>
<p><strong>都不要用!!!</strong></p>
<p>尤其是第二种, 你在自己的电脑上玩玩算了, 很可能在这台电脑上能运行, 另一台电脑上就出错. 而且这类程序需要高权限, 可执行的内存区域都不太好往里写数据.</p>
<p>最重要的, <strong>比赛用了会爆零!!!</strong></p>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>常数优化</tag>
        <tag>笔记</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>POI2010 - TESIntelligence Test</title>
    <url>/2021/11/21/POI2010-TESIntelligence-Test/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> YES puts(<span class="hljs-meta-string">"TAK"</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NO puts(<span class="hljs-meta-string">"NIE"</span>);</span><br><br><span class="hljs-keyword">int</span> len, tc;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; nxt[N];<br><br><span class="hljs-comment">//思路 开二维vector存一堆指针 nxt[x][y]就是数字x出现的第y次的位置.</span><br><span class="hljs-comment">//vector动态开内存 不会爆空间.</span><br><span class="hljs-comment">//二分去找"数字k出现第x次的位置", 实现"快速跳转".</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span> expected_pos)</span> </span>{<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nxt[num].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, res = len + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r) {<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(nxt[num][mid] &gt; expected_pos) {<br>            r = mid - <span class="hljs-number">1</span>;<br>            res = mid;<br>        } <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-comment">//return nxt[num][res];</span><br>    <span class="hljs-keyword">return</span> (res == len + <span class="hljs-number">1</span> ? res : nxt[num][res]);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++) {<br>        <span class="hljs-keyword">int</span> tmp;<br>        cin &gt;&gt; tmp;<br>        nxt[tmp].<span class="hljs-built_in">push_back</span>(i);<br>    }<br><br>    cin &gt;&gt; tc;<br>    <span class="hljs-keyword">while</span>(tc--) {<br>        <span class="hljs-keyword">int</span> l, a[N];<br>        cin &gt;&gt; l;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>; <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; i++) cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; i++) {<br>            pos = <span class="hljs-built_in">bsearch</span>(a[i], pos);<br>            <span class="hljs-comment">//fprintf(stderr, "a[%d] = %d,\tpos = %d\n", i, a[i], pos);</span><br>            <span class="hljs-keyword">if</span>(pos &gt; len) { flag = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>; }<br>        }<br>        <br>        flag ? YES : NO;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> YES puts(<span class="hljs-meta-string">"TAK"</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NO puts(<span class="hljs-meta-string">"NIE"</span>);</span><br><br><span class="hljs-keyword">int</span> len, tc;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; nxt[N];<br><br><span class="hljs-comment">//思路 开二维vector存一堆指针 nxt[x][y]就是数字x出现的第y次的位置.</span><br><span class="hljs-comment">//vector动态开内存 不会爆空间.</span><br><span class="hljs-comment">//二分去找"数字k出现第x次的位置", 实现"快速跳转".</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span> expected_pos)</span> </span>{<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nxt[num].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, res = len + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r) {<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(nxt[num][mid] &gt; expected_pos) {<br>            r = mid - <span class="hljs-number">1</span>;<br>            res = mid;<br>        } <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-comment">//return nxt[num][res];</span><br>    <span class="hljs-keyword">return</span> (res == len + <span class="hljs-number">1</span> ? res : nxt[num][res]);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++) {<br>        <span class="hljs-keyword">int</span> tmp;<br>        cin &gt;&gt; tmp;<br>        nxt[tmp].<span class="hljs-built_in">push_back</span>(i);<br>    }<br><br>    cin &gt;&gt; tc;<br>    <span class="hljs-keyword">while</span>(tc--) {<br>        <span class="hljs-keyword">int</span> l, a[N];<br>        cin &gt;&gt; l;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>; <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; i++) cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; i++) {<br>            pos = <span class="hljs-built_in">bsearch</span>(a[i], pos);<br>            <span class="hljs-comment">//fprintf(stderr, "a[%d] = %d,\tpos = %d\n", i, a[i], pos);</span><br>            <span class="hljs-keyword">if</span>(pos &gt; len) { flag = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>; }<br>        }<br>        <br>        flag ? YES : NO;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Splay</title>
    <url>/2022/03/12/Splay/</url>
    <content><![CDATA[<h1 id="splay">Splay</h1>
<h2 id="定义">定义</h2>
<p>Splay是一种BST, 将访问过的结点不断旋转到根结点, 在满足BST性质的同时保证其"平衡", <strong>基于时间、空间局部性原理优化查找性能(这样操作使得高频访问的结点在经常根结点附近)</strong>.</p>
<p><strong>本文的BST每一个结点只维护单个值(而非键值对), 下面说法中v、val、key都指这个值, BST性质的维护它们的大小关系做依据.</strong></p>
<h3 id="bst性质">BST性质</h3>
<p>左子树任意结点的key<span class="math inline">\(\lt\)</span>根结点key<span class="math inline">\(\lt\)</span>右子树任意结点key, 即<strong>中序遍历单调递增</strong>.</p>
<p>常见的BST有Treap、Splay、AVL等.</p>
<h2 id="结点结构">结点结构</h2>
<p>开结构体数组记录两个子结点及父结点的数组下标, 类似于一个<strong>链表</strong>(实际上很多树状数据结构都是数组模拟链表). 结点同时存储维护的信息.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>    <span class="hljs-comment">//两个子结点及父结点数组下标, val</span><br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">2</span>], p, v;<br>    <span class="hljs-comment">//延迟标记及子树大小</span><br>    <span class="hljs-keyword">int</span> dat, size;<br>    <span class="hljs-comment">//初始化当前结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>        v = _v, p = _p;<br>        size = <span class="hljs-number">1</span>;<br>    }<br>};<br><br><span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>    <span class="hljs-comment">//两个子结点及父结点数组下标, val</span><br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">2</span>], p, v;<br>    <span class="hljs-comment">//延迟标记及子树大小</span><br>    <span class="hljs-keyword">int</span> dat, size;<br>    <span class="hljs-comment">//初始化当前结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>        v = _v, p = _p;<br>        size = <span class="hljs-number">1</span>;<br>    }<br>};<br><br><span class="hljs-comment">//Allocate</span><br>Node tr[SIZE];<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>其中规定<code>s[0]</code>为左子结点, <code>s[1]</code>为右子结点, 即: (后续代码均未使用如下define, 只是为了方便理解)</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son s[k]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son_bro s[k ^ 1]		<span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son s[k]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son_bro s[k ^ 1]		<span class="hljs-comment">//son's brother</span></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="单旋操作rotate">单旋操作(rotate)</h2>
<p>旋转需要保证BST性质; 根结点变量, 即<code>root</code>需要更新; 结点维护的信息(如延迟标记)需要更新.</p>
<p>旋转改变了是树的形态, 本质是<strong>改变父子关系</strong>.</p>
<figure>
<img src="https://s2.loli.net/2022/02/27/51Z6t4FNpChvJbi.jpg" alt="Splay单旋"><figcaption aria-hidden="true">Splay单旋</figcaption>
</figure>
<h4 id="右旋-即operatornamezigx操作">右旋, 即<span class="math inline">\(\operatorname{Zig}(x)\)</span>操作</h4>
<p>顾名思义就是将<span class="math inline">\(x\)</span>的左子树绕着<span class="math inline">\(x\)</span>的父结点<span class="math inline">\(y\)</span>向右旋转.</p>
<p>需要注意的是<span class="math inline">\(x \lt x_r \lt y\)</span>, 故<span class="math inline">\(x_r\)</span>应该转到<span class="math inline">\(y_r\)</span>左子树的位置.</p>
<p>这样的操作通过改变<span class="math inline">\(y\)</span>与<span class="math inline">\(x_r\)</span>、<span class="math inline">\(\operatorname{fa}(y)\)</span>与<span class="math inline">\(x\)</span>、<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span>的父子关系达到.</p>
<h4 id="左旋-即operatornamezagx操作">左旋, 即<span class="math inline">\(\operatorname{Zag}(x)\)</span>操作</h4>
<p>同理, <span class="math inline">\(x\)</span>的右子树绕着<span class="math inline">\(y\)</span>向左旋转, <span class="math inline">\(x_l\)</span>接在<span class="math inline">\(y\)</span>右子树位置.</p>
<p>即需要改变<span class="math inline">\(y\)</span>与<span class="math inline">\(x_l\)</span>、<span class="math inline">\(\operatorname{fa}(y)\)</span>与<span class="math inline">\(x\)</span>、<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span>的父子关系.</p>
<h4 id="旋转结点-即operatornamerotatex操作">旋转结点, 即<span class="math inline">\(\operatorname{rotate}(x)\)</span>操作</h4>
<p>上述操作可以使用一个操作<span class="math inline">\(\operatorname{rotate}(x)\)</span>来完成, 即实现<strong>"自动判定左右"的单旋操作</strong>. <span class="math inline">\(x\)</span>是<span class="math inline">\(y\)</span>的左子树就右旋, 右子树反之.</p>
<p>该操作的精髓就是判定<span class="math inline">\(x\)</span>是<span class="math inline">\(y\)</span>的左结点还是右结点.</p>
<p>前面说过, "旋转"的本质是"改变父子关系". 每个结点维护了她的左右子树和父结点, 所以该过程需要"互认"父子关系, 即需要修改两个结点的信息; 同时因为树的形态被改变, 需要重新统计延迟标记维持的信息(如子树大小).</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>    <span class="hljs-keyword">int</span> k = (tr[y].s[<span class="hljs-number">1</span>] == x);<br>    tr[z].s[tr[z].s[<span class="hljs-number">1</span>] == y] = x, tr[x].p = z;<br>    tr[y].s[k] = tr[x].s[k ^ <span class="hljs-number">1</span>], tr[tr[x].s[k ^ <span class="hljs-number">1</span>]].p = y;<br>    tr[x].s[k ^ <span class="hljs-number">1</span>] = y, tr[y].p = x;			<span class="hljs-comment">//tr[x].s[k]的含义是取处于yx直线上的x的儿子, k ^ 1是取她的兄弟</span><br>    <span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>    <span class="hljs-keyword">int</span> k = (tr[y].s[<span class="hljs-number">1</span>] == x);<br>    tr[z].s[tr[z].s[<span class="hljs-number">1</span>] == y] = x, tr[x].p = z;<br>    tr[y].s[k] = tr[x].s[k ^ <span class="hljs-number">1</span>], tr[tr[x].s[k ^ <span class="hljs-number">1</span>]].p = y;<br>    tr[x].s[k ^ <span class="hljs-number">1</span>] = y, tr[y].p = x;			<span class="hljs-comment">//tr[x].s[k]的含义是取处于yx直线上的x的儿子, k ^ 1是取她的兄弟</span><br>    <span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in">Pushup</span>(x);<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>说人话就是:</p>
<p><span class="math inline">\(k\)</span>的获取:</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">k</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *@description 返回x是y的哪个儿子, 左0右1.</span><br><span class="hljs-comment">     */</span><br>	<span class="hljs-keyword">return</span> (tr[y].s[<span class="hljs-number"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">k</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *@description 返回x是y的哪个儿子, 左0右1.</span><br><span class="hljs-comment">     */</span><br>	<span class="hljs-keyword">return</span> (tr[y].s[<span class="hljs-number">1</span>] == x);<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>rotate伪代码:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs pseudocode"><code class="language-hljs pseudocode">/* y是x的爸爸, z是x的爷爷; */<br>/* 以下每一步都需要修改两个结点的值, 即互认关系 */<br>用z取到y, 将x转到y的位置上, 并与z互认; /* 以下两部均需操作结点与其父结点"互认"过程, 不再赘述 */<br>x(此时在y的位置上)的兄弟转到原先x(即tr[y].s[k])的位置上;<br>让y转到原先x的兄弟的位置;<br>分别更新y, x子树维护的信息;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="双旋操作splay">双旋操作(splay)</h2>
<p>通过一或两次rotate, 可以调整BST的形态, 使其更平衡.</p>
<p>通过过程<span class="math inline">\(\operatorname{splay}(x, goal)\)</span>将结点<span class="math inline">\(x\)</span>转到<span class="math inline">\(goal\)</span>的子结点.</p>
<p>规定<span class="math inline">\(y\)</span>是<span class="math inline">\(x\)</span>父结点, <span class="math inline">\(z\)</span>是<span class="math inline">\(y\)</span>父结点, splay分六种(3 * 2)情况讨论.</p>
<ol type="1">
<li>当<span class="math inline">\(\operatorname{fa}(x) = \operatorname{Root}\)</span>时, 旋转一次<span class="math inline">\(x\)</span>(右或左), 即Zig或Zag;</li>
<li>当<span class="math inline">\(\operatorname{fa}(x) \ne \operatorname{Root}\)</span>且<span class="math inline">\(z, y, x\)</span>在一条直线上, 旋转一次<span class="math inline">\(y\)</span>, 再同方向旋转一次<span class="math inline">\(x\)</span>, 即Zig-Zig或Zag-Zag;</li>
<li>当<span class="math inline">\(\operatorname{fa}(x) \ne \operatorname{Root}\)</span>且<span class="math inline">\(z, y, x\)</span>形状是在一条直线的中间折了一下, 分别对<span class="math inline">\(x\)</span>执行两次不同方向的旋转, 即Zig-Zag或Zag-Zig.</li>
</ol>
<p>画图理解即可.</p>
<p>使用rotate就是:</p>
<ul>
<li>折线2x</li>
<li>直线yx</li>
</ul>
<p><strong>需要注意的是该操作是将<span class="math inline">\(x\)</span>转到<span class="math inline">\(goal\)</span>下面, 故当<span class="math inline">\(x\)</span>与<span class="math inline">\(goal\)</span>为具有父子关系的两个结点时 (即第1、2种情况)不需要操作(即不需要交换它们).</strong></p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>    <span class="hljs-comment">//把x转到goal下面</span><br>    <span class="hljs-keyword">while</span>(tr[x].p != goal) {<br>        <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>        <span class="hljs-keyword">if</span>(z != goal) {<br>            <span class="hljs-keyword">if</span>((tr[z].s[<span class="hljs-number">1</span>] == y) ^ (tr[y].s[<span class="hljs-number">1</span>] == x)) <span class="hljs-built_in">Rotate</span>(x);    <span class="hljs-comment">//折线先转x再转x</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">Rotate</span>(y);                                         <span class="hljs-comment">//直线先转y</span><br>        }<br>        <span class="hljs-built_in">Rotate</span>(x);                                                  <span class="hljs-comment">//统一转x</span><br>    }<br>    <span class="hljs-keyword">if</span>(goal == <span class="hljs-number">0</span>) Root = x;                                         <span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>    <span class="hljs-comment">//把x转到goal下面</span><br>    <span class="hljs-keyword">while</span>(tr[x].p != goal) {<br>        <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>        <span class="hljs-keyword">if</span>(z != goal) {<br>            <span class="hljs-keyword">if</span>((tr[z].s[<span class="hljs-number">1</span>] == y) ^ (tr[y].s[<span class="hljs-number">1</span>] == x)) <span class="hljs-built_in">Rotate</span>(x);    <span class="hljs-comment">//折线先转x再转x</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">Rotate</span>(y);                                         <span class="hljs-comment">//直线先转y</span><br>        }<br>        <span class="hljs-built_in">Rotate</span>(x);                                                  <span class="hljs-comment">//统一转x</span><br>    }<br>    <span class="hljs-keyword">if</span>(goal == <span class="hljs-number">0</span>) Root = x;                                         <span class="hljs-comment">//更新根结点(0为根结点下标)</span><br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<hr>
<h2 id="插入操作insert">插入操作(insert)</h2>
<p>过程<span class="math inline">\(\operatorname{insert}(val)\)</span>将<span class="math inline">\(val\)</span>插入BST的相应位置<span class="math inline">\(x\)</span>, 将插入的数转到根结点, 即执行<span class="math inline">\(\operatorname{splay}(x, 0)\)</span>.</p>
<p>插入时需要维护BST性质, 将插入的这个数与当前节点比较, <strong>"小插左, 大插右"</strong>.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * @param v 要插入值的val.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;		<span class="hljs-comment">//从根结点开始, u为当前节点数组下标, p为她的爸爸下标</span><br>    <span class="hljs-keyword">while</span>(u) {<br>        p = u, u = tr[u].s[v &gt; tr[u].v];	<span class="hljs-comment">//小左大右地插下去, 方括号里的是判定左右</span><br>    }<br>    u = ++idx;			<span class="hljs-comment">//结点又多了一个, idx += 1;</span><br>    <span class="hljs-keyword">if</span>(p) tr[p].s[v &gt; tr[p].v] = u;		<span class="hljs-comment">//将p的儿子u插入适当位置</span><br>    tr[u].<span class="hljs-built_in">init</span>(v, p);	<span class="hljs-comment">//给这个点初始化爸爸下标和自身value, 并将大小设为1</span><br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);		<span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * @param v 要插入值的val.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;		<span class="hljs-comment">//从根结点开始, u为当前节点数组下标, p为她的爸爸下标</span><br>    <span class="hljs-keyword">while</span>(u) {<br>        p = u, u = tr[u].s[v &gt; tr[u].v];	<span class="hljs-comment">//小左大右地插下去, 方括号里的是判定左右</span><br>    }<br>    u = ++idx;			<span class="hljs-comment">//结点又多了一个, idx += 1;</span><br>    <span class="hljs-keyword">if</span>(p) tr[p].s[v &gt; tr[p].v] = u;		<span class="hljs-comment">//将p的儿子u插入适当位置</span><br>    tr[u].<span class="hljs-built_in">init</span>(v, p);	<span class="hljs-comment">//给这个点初始化爸爸下标和自身value, 并将大小设为1</span><br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);		<span class="hljs-comment">//转到根结点</span><br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="查询指定数的排名getrank">查询指定数的排名(getRank)</h2>
<p>不会<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>.</p>
<h2 id="查询第k小的数getvalbyrank">查询第<span class="math inline">\(k\)</span>小的数(getValByRank)</h2>
<p><span class="math inline">\(\operatorname{getValByRank}(rank)\)</span>操作分三种情况讨论: <span class="math display">\[
结点位于:\,
\begin{cases}
1. 所求结点位于左子树, 左子树结点个数\ge rank;\\
2. 所求结点为中序遍历第k个数(即左子树的父结点), 左子树结点个数 = rank - 1;\\
3. 所求结点位于右子树(rank需要减去左子树大小加一的和), 左子树结点个数 \lt rank - 1
\end{cases}
\]</span></p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>        <span class="hljs-built_in">Pushdown</span>(u);<br>        <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]] &gt;= rk) u = tr[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span> == rk) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">else</span> rk -= (tr[tr[u].s[<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>), u = tr[u].s[<span class="hljs-number">1</span>];<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>        <span class="hljs-built_in">Pushdown</span>(u);<br>        <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]] &gt;= rk) u = tr[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span> == rk) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">else</span> rk -= (tr[tr[u].s[<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>), u = tr[u].s[<span class="hljs-number">1</span>];<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="删除操作delete">删除操作(delete)</h2>
<p>操作<span class="math inline">\(\operatorname{delete}(x)\)</span>从Splay中删除value为<span class="math inline">\(x\)</span>的结点.</p>
<p>该操作首先将<span class="math inline">\(x\)</span>转到根结点, 再合并<span class="math inline">\(x\)</span>的左右子树.</p>
<h2 id="查询前驱后继getprefixgetsuffix">查询前驱/后继(getPrefix/getSuffix)</h2>
<p><span class="math inline">\(x\)</span>的前驱: 小于<span class="math inline">\(x\)</span>的最大数;</p>
<p><span class="math inline">\(x\)</span>的后继: 大于<span class="math inline">\(x\)</span>的最小数.</p>
<p><span class="math inline">\(\operatorname{getPrefix}(x)\)</span>操作查询<span class="math inline">\(x\)</span>的前驱, 可以通过插入<span class="math inline">\(x\)</span>(插入后位于根结点), 此时<span class="math inline">\(x\)</span>左子树中最右边的结点即为所求, 最后删除结点<span class="math inline">\(x\)</span>;</p>
<p><span class="math inline">\(\operatorname{getSuffix}(x)\)</span>操作反之.</p>
<hr>
<h2 id="例题">例题</h2>
<h3 id="文艺平衡树luogu-p3391">文艺平衡树(<a href="https://www.luogu.com.cn/problem/P3391">Luogu P3391</a>)</h3>
<blockquote>
<p>翻转一个区间，例如原有序序列是<span class="math inline">\(\{5, 4, 3, 2, 1\}\)</span>，翻转区间是<span class="math inline">\([2, 4]\)</span>的话，结果是<span class="math inline">\(\{5, 2, 3, 4, 1\}\)</span>.</p>
</blockquote>
<p>在结点上维护延迟标记<span class="math inline">\(flag\)</span>来判定翻转状态, 避免多次翻转造成性能上的浪费.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">2</span>], p, v, siz;<br>    <span class="hljs-keyword">int</span> flag;                  <span class="hljs-comment">//flag == 1则需要翻转</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>        v = _v, p = _p;<br>        siz = <span class="hljs-number">1</span>;<br>    }<br>};<br><br>Node tr[N];<br><span class="hljs-keyword">int</span> idx, Root;<br><span class="hljs-keyword">int</span> cas, n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    tr[x].siz = tr[tr[x].s[<span class="hljs-number">0</span>]].siz + tr[tr[x].s[<span class="hljs-number">1</span>]].siz + <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">if</span>(tr[x].flag) {<br>        <span class="hljs-built_in">swap</span>(tr[x].s[<span class="hljs-number">0</span>], tr[x].s[<span class="hljs-number">1</span>]);<br>        tr[tr[x].s[<span class="hljs-number">0</span>]].flag ^= <span class="hljs-number">1</span>;<br>        tr[tr[x].s[<span class="hljs-number">1</span>]].flag ^= <span class="hljs-number">1</span>;<br>        tr[x].flag = <span class="hljs-number">0</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>    <span class="hljs-keyword">int</span> k = (tr[y].s[<span class="hljs-number">1</span>] == x);<br>    tr[z].s[tr[z].s[<span class="hljs-number">1</span>] == y] = x, tr[x].p = z;<br>    tr[y].s[k] = tr[x].s[k ^ <span class="hljs-number">1</span>], tr[tr[x].s[k ^ <span class="hljs-number">1</span>]].p = y;<br>    tr[x].s[k ^ <span class="hljs-number">1</span>] = y, tr[y].p = x;<br>    <span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in">Pushup</span>(x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>    <span class="hljs-keyword">while</span>(tr[x].p != goal) {<br>        <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>        <span class="hljs-keyword">if</span>(z != goal) {<br>            <span class="hljs-keyword">if</span>((tr[z].s[<span class="hljs-number">1</span>] == y) ^ (tr[y].s[<span class="hljs-number">1</span>] == x)) <span class="hljs-built_in">Rotate</span>(x);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">Rotate</span>(y);<br>        }<br>        <span class="hljs-built_in">Rotate</span>(x);<br>    }<br>    <span class="hljs-keyword">if</span>(goal == <span class="hljs-number">0</span>) Root = x;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(u) {<br>        p = u, u = tr[u].s[v &gt; tr[u].v];<br>    }<br>    u = ++idx;<br>    <span class="hljs-keyword">if</span>(p) {<br>        tr[p].s[v &gt; tr[p].v] = u;<br>    }<br>    tr[u].<span class="hljs-built_in">init</span>(v, p);<br>    <span class="hljs-built_in">Splay</span>(u, <span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>        <span class="hljs-built_in">Pushdown</span>(u);<br>        <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]].siz &gt;= rk) u = tr[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]].siz == rk - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">else</span> rk -= (tr[tr[u].s[<span class="hljs-number">0</span>]].siz + <span class="hljs-number">1</span>), u = tr[u].s[<span class="hljs-number">1</span>];<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>{<br>    <span class="hljs-comment">//这一步是翻转</span><br>    <span class="hljs-built_in">Pushdown</span>(u);<br>    <span class="hljs-comment">//从u开始中序遍历</span><br>    <span class="hljs-comment">//左</span><br>    <span class="hljs-keyword">if</span>(tr[u].s[<span class="hljs-number">0</span>]) <span class="hljs-built_in">Output</span>(tr[u].s[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">//判定哨兵, 输出当前结点</span><br>    <span class="hljs-keyword">if</span>(tr[u].v &gt;= <span class="hljs-number">1</span> &amp;&amp; tr[u].v &lt;= n) cout &lt;&lt; tr[u].v &lt;&lt; <span class="hljs-string">' '</span>;<br>    <span class="hljs-comment">//右</span><br>    <span class="hljs-keyword">if</span>(tr[u].s[<span class="hljs-number">1</span>]) <span class="hljs-built_in">Output</span>(tr[u].s[<span class="hljs-number">1</span>]);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n &gt;&gt; cas;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i) {<br>        <span class="hljs-comment">//插入哨兵防止越界</span><br>        <span class="hljs-built_in">Insert</span>(i);<br>    }<br>    <span class="hljs-keyword">while</span>(cas--) {<br>        <span class="hljs-keyword">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        l = <span class="hljs-built_in">getValByRank</span>(l), r = <span class="hljs-built_in">getValByRank</span>(r + <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">Splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">Splay</span>(r, l);<br>        tr[tr[r].s[<span class="hljs-number">0</span>]].flag ^= <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-built_in">Output</span>(Root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">2</span>], p, v, siz;<br>    <span class="hljs-keyword">int</span> flag;                  <span class="hljs-comment">//flag == 1则需要翻转</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>        v = _v, p = _p;<br>        siz = <span class="hljs-number">1</span>;<br>    }<br>};<br><br>Node tr[N];<br><span class="hljs-keyword">int</span> idx, Root;<br><span class="hljs-keyword">int</span> cas, n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    tr[x].siz = tr[tr[x].s[<span class="hljs-number">0</span>]].siz + tr[tr[x].s[<span class="hljs-number">1</span>]].siz + <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">if</span>(tr[x].flag) {<br>        <span class="hljs-built_in">swap</span>(tr[x].s[<span class="hljs-number">0</span>], tr[x].s[<span class="hljs-number">1</span>]);<br>        tr[tr[x].s[<span class="hljs-number">0</span>]].flag ^= <span class="hljs-number">1</span>;<br>        tr[tr[x].s[<span class="hljs-number">1</span>]].flag ^= <span class="hljs-number">1</span>;<br>        tr[x].flag = <span class="hljs-number">0</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>    <span class="hljs-keyword">int</span> k = (tr[y].s[<span class="hljs-number">1</span>] == x);<br>    tr[z].s[tr[z].s[<span class="hljs-number">1</span>] == y] = x, tr[x].p = z;<br>    tr[y].s[k] = tr[x].s[k ^ <span class="hljs-number">1</span>], tr[tr[x].s[k ^ <span class="hljs-number">1</span>]].p = y;<br>    tr[x].s[k ^ <span class="hljs-number">1</span>] = y, tr[y].p = x;<br>    <span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in">Pushup</span>(x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>    <span class="hljs-keyword">while</span>(tr[x].p != goal) {<br>        <span class="hljs-keyword">int</span> y = tr[x].p, z = tr[y].p;<br>        <span class="hljs-keyword">if</span>(z != goal) {<br>            <span class="hljs-keyword">if</span>((tr[z].s[<span class="hljs-number">1</span>] == y) ^ (tr[y].s[<span class="hljs-number">1</span>] == x)) <span class="hljs-built_in">Rotate</span>(x);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">Rotate</span>(y);<br>        }<br>        <span class="hljs-built_in">Rotate</span>(x);<br>    }<br>    <span class="hljs-keyword">if</span>(goal == <span class="hljs-number">0</span>) Root = x;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(u) {<br>        p = u, u = tr[u].s[v &gt; tr[u].v];<br>    }<br>    u = ++idx;<br>    <span class="hljs-keyword">if</span>(p) {<br>        tr[p].s[v &gt; tr[p].v] = u;<br>    }<br>    tr[u].<span class="hljs-built_in">init</span>(v, p);<br>    <span class="hljs-built_in">Splay</span>(u, <span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>    <span class="hljs-keyword">int</span> u = Root;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>        <span class="hljs-built_in">Pushdown</span>(u);<br>        <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]].siz &gt;= rk) u = tr[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tr[tr[u].s[<span class="hljs-number">0</span>]].siz == rk - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">else</span> rk -= (tr[tr[u].s[<span class="hljs-number">0</span>]].siz + <span class="hljs-number">1</span>), u = tr[u].s[<span class="hljs-number">1</span>];<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>{<br>    <span class="hljs-comment">//这一步是翻转</span><br>    <span class="hljs-built_in">Pushdown</span>(u);<br>    <span class="hljs-comment">//从u开始中序遍历</span><br>    <span class="hljs-comment">//左</span><br>    <span class="hljs-keyword">if</span>(tr[u].s[<span class="hljs-number">0</span>]) <span class="hljs-built_in">Output</span>(tr[u].s[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">//判定哨兵, 输出当前结点</span><br>    <span class="hljs-keyword">if</span>(tr[u].v &gt;= <span class="hljs-number">1</span> &amp;&amp; tr[u].v &lt;= n) cout &lt;&lt; tr[u].v &lt;&lt; <span class="hljs-string">' '</span>;<br>    <span class="hljs-comment">//右</span><br>    <span class="hljs-keyword">if</span>(tr[u].s[<span class="hljs-number">1</span>]) <span class="hljs-built_in">Output</span>(tr[u].s[<span class="hljs-number">1</span>]);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n &gt;&gt; cas;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i) {<br>        <span class="hljs-comment">//插入哨兵防止越界</span><br>        <span class="hljs-built_in">Insert</span>(i);<br>    }<br>    <span class="hljs-keyword">while</span>(cas--) {<br>        <span class="hljs-keyword">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        l = <span class="hljs-built_in">getValByRank</span>(l), r = <span class="hljs-built_in">getValByRank</span>(r + <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">Splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">Splay</span>(r, l);<br>        tr[tr[r].s[<span class="hljs-number">0</span>]].flag ^= <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-built_in">Output</span>(Root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-comment">//对零基础即为友好</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>	<span class="hljs-keyword">int</span> v, p, s[<span class="hljs-number">2</span>], siz;<br>	<span class="hljs-keyword">bool</span> flag;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>		v = _v, p = _p;<br>		siz = <span class="hljs-number">0</span>;<br>	}<br>};<br><br>Node tr[N];<br><span class="hljs-keyword">int</span> n, cas, Root, idx;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 一些宏定义, 用法简单明了, 跟一大堆杂乱无章的中括号说再见!!!</span><br><span class="hljs-comment"> * ex. 	node(x).init(v, p)		//初始化结点x的属性v, p</span><br><span class="hljs-comment"> * 		siz(left(x))			//获取结点x的左子节点size</span><br><span class="hljs-comment"> *		siz(node(x).ls)			//另一种写法</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> isRoot(x) (x == 0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BST_getPos(fa, val) tr[fa].s[(val) &gt; tr[(fa)].v]	<span class="hljs-comment">//在fa结点下面根据BST性质插入一个值为val的结点, 判定结点位置(即: 要插在哪里)</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> node(x) tr[(x)]										<span class="hljs-comment">//可以理解为x号结点的对象, 方便使用ls, rs</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> left(x) tr[(x)].s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> right(x) tr[(x)].s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> val(x) tr[(x)].v</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> siz(x) tr[(x)].siz</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> flag(x) tr[(x)].flag</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pa(x) tr[(x)].p</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son(fa, x) tr[(fa)].s[(x)]							<span class="hljs-comment">//获取结点fa的儿子, 参数x为左右, 左0右1</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LoR(fa, x) (tr[(fa)].s[1] == (x))					<span class="hljs-comment">//L or R, x是fa的哪个儿子</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-built_in">siz</span>(x) = <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(x)) + <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">right</span>(x)) + <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">flag</span>(x)) {<br>		<span class="hljs-built_in">swap</span>(<span class="hljs-built_in">left</span>(x), <span class="hljs-built_in">right</span>(x));<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">left</span>(x)) ^= <span class="hljs-number">1</span>;<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">right</span>(x)) ^= <span class="hljs-number">1</span>;<br>		<span class="hljs-built_in">flag</span>(x) = <span class="hljs-number">0</span>;<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">int</span> y = <span class="hljs-built_in">pa</span>(x), z = <span class="hljs-built_in">pa</span>(y);<br>	<span class="hljs-keyword">int</span> k = <span class="hljs-built_in">LoR</span>(y, x);<br>	<span class="hljs-built_in">son</span>(z, <span class="hljs-built_in">LoR</span>(z, y)) = x, <span class="hljs-built_in">pa</span>(x) = z;<br>	<span class="hljs-built_in">son</span>(y, k) = <span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>), <span class="hljs-built_in">pa</span>(<span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>)) = y;<br>	<span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>) = y, <span class="hljs-built_in">pa</span>(y) = x;<br>	<span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in">Pushup</span>(x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">pa</span>(x) != goal) {<br>		<span class="hljs-keyword">int</span> y = <span class="hljs-built_in">pa</span>(x), z = <span class="hljs-built_in">pa</span>(y);<br>			<span class="hljs-keyword">if</span>(z != goal) {<br>			<span class="hljs-keyword">if</span>(<span class="hljs-built_in">LoR</span>(z, y) ^ <span class="hljs-built_in">LoR</span>(y, x)) {<br>				<span class="hljs-built_in">Rotate</span>(x);<br>			} <span class="hljs-keyword">else</span> {<br>				<span class="hljs-built_in">Rotate</span>(y);<br>			}<br>		}<br>		<span class="hljs-built_in">Rotate</span>(x);<br>	}<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">isRoot</span>(goal)) Root = x;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>	<span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span>(u) {<br>		p = u, u = <span class="hljs-built_in">BST_getPos</span>(u, v);<br>	}<br>	u = ++idx;<br>	<span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isRoot</span>(p)) {<br>		<span class="hljs-built_in">BST_getPos</span>(p, v) = u;<br>	}<br>	<span class="hljs-built_in">node</span>(u).<span class="hljs-built_in">init</span>(v, p);<br>	<span class="hljs-built_in">Splay</span>(u, <span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>	<span class="hljs-keyword">int</span> u = Root;<br>	<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>		<span class="hljs-built_in">Pushdown</span>(u);<br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) &gt;= rk) u = <span class="hljs-built_in">left</span>(u);<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) == rk - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> u;<br>		<span class="hljs-keyword">else</span> rk -= <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) + <span class="hljs-number">1</span>, u = <span class="hljs-built_in">right</span>(u);<br>	}<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-built_in">Pushdown</span>(x);<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>(x)) <span class="hljs-built_in">Output</span>(<span class="hljs-built_in">left</span>(x));<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">val</span>(x) &gt;= <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">val</span>(x) &lt;= n) cout &lt;&lt; <span class="hljs-built_in">val</span>(x) &lt;&lt; <span class="hljs-string">' '</span>;<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">right</span>(x)) <span class="hljs-built_in">Output</span>(<span class="hljs-built_in">right</span>(x)); <br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; n &gt;&gt; cas;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i) {<br>		<span class="hljs-built_in">Insert</span>(i);<br>	}<br>	<span class="hljs-keyword">while</span>(cas--) {<br>		<span class="hljs-keyword">int</span> l, r;<br>		cin &gt;&gt; l &gt;&gt; r;<br>		l = <span class="hljs-built_in">getValByRank</span>(l), r = <span class="hljs-built_in">getValByRank</span>(r + <span class="hljs-number">2</span>);<br>		<span class="hljs-built_in">Splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">Splay</span>(r, l);<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">left</span>(r)) ^= <span class="hljs-number">1</span>;<br>	}<br>	<span class="hljs-built_in">Output</span>(Root);<br>	<span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-comment">//对零基础即为友好</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> {</span><br>	<span class="hljs-keyword">int</span> v, p, s[<span class="hljs-number">2</span>], siz;<br>	<span class="hljs-keyword">bool</span> flag;<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span> </span>{<br>		v = _v, p = _p;<br>		siz = <span class="hljs-number">0</span>;<br>	}<br>};<br><br>Node tr[N];<br><span class="hljs-keyword">int</span> n, cas, Root, idx;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 一些宏定义, 用法简单明了, 跟一大堆杂乱无章的中括号说再见!!!</span><br><span class="hljs-comment"> * ex. 	node(x).init(v, p)		//初始化结点x的属性v, p</span><br><span class="hljs-comment"> * 		siz(left(x))			//获取结点x的左子节点size</span><br><span class="hljs-comment"> *		siz(node(x).ls)			//另一种写法</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> isRoot(x) (x == 0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BST_getPos(fa, val) tr[fa].s[(val) &gt; tr[(fa)].v]	<span class="hljs-comment">//在fa结点下面根据BST性质插入一个值为val的结点, 判定结点位置(即: 要插在哪里)</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> node(x) tr[(x)]										<span class="hljs-comment">//可以理解为x号结点的对象, 方便使用ls, rs</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> left(x) tr[(x)].s[0]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> right(x) tr[(x)].s[1]</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> val(x) tr[(x)].v</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> siz(x) tr[(x)].siz</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> flag(x) tr[(x)].flag</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pa(x) tr[(x)].p</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> son(fa, x) tr[(fa)].s[(x)]							<span class="hljs-comment">//获取结点fa的儿子, 参数x为左右, 左0右1</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LoR(fa, x) (tr[(fa)].s[1] == (x))					<span class="hljs-comment">//L or R, x是fa的哪个儿子</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-built_in">siz</span>(x) = <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(x)) + <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">right</span>(x)) + <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">flag</span>(x)) {<br>		<span class="hljs-built_in">swap</span>(<span class="hljs-built_in">left</span>(x), <span class="hljs-built_in">right</span>(x));<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">left</span>(x)) ^= <span class="hljs-number">1</span>;<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">right</span>(x)) ^= <span class="hljs-number">1</span>;<br>		<span class="hljs-built_in">flag</span>(x) = <span class="hljs-number">0</span>;<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-keyword">int</span> y = <span class="hljs-built_in">pa</span>(x), z = <span class="hljs-built_in">pa</span>(y);<br>	<span class="hljs-keyword">int</span> k = <span class="hljs-built_in">LoR</span>(y, x);<br>	<span class="hljs-built_in">son</span>(z, <span class="hljs-built_in">LoR</span>(z, y)) = x, <span class="hljs-built_in">pa</span>(x) = z;<br>	<span class="hljs-built_in">son</span>(y, k) = <span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>), <span class="hljs-built_in">pa</span>(<span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>)) = y;<br>	<span class="hljs-built_in">son</span>(x, k ^ <span class="hljs-number">1</span>) = y, <span class="hljs-built_in">pa</span>(y) = x;<br>	<span class="hljs-built_in">Pushup</span>(y), <span class="hljs-built_in">Pushup</span>(x);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> goal)</span> </span>{<br>	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">pa</span>(x) != goal) {<br>		<span class="hljs-keyword">int</span> y = <span class="hljs-built_in">pa</span>(x), z = <span class="hljs-built_in">pa</span>(y);<br>			<span class="hljs-keyword">if</span>(z != goal) {<br>			<span class="hljs-keyword">if</span>(<span class="hljs-built_in">LoR</span>(z, y) ^ <span class="hljs-built_in">LoR</span>(y, x)) {<br>				<span class="hljs-built_in">Rotate</span>(x);<br>			} <span class="hljs-keyword">else</span> {<br>				<span class="hljs-built_in">Rotate</span>(y);<br>			}<br>		}<br>		<span class="hljs-built_in">Rotate</span>(x);<br>	}<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">isRoot</span>(goal)) Root = x;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>{<br>	<span class="hljs-keyword">int</span> u = Root, p = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span>(u) {<br>		p = u, u = <span class="hljs-built_in">BST_getPos</span>(u, v);<br>	}<br>	u = ++idx;<br>	<span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isRoot</span>(p)) {<br>		<span class="hljs-built_in">BST_getPos</span>(p, v) = u;<br>	}<br>	<span class="hljs-built_in">node</span>(u).<span class="hljs-built_in">init</span>(v, p);<br>	<span class="hljs-built_in">Splay</span>(u, <span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValByRank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rk)</span> </span>{<br>	<span class="hljs-keyword">int</span> u = Root;<br>	<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) {<br>		<span class="hljs-built_in">Pushdown</span>(u);<br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) &gt;= rk) u = <span class="hljs-built_in">left</span>(u);<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) == rk - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> u;<br>		<span class="hljs-keyword">else</span> rk -= <span class="hljs-built_in">siz</span>(<span class="hljs-built_in">left</span>(u)) + <span class="hljs-number">1</span>, u = <span class="hljs-built_in">right</span>(u);<br>	}<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>	<span class="hljs-built_in">Pushdown</span>(x);<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>(x)) <span class="hljs-built_in">Output</span>(<span class="hljs-built_in">left</span>(x));<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">val</span>(x) &gt;= <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">val</span>(x) &lt;= n) cout &lt;&lt; <span class="hljs-built_in">val</span>(x) &lt;&lt; <span class="hljs-string">' '</span>;<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">right</span>(x)) <span class="hljs-built_in">Output</span>(<span class="hljs-built_in">right</span>(x)); <br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; n &gt;&gt; cas;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i) {<br>		<span class="hljs-built_in">Insert</span>(i);<br>	}<br>	<span class="hljs-keyword">while</span>(cas--) {<br>		<span class="hljs-keyword">int</span> l, r;<br>		cin &gt;&gt; l &gt;&gt; r;<br>		l = <span class="hljs-built_in">getValByRank</span>(l), r = <span class="hljs-built_in">getValByRank</span>(r + <span class="hljs-number">2</span>);<br>		<span class="hljs-built_in">Splay</span>(l, <span class="hljs-number">0</span>), <span class="hljs-built_in">Splay</span>(r, l);<br>		<span class="hljs-built_in">flag</span>(<span class="hljs-built_in">left</span>(r)) ^= <span class="hljs-number">1</span>;<br>	}<br>	<span class="hljs-built_in">Output</span>(Root);<br>	<span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h3 id="普通平衡树luogu-p3369">普通平衡树(<a href="https://www.luogu.com.cn/problem/P3369">Luogu P3369</a>)</h3>
<blockquote>
<p>实现增, 删, 查询排名与反查, 查询前驱与后继功能.</p>
</blockquote>
<h4 id="solution1-stdvector">Solution1: <code>std::vector</code></h4>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">int</span> cas;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; cas;<br>	<span class="hljs-keyword">while</span>(cas--) {<br>		<span class="hljs-keyword">int</span> op, x;<br>		cin &gt;&gt; op &gt;&gt; x;<br>		<span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(op) {<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:		<span class="hljs-comment">//insert(x)</span><br>				v.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x), x);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:		<span class="hljs-comment">//delete(x)</span><br>				v.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x));<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:		<span class="hljs-comment">//getRank(x)</span><br>				cout &lt;&lt; <span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x) - v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span> &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:		<span class="hljs-comment">//getValueByRank(x)</span><br>				cout &lt;&lt; v[x - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:		<span class="hljs-comment">//getPre(x)</span><br>				cout &lt;&lt; *--<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x) &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:		<span class="hljs-comment">//getNxt(x)</span><br>				cout &lt;&lt; *<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x + <span class="hljs-number">1</span>) &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>		}<br>	}<br>	<span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; v;<br><span class="hljs-keyword">int</span> cas;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	cin &gt;&gt; cas;<br>	<span class="hljs-keyword">while</span>(cas--) {<br>		<span class="hljs-keyword">int</span> op, x;<br>		cin &gt;&gt; op &gt;&gt; x;<br>		<span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(op) {<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:		<span class="hljs-comment">//insert(x)</span><br>				v.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x), x);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:		<span class="hljs-comment">//delete(x)</span><br>				v.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x));<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:		<span class="hljs-comment">//getRank(x)</span><br>				cout &lt;&lt; <span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x) - v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span> &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:		<span class="hljs-comment">//getValueByRank(x)</span><br>				cout &lt;&lt; v[x - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:		<span class="hljs-comment">//getPre(x)</span><br>				cout &lt;&lt; *--<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x) &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:		<span class="hljs-comment">//getNxt(x)</span><br>				cout &lt;&lt; *<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x + <span class="hljs-number">1</span>) &lt;&lt; endl;<br>				<span class="hljs-keyword">break</span>;<br>		}<br>	}<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/06/hello-world/</url>
    <content><![CDATA[<p>如题, 这是我的第一篇文章.</p>
]]></content>
  </entry>
  <entry>
    <title>二分</title>
    <url>/2022/02/20/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h1 id="二分">二分</h1>
<h2 id="二分查找">二分查找</h2>
<p>给定一个序列<span class="math inline">\(\{a\}\)</span>, 查找指定元素<span class="math inline">\(x\)</span>位置.</p>
<h3 id="代码实现">代码实现</h3>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>{<br>    <span class="hljs-keyword">while</span>(l &lt; r) {<br>        <span class="hljs-keyword">int</span> mid = l + (r - l &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-keyword">return</span> a[l] == x ? l : <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>{<br>    <span class="hljs-keyword">while</span>(l &lt; r) {<br>        <span class="hljs-keyword">int</span> mid = l + (r - l &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-keyword">return</span> a[l] == x ? l : <span class="hljs-number">-1</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h2 id="二分答案">二分答案</h2>
<p>单调区间内高效地查找最优答案, <strong>可以看作"枚举"的优化</strong>. 常用来解决"最大值最小化"问题.</p>
<h2 id="luogu-p1873-砍树"><a href="https://www.luogu.com.cn/problem/P1873">Luogu P1873 砍树</a></h2>
<p>如果枚举<span class="math inline">\([1, 1\times 10^9]\)</span>会超时, 使用二分答案.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n;<br>LL a[N], m;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(LL height)</span> </span>{<br>    LL got = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {<br>        got += <span class="hljs-built_in">max</span>(a[i] - height, <span class="hljs-number">0ll</span>);<br>    }<br>    <span class="hljs-keyword">return</span> got &gt;= m;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {<br>        cin &gt;&gt; a[i];<br>    }<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1e9</span> + <span class="hljs-number">1</span>;		<span class="hljs-comment">//闭合的区间, 1e9需要加一</span><br>    <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> &lt; r) {			<span class="hljs-comment">//l, r不能相邻</span><br>        <span class="hljs-keyword">int</span> mid = l + (r - l &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isValid</span>(mid)) {<br>            l = mid;<br>        } <span class="hljs-keyword">else</span> {<br>            r = mid;<br>        }<br>    }<br>    cout &lt;&lt; l &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n;<br>LL a[N], m;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(LL height)</span> </span>{<br>    LL got = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {<br>        got += <span class="hljs-built_in">max</span>(a[i] - height, <span class="hljs-number">0ll</span>);<br>    }<br>    <span class="hljs-keyword">return</span> got &gt;= m;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {<br>        cin &gt;&gt; a[i];<br>    }<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1e9</span> + <span class="hljs-number">1</span>;		<span class="hljs-comment">//闭合的区间, 1e9需要加一</span><br>    <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> &lt; r) {			<span class="hljs-comment">//l, r不能相邻</span><br>        <span class="hljs-keyword">int</span> mid = l + (r - l &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isValid</span>(mid)) {<br>            l = mid;<br>        } <span class="hljs-keyword">else</span> {<br>            r = mid;<br>        }<br>    }<br>    cout &lt;&lt; l &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>启发式合并</title>
    <url>/2021/11/13/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h1 id="梦幻布丁hnoi-2009">梦幻布丁(HNOI-2009)</h1>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-comment">/*启发式合并，</span><br><span class="hljs-comment">时间复杂度分析：</span><br><span class="hljs-comment">考虑用贡献法来分析，每次合并后，队列长度一定大于等于原来短的长度的两倍，这样相当于每次合并都会让短的长度扩大一倍以上，最多扩大 logN 次，</span><br><span class="hljs-comment">所以总复杂度O(NlogN)，每次O(logN)。</span><br><span class="hljs-comment">对于这道题目，我们先求出原序列的答案，对于每一种颜色都用类似链表的数据结构串起来，并记录下尾节点。每次修改，都根据启发式合并的方法来暴力合并，</span><br><span class="hljs-comment">然后处理一下此次合并对答案的影响（显然答案是不增的）。</span><br><span class="hljs-comment">但是如果我们把 1 染成 2 并且 hsh[1]&gt;hsh[2]，那么我们应该把 2 接到 1 的后面。这样会有一个问题：本次修改后这个链的颜色是 1（颜色为 2 的链被删除了），</span><br><span class="hljs-comment">如果接下来修改颜色 2（显然这是合法的），会使得找不到颜色 2 而只能找到颜色 1 了。所以我们需要使用一个 f 数组，表示当我们要寻找颜色 x 时，实际上需</span><br><span class="hljs-comment">要寻找颜色为 color[x] 的链。如果遇到上面这种情况就要交换交换 color[x] 和 color[y]*/</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>,maxm=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">int</span> n,m,c[maxn],hsh[maxm],sta[maxm],color[maxm],pos[maxm],nxt[maxn],ans;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>{<br>	<span class="hljs-keyword">int</span> ret=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=<span class="hljs-built_in">getchar</span>();<br>	<span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch)){<span class="hljs-keyword">if</span> (ch==<span class="hljs-string">'-'</span>)f=-f;ch=<span class="hljs-built_in">getchar</span>();}<br>	<span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch)) ret=(ret&lt;&lt;<span class="hljs-number">3</span>)+(ret&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>,ch=<span class="hljs-built_in">getchar</span>();<br>	<span class="hljs-keyword">return</span> ret*f;<br>}<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=pos[x];i;i=nxt[i]) ans-=(c[i<span class="hljs-number">-1</span>]==y)+(c[i+<span class="hljs-number">1</span>]==y);<span class="hljs-comment">//合并时需要注意细节 y x y </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=pos[x];i;i=nxt[i]) c[i]=y;<span class="hljs-comment">//把原有的x统统变成y </span><br>    nxt[sta[x]]=pos[y],pos[y]=pos[x],hsh[y]+=hsh[x];<span class="hljs-comment">//实质就是再不重新建立关系的同时，依旧利用已有的关联关系。换一个解释就是下次处理颜色y时 </span><br>    pos[x]=sta[x]=hsh[x]=<span class="hljs-number">0</span>;                         <span class="hljs-comment">//先把原有的x处理掉(刚刚改变成的y的x)，然后再来解决原有的y，等价于把x接到y的屁股后面</span><br>	                                                <span class="hljs-comment">//最后把x原有的不需要的关联关系干掉 </span><br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    n=<span class="hljs-built_in">read</span>(),m=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br>        c[i]=<span class="hljs-built_in">read</span>(),color[c[i]]=c[i];<br>        ans+=c[i]!=c[i<span class="hljs-number">-1</span>];	<span class="hljs-comment">//统计段数 </span><br>        <span class="hljs-keyword">if</span> (!pos[c[i]]) sta[c[i]]=i;<br>        hsh[c[i]]++,nxt[i]=pos[c[i]],pos[c[i]]=i;<br>    }<br>    <span class="hljs-keyword">while</span> (m--){<br>        <span class="hljs-keyword">int</span> opt=<span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (opt==<span class="hljs-number">2</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">int</span> x=<span class="hljs-built_in">read</span>(),y=<span class="hljs-built_in">read</span>();<br>            <span class="hljs-keyword">if</span> (x==y) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (hsh[color[x]]&gt;hsh[color[y]]) <span class="hljs-built_in">swap</span>(color[x],color[y]);<br>            <span class="hljs-keyword">if</span> (!hsh[color[x]]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-built_in">merge</span>(color[x],color[y]);<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-comment">/*启发式合并，</span><br><span class="hljs-comment">时间复杂度分析：</span><br><span class="hljs-comment">考虑用贡献法来分析，每次合并后，队列长度一定大于等于原来短的长度的两倍，这样相当于每次合并都会让短的长度扩大一倍以上，最多扩大 logN 次，</span><br><span class="hljs-comment">所以总复杂度O(NlogN)，每次O(logN)。</span><br><span class="hljs-comment">对于这道题目，我们先求出原序列的答案，对于每一种颜色都用类似链表的数据结构串起来，并记录下尾节点。每次修改，都根据启发式合并的方法来暴力合并，</span><br><span class="hljs-comment">然后处理一下此次合并对答案的影响（显然答案是不增的）。</span><br><span class="hljs-comment">但是如果我们把 1 染成 2 并且 hsh[1]&gt;hsh[2]，那么我们应该把 2 接到 1 的后面。这样会有一个问题：本次修改后这个链的颜色是 1（颜色为 2 的链被删除了），</span><br><span class="hljs-comment">如果接下来修改颜色 2（显然这是合法的），会使得找不到颜色 2 而只能找到颜色 1 了。所以我们需要使用一个 f 数组，表示当我们要寻找颜色 x 时，实际上需</span><br><span class="hljs-comment">要寻找颜色为 color[x] 的链。如果遇到上面这种情况就要交换交换 color[x] 和 color[y]*/</span> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100005</span>,maxm=<span class="hljs-number">1000005</span>;<br><span class="hljs-keyword">int</span> n,m,c[maxn],hsh[maxm],sta[maxm],color[maxm],pos[maxm],nxt[maxn],ans;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>{<br>	<span class="hljs-keyword">int</span> ret=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> ch=<span class="hljs-built_in">getchar</span>();<br>	<span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch)){<span class="hljs-keyword">if</span> (ch==<span class="hljs-string">'-'</span>)f=-f;ch=<span class="hljs-built_in">getchar</span>();}<br>	<span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch)) ret=(ret&lt;&lt;<span class="hljs-number">3</span>)+(ret&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>,ch=<span class="hljs-built_in">getchar</span>();<br>	<span class="hljs-keyword">return</span> ret*f;<br>}<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=pos[x];i;i=nxt[i]) ans-=(c[i<span class="hljs-number">-1</span>]==y)+(c[i+<span class="hljs-number">1</span>]==y);<span class="hljs-comment">//合并时需要注意细节 y x y </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=pos[x];i;i=nxt[i]) c[i]=y;<span class="hljs-comment">//把原有的x统统变成y </span><br>    nxt[sta[x]]=pos[y],pos[y]=pos[x],hsh[y]+=hsh[x];<span class="hljs-comment">//实质就是再不重新建立关系的同时，依旧利用已有的关联关系。换一个解释就是下次处理颜色y时 </span><br>    pos[x]=sta[x]=hsh[x]=<span class="hljs-number">0</span>;                         <span class="hljs-comment">//先把原有的x处理掉(刚刚改变成的y的x)，然后再来解决原有的y，等价于把x接到y的屁股后面</span><br>	                                                <span class="hljs-comment">//最后把x原有的不需要的关联关系干掉 </span><br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    n=<span class="hljs-built_in">read</span>(),m=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++){<br>        c[i]=<span class="hljs-built_in">read</span>(),color[c[i]]=c[i];<br>        ans+=c[i]!=c[i<span class="hljs-number">-1</span>];	<span class="hljs-comment">//统计段数 </span><br>        <span class="hljs-keyword">if</span> (!pos[c[i]]) sta[c[i]]=i;<br>        hsh[c[i]]++,nxt[i]=pos[c[i]],pos[c[i]]=i;<br>    }<br>    <span class="hljs-keyword">while</span> (m--){<br>        <span class="hljs-keyword">int</span> opt=<span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (opt==<span class="hljs-number">2</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">int</span> x=<span class="hljs-built_in">read</span>(),y=<span class="hljs-built_in">read</span>();<br>            <span class="hljs-keyword">if</span> (x==y) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (hsh[color[x]]&gt;hsh[color[y]]) <span class="hljs-built_in">swap</span>(color[x],color[y]);<br>            <span class="hljs-keyword">if</span> (!hsh[color[x]]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-built_in">merge</span>(color[x],color[y]);<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> nxt[N], pos[N], raw[N], a[N], last[N], color[N], cnt[N];<br><span class="hljs-keyword">int</span> n, m, ans;<br><span class="hljs-comment">//int marge(int, int);</span><br><br><span class="hljs-comment">//看std看不懂, 总结出一个小技巧</span><br><span class="hljs-comment">//嵌套的数组一个个模拟太难, 可以用一下OOP的思想方便理解</span><br><span class="hljs-comment">//就比如桶排的时候把cnt[a[i]]理解为a[i].cnt就舒服很多</span><br><span class="hljs-comment">//阅读这个代码时需要经常这样思考. 例如color[raw[i]]可以理解为raw[i].color, 把包在中括号里边的东西看成object就好</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>;	<span class="hljs-comment">//x是数字, w是符号位</span><br>  <span class="hljs-keyword">char</span> ch = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) {  <span class="hljs-comment">//!isdigit(ch)</span><br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) w = <span class="hljs-number">-1</span>;        <br>    ch = <span class="hljs-built_in">getchar</span>();               <br>  }<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) {  <span class="hljs-comment">//isdigit(ch)</span><br>    x = x * <span class="hljs-number">10</span> + (ch - <span class="hljs-string">'0'</span>); <br>    ch = <span class="hljs-built_in">getchar</span>();<br>  }<br>  <span class="hljs-keyword">return</span> x * w;<br>}<br><br><span class="hljs-comment">//Example:</span><br><span class="hljs-comment">//int n = read();</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">marge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-comment">//把所有x变成y, 小优化见main函数调用的marge地方</span><br>    <span class="hljs-comment">//下面这几行, 链表的遍历, 比较难懂.</span><br>    <span class="hljs-comment">//注意到答案应该是只减不增的, 因为修改的本质是"合并", "段数"越合并越少. 这也是这题最难想的地方, 不是一个个修改再统计段数, 是用链表存储后再模拟"合并"更新答案.</span><br>    <span class="hljs-comment">//这个加法用得很好, 因为跟前面的一样意味着少了一段 跟后面的不一样意味着有少了一段</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pos[x]; i; i = nxt[i]) ans -= (raw[i - <span class="hljs-number">1</span>] == y) + (raw[i + <span class="hljs-number">1</span>] == y);    <span class="hljs-comment">//更新答案</span><br>    <span class="hljs-comment">//模拟"合并"的操作</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pos[x]; i; i = nxt[i]) raw[i] = y;    <span class="hljs-comment">//修改x ---&gt; y</span><br>    nxt[last[x]] = pos[y];  <span class="hljs-comment">//更新尾节点, 即每段最后一个</span><br>    pos[y] = pos[x];    <span class="hljs-comment">//更新位置</span><br>    cnt[y] += cnt[x];   <span class="hljs-comment">//加上个数</span><br>    pos[x] = last[x] = cnt[x] = <span class="hljs-number">0</span>;    <span class="hljs-comment">//合并完之后x没了</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(false); cin.tie(0);</span><br><br>    <span class="hljs-comment">//cin &gt;&gt; n &gt;&gt; m;</span><br>    n = <span class="hljs-built_in">read</span>(); m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) {<br>        <span class="hljs-comment">//cin &gt;&gt; raw[i];</span><br>        raw[i] = <span class="hljs-built_in">read</span>();<br>        color[raw[i]] = raw[i]; <span class="hljs-comment">//color[x]统计第x个颜色</span><br>        ans += (raw[i] != raw[i - <span class="hljs-number">1</span>]);  <span class="hljs-comment">//预处理一下"段数", 这个方法很巧妙, 读入的时候只要跟前面的不一样就表示又有一段</span><br>        cnt[raw[i]] ++; <span class="hljs-comment">//cnt就是桶, 即计数数组</span><br>        <span class="hljs-keyword">if</span>(!pos[i]) last[i] = raw[i];     <span class="hljs-comment">//每种布丁最后一个的位置</span><br>        nxt[i] = pos[raw[i]]; pos[raw[i]] = i;<br>    }<br><br>    <span class="hljs-keyword">while</span>(m --) {<br>        <span class="hljs-keyword">int</span> op1, op2, op3;<br>        <span class="hljs-comment">//cin &gt;&gt; op1;</span><br>        op1 = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span>(op1 == <span class="hljs-number">1</span>) {<br>            <span class="hljs-comment">//cin &gt;&gt; op2 &gt;&gt; op3;</span><br>            op2 = <span class="hljs-built_in">read</span>(); op3 = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-keyword">if</span>(cnt[color[op1]] &gt; cnt[color[op2]]) <span class="hljs-built_in">swap</span>(color[op1], color[op2]);     <span class="hljs-comment">//小优化, 把x变成y和把y变成x, 之后的答案是不受影响的, 所以改操作次数少的.</span><br>            <span class="hljs-keyword">if</span>(op2 == op3 || !cnt[color[op2]]) <span class="hljs-keyword">continue</span>;    <span class="hljs-comment">//std考虑得很周全, 舍去修改没有的元素和"修改个寂寞", 防止被卡.</span><br>            <span class="hljs-built_in">marge</span>(op2, op3);<br>        } <span class="hljs-keyword">else</span> {<br>            cout &lt;&lt; ans &lt;&lt; endl;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> nxt[N], pos[N], raw[N], a[N], last[N], color[N], cnt[N];<br><span class="hljs-keyword">int</span> n, m, ans;<br><span class="hljs-comment">//int marge(int, int);</span><br><br><span class="hljs-comment">//看std看不懂, 总结出一个小技巧</span><br><span class="hljs-comment">//嵌套的数组一个个模拟太难, 可以用一下OOP的思想方便理解</span><br><span class="hljs-comment">//就比如桶排的时候把cnt[a[i]]理解为a[i].cnt就舒服很多</span><br><span class="hljs-comment">//阅读这个代码时需要经常这样思考. 例如color[raw[i]]可以理解为raw[i].color, 把包在中括号里边的东西看成object就好</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>;	<span class="hljs-comment">//x是数字, w是符号位</span><br>  <span class="hljs-keyword">char</span> ch = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) {  <span class="hljs-comment">//!isdigit(ch)</span><br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) w = <span class="hljs-number">-1</span>;        <br>    ch = <span class="hljs-built_in">getchar</span>();               <br>  }<br>  <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) {  <span class="hljs-comment">//isdigit(ch)</span><br>    x = x * <span class="hljs-number">10</span> + (ch - <span class="hljs-string">'0'</span>); <br>    ch = <span class="hljs-built_in">getchar</span>();<br>  }<br>  <span class="hljs-keyword">return</span> x * w;<br>}<br><br><span class="hljs-comment">//Example:</span><br><span class="hljs-comment">//int n = read();</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">marge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-comment">//把所有x变成y, 小优化见main函数调用的marge地方</span><br>    <span class="hljs-comment">//下面这几行, 链表的遍历, 比较难懂.</span><br>    <span class="hljs-comment">//注意到答案应该是只减不增的, 因为修改的本质是"合并", "段数"越合并越少. 这也是这题最难想的地方, 不是一个个修改再统计段数, 是用链表存储后再模拟"合并"更新答案.</span><br>    <span class="hljs-comment">//这个加法用得很好, 因为跟前面的一样意味着少了一段 跟后面的不一样意味着有少了一段</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pos[x]; i; i = nxt[i]) ans -= (raw[i - <span class="hljs-number">1</span>] == y) + (raw[i + <span class="hljs-number">1</span>] == y);    <span class="hljs-comment">//更新答案</span><br>    <span class="hljs-comment">//模拟"合并"的操作</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pos[x]; i; i = nxt[i]) raw[i] = y;    <span class="hljs-comment">//修改x ---&gt; y</span><br>    nxt[last[x]] = pos[y];  <span class="hljs-comment">//更新尾节点, 即每段最后一个</span><br>    pos[y] = pos[x];    <span class="hljs-comment">//更新位置</span><br>    cnt[y] += cnt[x];   <span class="hljs-comment">//加上个数</span><br>    pos[x] = last[x] = cnt[x] = <span class="hljs-number">0</span>;    <span class="hljs-comment">//合并完之后x没了</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(false); cin.tie(0);</span><br><br>    <span class="hljs-comment">//cin &gt;&gt; n &gt;&gt; m;</span><br>    n = <span class="hljs-built_in">read</span>(); m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) {<br>        <span class="hljs-comment">//cin &gt;&gt; raw[i];</span><br>        raw[i] = <span class="hljs-built_in">read</span>();<br>        color[raw[i]] = raw[i]; <span class="hljs-comment">//color[x]统计第x个颜色</span><br>        ans += (raw[i] != raw[i - <span class="hljs-number">1</span>]);  <span class="hljs-comment">//预处理一下"段数", 这个方法很巧妙, 读入的时候只要跟前面的不一样就表示又有一段</span><br>        cnt[raw[i]] ++; <span class="hljs-comment">//cnt就是桶, 即计数数组</span><br>        <span class="hljs-keyword">if</span>(!pos[i]) last[i] = raw[i];     <span class="hljs-comment">//每种布丁最后一个的位置</span><br>        nxt[i] = pos[raw[i]]; pos[raw[i]] = i;<br>    }<br><br>    <span class="hljs-keyword">while</span>(m --) {<br>        <span class="hljs-keyword">int</span> op1, op2, op3;<br>        <span class="hljs-comment">//cin &gt;&gt; op1;</span><br>        op1 = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span>(op1 == <span class="hljs-number">1</span>) {<br>            <span class="hljs-comment">//cin &gt;&gt; op2 &gt;&gt; op3;</span><br>            op2 = <span class="hljs-built_in">read</span>(); op3 = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-keyword">if</span>(cnt[color[op1]] &gt; cnt[color[op2]]) <span class="hljs-built_in">swap</span>(color[op1], color[op2]);     <span class="hljs-comment">//小优化, 把x变成y和把y变成x, 之后的答案是不受影响的, 所以改操作次数少的.</span><br>            <span class="hljs-keyword">if</span>(op2 == op3 || !cnt[color[op2]]) <span class="hljs-keyword">continue</span>;    <span class="hljs-comment">//std考虑得很周全, 舍去修改没有的元素和"修改个寂寞", 防止被卡.</span><br>            <span class="hljs-built_in">marge</span>(op2, op3);<br>        } <span class="hljs-keyword">else</span> {<br>            cout &lt;&lt; ans &lt;&lt; endl;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>题解</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>国庆模拟赛后总结</title>
    <url>/2021/10/17/%E5%9B%BD%E5%BA%86%E6%A8%A1%E6%8B%9F%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="赛后总结">赛后总结</h1>
<p><strong>注: 没写完, 因为有的题还没过.</strong></p>
<h2 id="前言">前言</h2>
<p>这个文档不一定在写精妙的算法, 有的部分甚至不是在分析满分解法, 更多的是怎么得<strong>该得的</strong>分以及怎么减少不必要的失分.</p>
<p>即: 目标是在j组复赛中分数最大化.</p>
<h2 id="section">2021/10/01</h2>
<h3 id="t1">T1</h3>
<p>在调错上浪费太多时间了, 最后才发现算法没有问题, 是<strong>switch语句</strong>的问题!!!</p>
<p>教训: 在写代码之前推思路的时候一定要明确它的<strong>正确性</strong>! 发现运行的结果不一样时<strong>不要轻易改代码, 更不要轻易改算法!</strong></p>
<p>调试小技巧: 输出一些东西 or 注释掉大段代码, 这些方法主要是快速定位出错的地方的, 实在不行可以下断点调试(用gdb可以的, 注意加debug symbol). 在怀疑算法出问题的时候在纸上推, <strong>不要动代码</strong>!!!</p>
<p>这题的正解是模运算, 可以快速定位到循环运行多次后的指令, 不必一次次模拟了.</p>
<p>(考场上写的是直接模拟, 拿指针一个一个走的那种, 拿了60分已经很不错了)</p>
<p>正解:</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = {<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>};<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = {<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>};<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> cmd[<span class="hljs-number">4</span>] = {<span class="hljs-string">'E'</span>, <span class="hljs-string">'S'</span>, <span class="hljs-string">'W'</span>, <span class="hljs-string">'N'</span>};<br><br>string ops;<br><span class="hljs-keyword">int</span> t, currx, curry, cnt[<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">(<span class="hljs-keyword">int</span> op)</span> </span>{<br>    currx += dx[op]; curry += dy[op];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; ops &gt;&gt; t;<br>    <span class="hljs-comment">//先运行一遍命令串</span><br>    <span class="hljs-keyword">int</span> oplen = ops.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; oplen; i ++) {<br>        <span class="hljs-keyword">char</span> ch = ops[i];<br>        <span class="hljs-comment">//不知道为什么switch会出问题, 比赛就是在这里卡了半小时</span><br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'E'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'S'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'W'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'N'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">3</span>);<br>    }<br><br>    <span class="hljs-keyword">int</span> cishu = t / oplen;  <span class="hljs-comment">//每个操作执行cishu遍, 但还可能有多余</span><br>    <span class="hljs-keyword">int</span> pos = t % oplen;    <span class="hljs-comment">//最后一个操作的位置</span><br><br>    <span class="hljs-comment">//判断条件</span><br>    <span class="hljs-keyword">if</span>(cishu == <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> OUTPUT; <span class="hljs-comment">//指令数 &gt;= t --&gt; 已经走完了, 直接输出就行</span><br><br>    <span class="hljs-comment">//第二种情况, 即len &lt; t, 要循环多次</span><br>    currx *= cishu; curry *= cishu;  <span class="hljs-comment">//走一次走到了当前的(x, y), 走cishu次就意味着每个点都走了cishu次, 对结果的影响求积即可</span><br>    <span class="hljs-comment">//好现在还剩几步, 走完它</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pos; i ++) {<br>        <span class="hljs-keyword">char</span> ch = ops[i];<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'E'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'S'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'W'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'N'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">3</span>);<br>    }<br><br>OUTPUT: cout &lt;&lt; currx &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; curry &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = {<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>};<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = {<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>};<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> cmd[<span class="hljs-number">4</span>] = {<span class="hljs-string">'E'</span>, <span class="hljs-string">'S'</span>, <span class="hljs-string">'W'</span>, <span class="hljs-string">'N'</span>};<br><br>string ops;<br><span class="hljs-keyword">int</span> t, currx, curry, cnt[<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">(<span class="hljs-keyword">int</span> op)</span> </span>{<br>    currx += dx[op]; curry += dy[op];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    cin &gt;&gt; ops &gt;&gt; t;<br>    <span class="hljs-comment">//先运行一遍命令串</span><br>    <span class="hljs-keyword">int</span> oplen = ops.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; oplen; i ++) {<br>        <span class="hljs-keyword">char</span> ch = ops[i];<br>        <span class="hljs-comment">//不知道为什么switch会出问题, 比赛就是在这里卡了半小时</span><br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'E'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'S'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'W'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'N'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">3</span>);<br>    }<br><br>    <span class="hljs-keyword">int</span> cishu = t / oplen;  <span class="hljs-comment">//每个操作执行cishu遍, 但还可能有多余</span><br>    <span class="hljs-keyword">int</span> pos = t % oplen;    <span class="hljs-comment">//最后一个操作的位置</span><br><br>    <span class="hljs-comment">//判断条件</span><br>    <span class="hljs-keyword">if</span>(cishu == <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> OUTPUT; <span class="hljs-comment">//指令数 &gt;= t --&gt; 已经走完了, 直接输出就行</span><br><br>    <span class="hljs-comment">//第二种情况, 即len &lt; t, 要循环多次</span><br>    currx *= cishu; curry *= cishu;  <span class="hljs-comment">//走一次走到了当前的(x, y), 走cishu次就意味着每个点都走了cishu次, 对结果的影响求积即可</span><br>    <span class="hljs-comment">//好现在还剩几步, 走完它</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pos; i ++) {<br>        <span class="hljs-keyword">char</span> ch = ops[i];<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'E'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'S'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'W'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'N'</span>) <span class="hljs-built_in">go</span>(<span class="hljs-number">3</span>);<br>    }<br><br>OUTPUT: cout &lt;&lt; currx &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; curry &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h3 id="t2">T2</h3>
<p>在推模拟分解质因数时浪费太多时间了, 这种考"板子"的数学题要在平时多做. 考场上要减少<strong>推板子</strong>的时间.</p>
<p>另外还好这题没打表, "只要是数学题就打表"终究是一种"骗分"的心态. 还是要多推式子.</p>
<p>附: 计算一个数素因数个数的代码</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x; i ++) {<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>) {<br>            res ++;<br>            x /= i;<br>            i --;	<span class="hljs-comment">//这行是尝试再拿这个数除一遍, 因为一个数可能有多个相同的质因子.</span><br>        }<br>    }<br>    <span class="hljs-keyword"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x; i ++) {<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>) {<br>            res ++;<br>            x /= i;<br>            i --;	<span class="hljs-comment">//这行是尝试再拿这个数除一遍, 因为一个数可能有多个相同的质因子.</span><br>        }<br>    }<br>    <span class="hljs-keyword">return</span> res;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>还有就是第十个点<strong>具体的</strong>数据给我们了, 是一个很大的数据, 这个O(N*sqrt(N))的算法显然要算很久(在我电脑上算了<strong>一个半小时</strong>), 所以只能用特判. 考试的时候可以优先用暴力或正解算着这种数据, 得到特判就行.</p>
<p>注: 这道是我两天模拟赛中唯一觉得做得还不错, 没啥太大遗憾的题.</p>
<p>注2: 我的电脑算了<strong>一个半小时</strong>, 终于算出最后一个点的特判是<code>564714</code>!!! 但是为什么第八个点还没过??? 最后是90分.</p>
<h3 id="t3">T3</h3>
<p>模拟题, 字太多考试的时候懒得看了. 之后这种题要多想想! 至少把样例算算, 知道模拟的过程.</p>
<p><del>现在赛后订正的时候也懒得看</del></p>
<h3 id="t4">T4</h3>
<p>四联通问题, 把上下左右当成相邻的节点用bfs访问</p>
<h2 id="section-1">2021/10/03</h2>
<h3 id="t1-1">T1</h3>
<p>一定要注意看清<strong>数据范围</strong>! 就比如这道题说了 <span class="math display">\[
N &lt; 1,000,000
\]</span> 就一定要开1e6, <strong>宁肯开大一点也不要开小</strong>!!! 一位数组不会因为开得跟题中一样大而MLE!!!</p>
<p>教训: <strong>1e5的代码52分, 1e6就ac了.</strong></p>
<p>真的是很可惜的, 明明满分算法想出来了, 思路就是正确的, 甚至代码写得都没问题. 就是因为数组没开大, 失分惨重.</p>
<p>思路再说一下吧, 前缀和. 这种<strong>区间询问或操作一位数组问题的算法</strong>在我目前的知识范围内大多只会是<strong>前缀和, 差分, 树状数组, 线段树</strong>了, 更高级的感觉j组考不到, 现在也不是学这种东西的时候.</p>
<blockquote>
<p>虽然1000万个数似乎很多, 但是, 如果这些数是8字节的整数, 那么将占用大致<strong>80MB</strong>.</p>
<p><em>Introduction to Algorithms(3rd edition)</em></p>
</blockquote>
<h3 id="t2-1">T2</h3>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><span class="hljs-keyword">int</span> array[N];	<span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>;<br><span class="hljs-keyword">int</span> array[N];	<span class="hljs-comment">//大约占用4MB空间</span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>这道题因为开了1e8的数组, 用了memset导致<strong>全部的点MLE</strong>.</p>
<p><strong>数组不要开太大!!! (1e8个int约等于380MB)</strong></p>
<p>本来可以得60分暴力分, 结果这题因为这个爆零了.</p>
<p>本题的正解是<strong>离线询问</strong>, 并记录操作, 类似于<strong>化简</strong>到最后一个操作, 就不必模拟了.</p>
<p>赛后还以为是用了几个玄学优化导致的问题.</p>
<p>说到玄学优化, 在这里记录几个好用的玄学优化:(好像扯得有点远了)</p>
<h4 id="cin优化">cin优化</h4>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++">ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);	<span class="hljs-comment"><code class="language-hljs c++">ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);	<span class="hljs-comment">//cin.tie(nullptr)在C++11及以上可用</span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>(这两行的意思是关闭与stdio的同步, 以提升cin, cout的速度. 在IO比较多的时候很好用. <strong>注意:用了这个优化就不能用stdio内的函数如<code>printf()</code>和<code>scanf()</code></strong>. 当然printf和scanf的速度是更快的, 如果会写快读快写那更快, <code>putchar()</code>和<code>getchar()</code>的速度不是吹的. )</p>
<h4 id="寄存器操作">寄存器操作</h4>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < n; i ++)<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>直接操作寄存器, 这样更快.</p>
<p>p.s. csp用不了内联汇编, 所以不要作死, 这个用用就行了</p>
<h4 id="行内函数inline">行内函数(inline)</h4>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-keyword">return</span> x + y;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);	<span class="hljs-comment">//直接就地展开函数, 没有调用关系</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    相当于</span><br><span class="hljs-comment">    inline int add(int x, int y) {</span><br><span class="hljs-comment">    	return x + y;</span><br><span class="hljs-comment">	}</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>{<br>    <span class="hljs-keyword">return</span> x + y;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);	<span class="hljs-comment">//直接就地展开函数, 没有调用关系</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    相当于</span><br><span class="hljs-comment">    inline int add(int x, int y) {</span><br><span class="hljs-comment">    	return x + y;</span><br><span class="hljs-comment">	}</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<p>适用于代码少, 调用频繁的函数.</p>
<p>函数调用时会将参数, 基址这些东西压栈. 最后call. 运行结束后会压入返回地址等信息(这些东西快忘了, 不对请指正). 这样调用一次无疑浪费了很多时间精力.(有空的话贴一下反汇编代码看得更清楚)</p>
<p>用<code>inline</code>定义会在调用处就地展开, 个人觉得比较像<code>#define</code>(?)</p>
<p>但是这么用会让代码编译后变得更大, 实际开发中要慎用. (算法比赛中没关系)</p>
<h3 id="t3-1">T3</h3>
<p>这里发现了两轮游戏中的单调性质, 但是竟然在纠结<strong>用哪个数据结构实现</strong>!!!</p>
<p>最后时间<strong>全浪费了</strong>, 暴力都没写完.</p>
<p>以后算法较为简单的题, 一定要先写暴力或者基本思路, <strong>不要先默板子或纠结该默哪个板子!!!</strong></p>
<h3 id="t4-1">T4</h3>
<p>这一题要采用类似图论存图的方法存能开哪里的灯, 然后<strong>bfs</strong>.</p>
<p>题干的意思其实是要找到房间之间的 <strong>"连接"</strong> 关系. 想到这里就能知道要用类似邻接表的方式存图了.</p>
<p>考场上我主要的问题在于只想着打暴力就用dfs, 就能拿分. 但是这个dfs在本机都肉眼可见地慢, 就放弃治疗, 也不想剪枝了.</p>
<p>想到bfs而不是用其它方法个人理解是因为本题要先开相邻的灯, 如果dfs需要走完一个方向才能走另一个方向, 不剪枝极其浪费.</p>
<h2 id="section-2">2021/10/05</h2>
<h3 id="t1-2">T1</h3>
<p>模拟赛中第一次ac.</p>
<p>老师给的题解: 数组模拟 (可以理解为手写双端队列)</p>
<p>自己的解法: <strong>stl大法好</strong>(使用<code>std::deque</code>, 即双端队列, 可以理解为可操作两端的<code>std::queue</code>)</p>
<p>可能会出现的问题: 一些stl内的函数可能性能不如手写的, 例如<code>std::string</code>里面的<code>S.find(P)</code>就是暴力匹配的, 性能不如手写KMP.</p>
<p>这是个重大的时刻, 贴个代码纪念一下, 顺便复习一下deque的用法.</p>
<p>(另外做这题的时候好像<strong>cin忘加了</strong>, 导致浪费了亿点时间调错)</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>deque&lt;<span class="hljs-keyword">int</span>&gt; q;   <span class="hljs-comment">//需要从前后操作, 双端队列</span><br><span class="hljs-keyword">int</span> n, id;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearq</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()) {<br>		q.<span class="hljs-built_in">pop_front</span>();<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">char</span> op, <span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-comment">//op == 'L'   左边入队</span><br>    <span class="hljs-comment">//op == 'R'   右边入队</span><br>    <span class="hljs-comment">//cout &lt;&lt; "add()" &lt;&lt; op &lt;&lt; ' ' &lt;&lt; x;</span><br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'L'</span>) {<br>        q.<span class="hljs-built_in">push_front</span>(x);<br>    }<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'R'</span>) {<br>        q.<span class="hljs-built_in">push_back</span>(x);<br>    }<br><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kill_people</span><span class="hljs-params">(<span class="hljs-keyword">char</span> op, <span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'L'</span>) {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i ++) q.<span class="hljs-built_in">pop_front</span>();<br>    }<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'R'</span>) {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i ++) q.<span class="hljs-built_in">pop_back</span>();<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">popq</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> res;<br>    res = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop_front</span>();<br>    <span class="hljs-keyword">return</span> res;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-comment">//clearq();</span><br>	ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) {<br>    	<span class="hljs-comment">//puts("LOOP");</span><br>        <span class="hljs-keyword">char</span> op, op1;<br>        <span class="hljs-keyword">int</span> k;<br>        cin &gt;&gt; op &gt;&gt; op1;<br>        <span class="hljs-comment">//cout &lt;&lt; op &lt;&lt; ' ' &lt;&lt; op1;</span><br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'A'</span>) {<br>            <span class="hljs-built_in">add</span>(op1, ++ id); 	<span class="hljs-comment">//只有入队才会有新的编号, 单独记录</span><br>            <span class="hljs-comment">//puts("added!!!")</span><br>        } <span class="hljs-keyword">else</span> {<br>            cin &gt;&gt; k;<br>            <span class="hljs-built_in">kill_people</span>(op1, k);<br>        }<br>    }<br><br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()) {<br>    	cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; endl;	<span class="hljs-comment">//从队首开始pop</span><br>    	q.<span class="hljs-built_in">pop_front</span>();<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>deque&lt;<span class="hljs-keyword">int</span>&gt; q;   <span class="hljs-comment">//需要从前后操作, 双端队列</span><br><span class="hljs-keyword">int</span> n, id;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearq</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()) {<br>		q.<span class="hljs-built_in">pop_front</span>();<br>	}<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">char</span> op, <span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-comment">//op == 'L'   左边入队</span><br>    <span class="hljs-comment">//op == 'R'   右边入队</span><br>    <span class="hljs-comment">//cout &lt;&lt; "add()" &lt;&lt; op &lt;&lt; ' ' &lt;&lt; x;</span><br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'L'</span>) {<br>        q.<span class="hljs-built_in">push_front</span>(x);<br>    }<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'R'</span>) {<br>        q.<span class="hljs-built_in">push_back</span>(x);<br>    }<br><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kill_people</span><span class="hljs-params">(<span class="hljs-keyword">char</span> op, <span class="hljs-keyword">int</span> x)</span> </span>{<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'L'</span>) {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i ++) q.<span class="hljs-built_in">pop_front</span>();<br>    }<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'R'</span>) {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i ++) q.<span class="hljs-built_in">pop_back</span>();<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">popq</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> res;<br>    res = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop_front</span>();<br>    <span class="hljs-keyword">return</span> res;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>	<span class="hljs-comment">//clearq();</span><br>	ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) {<br>    	<span class="hljs-comment">//puts("LOOP");</span><br>        <span class="hljs-keyword">char</span> op, op1;<br>        <span class="hljs-keyword">int</span> k;<br>        cin &gt;&gt; op &gt;&gt; op1;<br>        <span class="hljs-comment">//cout &lt;&lt; op &lt;&lt; ' ' &lt;&lt; op1;</span><br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'A'</span>) {<br>            <span class="hljs-built_in">add</span>(op1, ++ id); 	<span class="hljs-comment">//只有入队才会有新的编号, 单独记录</span><br>            <span class="hljs-comment">//puts("added!!!")</span><br>        } <span class="hljs-keyword">else</span> {<br>            cin &gt;&gt; k;<br>            <span class="hljs-built_in">kill_people</span>(op1, k);<br>        }<br>    }<br><br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()) {<br>    	cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; endl;	<span class="hljs-comment">//从队首开始pop</span><br>    	q.<span class="hljs-built_in">pop_front</span>();<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h3 id="t2-2">T2</h3>
<h3 id="t3-2">T3</h3>
<p>暴力解法是每个数跟它的左边和上面比较, 统计出符合条件的, 计算最大的面积.</p>
<p>正解是dp.</p>
<p>预处理<code>column[i][j</code>]和<code>can[i][j][k]</code>(用<code>can[i][j][k]</code>表示从第 i 行到第 j 行中的第 k 列能否接道第 i 行到第 j 行的 k-1 列中): <span class="math display">\[
column[i][j]={column[i-1][j]+1(a[i][j]&gt;=a[i-
1][j]),column[i][j]=1}
\]</span> 其中 <span class="math display">\[
can[i][j][k]=(can[i][j-1][k])\and(column[j][k]&gt;=j-i+1)\and(a[j][k]&gt;=a[j][k-
1])\and(coulumn[j][k-1]&gt;=j-i+1
\]</span></p>
<p>贴一个70分解法(用的不是dp, 也不是我写的)</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//DP?!不过我不想用正常的方法 那就写点玄学的吧。</span><br><span class="hljs-keyword">int</span> n,m,ma[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>],row[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>],col[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>	cin&gt;&gt;n&gt;&gt;m;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;++j)cin&gt;&gt;ma[i][j];<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;++j){<br>			row[i][j]=<span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j+<span class="hljs-number">1</span>;k&lt;=m;++k){<br>				<span class="hljs-keyword">if</span>(ma[i][k<span class="hljs-number">-1</span>]&lt;=ma[i][k])row[i][j]++;<br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>			}<br>		}<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j){<br>			col[j][i]=<span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j+<span class="hljs-number">1</span>;k&lt;=n;++k){<br>				<span class="hljs-keyword">if</span>(ma[k<span class="hljs-number">-1</span>][i]&lt;=ma[k][i])col[j][i]++;<br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>			}<br>		}<br>	<span class="hljs-comment">//完了完了 玄学方法开始了 </span><br>	<span class="hljs-keyword">int</span> temp=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;++j)<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=row[i][j];++k){<span class="hljs-comment">//k就是一种长度 </span><br>				<span class="hljs-keyword">int</span> len=*<span class="hljs-built_in">min_element</span>(col[i]+j,col[i]+j+k);<br>				temp=k*len;<br>				ans=<span class="hljs-built_in">max</span>(temp,ans);<br>			}<br>	cout&lt;&lt;ans&lt;&lt;endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number"><code class="language-hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//DP?!不过我不想用正常的方法 那就写点玄学的吧。</span><br><span class="hljs-keyword">int</span> n,m,ma[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>],row[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>],col[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>	cin&gt;&gt;n&gt;&gt;m;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;++j)cin&gt;&gt;ma[i][j];<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;++j){<br>			row[i][j]=<span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j+<span class="hljs-number">1</span>;k&lt;=m;++k){<br>				<span class="hljs-keyword">if</span>(ma[i][k<span class="hljs-number">-1</span>]&lt;=ma[i][k])row[i][j]++;<br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>			}<br>		}<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j){<br>			col[j][i]=<span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j+<span class="hljs-number">1</span>;k&lt;=n;++k){<br>				<span class="hljs-keyword">if</span>(ma[k<span class="hljs-number">-1</span>][i]&lt;=ma[k][i])col[j][i]++;<br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>			}<br>		}<br>	<span class="hljs-comment">//完了完了 玄学方法开始了 </span><br>	<span class="hljs-keyword">int</span> temp=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;++j)<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=row[i][j];++k){<span class="hljs-comment">//k就是一种长度 </span><br>				<span class="hljs-keyword">int</span> len=*<span class="hljs-built_in">min_element</span>(col[i]+j,col[i]+j+k);<br>				temp=k*len;<br>				ans=<span class="hljs-built_in">max</span>(temp,ans);<br>			}<br>	cout&lt;&lt;ans&lt;&lt;endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>} <br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
<h3 id="t4-2">T4</h3>
<p>这题不知道为什么写的算法没问题, 比赛的时候交了是零分(赛后交了一遍完全一样的代码ac了). 就当这次ac了吧, 但是一定要明白为什么会出这种问题, 比赛的时候要是还出就叫天天不灵, 叫地地不应了.</p>
<p>这题想了蛮久的, 主要是证明算法的正确性.</p>
<p>要注意的就是如果这种贪心题最后推出了一个比较简单的式子不要怀疑, 只要每一步都确定是对的式子就没错, 不要在这里过于纠结, 浪费时间.</p>
<p>思路再说一下: 要让ci * t最大, 就要让ci越大的获得更大时间差(这不是废话吗), 即把ci进行从大到小排序, 依次把最大的两个一样的放到最前面和最后面. 难点是模拟这个放在最前和最后的过程.</p>
<p>贴一下考场上的代码, 前面是排序.</p>
<figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre class="line-numbers language-hljs c++"><span class="hljs-comment">//安排位置</span><br>    <span class="hljs-keyword">int</span> n1 = <span class="hljs-number">1</span>, n2 = n;<br>    <span class="hljs-comment">//[1, n]</span><br>    <span class="hljs-comment">//n1:   开始时间偏移量</span><br>    <span class="hljs-comment">//n2:   结束时间偏移量</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k, n1 &lt;= n2; i ++, n1 ++, n2 --) {    <span class="hljs-comment">//两两一对地插入</span><br>        <span class="hljs-comment">//if(c[i] == c[i + 1])</span><br>            <span class="hljs-comment">//cout &lt;&lt; (c[i] == c[i + 1]) &lt;&lt; ' ' &lt;&lt; c[i] &lt;&lt; ' ' &lt;&lt; n1 &lt;&lt; ' ' &lt;&lt; c[i - 1] &lt;&lt; ' ' &lt;&lt; n2 &lt;&lt; endl;</span><br>            <span class="hljs-comment">//把大(c[i])的放在最后 小的(c[i + 1])放在最前 时间差最大</span><br>            <span class="hljs-comment">//第一次不得分 求时间差乘以最大的(即c[i])即可</span><br>            <span class="hljs-comment"><code class="language-hljs c++"><span class="hljs-comment">//安排位置</span><br>    <span class="hljs-keyword">int</span> n1 = <span class="hljs-number">1</span>, n2 = n;<br>    <span class="hljs-comment">//[1, n]</span><br>    <span class="hljs-comment">//n1:   开始时间偏移量</span><br>    <span class="hljs-comment">//n2:   结束时间偏移量</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k, n1 &lt;= n2; i ++, n1 ++, n2 --) {    <span class="hljs-comment">//两两一对地插入</span><br>        <span class="hljs-comment">//if(c[i] == c[i + 1])</span><br>            <span class="hljs-comment">//cout &lt;&lt; (c[i] == c[i + 1]) &lt;&lt; ' ' &lt;&lt; c[i] &lt;&lt; ' ' &lt;&lt; n1 &lt;&lt; ' ' &lt;&lt; c[i - 1] &lt;&lt; ' ' &lt;&lt; n2 &lt;&lt; endl;</span><br>            <span class="hljs-comment">//把大(c[i])的放在最后 小的(c[i + 1])放在最前 时间差最大</span><br>            <span class="hljs-comment">//第一次不得分 求时间差乘以最大的(即c[i])即可</span><br>            <span class="hljs-comment">//ans += ((n2 - n1) * c[i]  + 0);</span><br>            ans += (n2 - n1) * c[i];<br>    }<br><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>赛后总结</tag>
        <tag>题解</tag>
        <tag>模拟赛</tag>
      </tags>
  </entry>
</search>
